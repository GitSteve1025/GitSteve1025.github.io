<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Golang</title>
      <link href="/2024/12/11/Learning/Languages/Golang/"/>
      <url>/2024/12/11/Learning/Languages/Golang/</url>
      
        <content type="html"><![CDATA[<h1 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name <span class="keyword">type</span> = value</span><br><span class="line">name := value <span class="comment">// name 未使用过</span></span><br></pre></td></tr></table></figure><h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int32</span>(<span class="number">8</span>) <span class="comment">// int float 都适用</span></span><br></pre></td></tr></table></figure><p>$\rightarrow string$ 转换</p><p>方式一：$fmt.Sprintf()$</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">fmt.Sprintf(<span class="string">&quot;%参数&quot;</span>, 表达式) </span><br><span class="line"><span class="type">bool</span></span><br><span class="line">%tthe word <span class="literal">true</span> or <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">digit</span><br><span class="line">%bbase <span class="number">2</span></span><br><span class="line">%cthe character represented by the corresponding Unicode code point</span><br><span class="line">%dbase <span class="number">10</span></span><br><span class="line">%obase <span class="number">8</span></span><br><span class="line">%Obase <span class="number">8</span> with <span class="number">0</span>o prefix</span><br><span class="line">%qa single-quoted character literal safely escaped with Go syntax.</span><br><span class="line">%xbase <span class="number">16</span>, with lower-<span class="keyword">case</span> letters <span class="keyword">for</span> a-f</span><br><span class="line">%Xbase <span class="number">16</span>, with upper-<span class="keyword">case</span> letters <span class="keyword">for</span> A-F</span><br><span class="line">%UUnicode format: U+<span class="number">1234</span>; same as <span class="string">&quot;U+%04X&quot;</span></span><br><span class="line"></span><br><span class="line">float</span><br><span class="line">%bdecimalless scientific notation with exponent a power of two,</span><br><span class="line">in the manner of strconv.FormatFloat with the <span class="string">&#x27;b&#x27;</span> format,</span><br><span class="line">e.g. <span class="number">-123456</span>p<span class="number">-78</span></span><br><span class="line">%escientific notation, e.g. <span class="number">-1.234456e+78</span></span><br><span class="line">%Escientific notation, e.g. <span class="number">-1.234456E+78</span></span><br><span class="line">%fdecimal point but no exponent, e.g. <span class="number">123.456</span></span><br><span class="line">%Fsynonym <span class="keyword">for</span> %f</span><br><span class="line">%g%e <span class="keyword">for</span> large exponents, %f otherwise. Precision is discussed below.</span><br><span class="line">%G%E <span class="keyword">for</span> large exponents, %F otherwise</span><br><span class="line">%xhexadecimal notation (with decimal power of two exponent), e.g. <span class="number">-0x1</span><span class="number">.23</span>abcp+<span class="number">20</span></span><br><span class="line">%Xupper-<span class="keyword">case</span> hexadecimal notation, e.g. <span class="number">-0X1</span><span class="number">.23</span>ABCP+<span class="number">20</span></span><br></pre></td></tr></table></figure><p>方式二： $strconv$ 包</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strconv.FormatInt(i <span class="type">int64</span>, base <span class="type">int</span>) <span class="type">string</span></span><br><span class="line">strconv.FormatFloat(f <span class="type">float64</span>, fmt <span class="type">byte</span>, prec <span class="type">int</span>, bitSize <span class="type">int</span>) <span class="type">string</span></span><br></pre></td></tr></table></figure><p>$string \rightarrow$ 转换</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strconv.ParseInt(s <span class="type">string</span>, base <span class="type">int</span>, bitSize <span class="type">int</span>) (i <span class="type">int64</span>, err <span class="type">error</span>)</span><br><span class="line">strconv.ParseFloat(s <span class="type">string</span>, bitSize <span class="type">int</span>) (<span class="type">float64</span>, <span class="type">error</span>)</span><br></pre></td></tr></table></figure><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>动态数组，可修改。</p><p>$string$ 是切片，不可修改。</p><h2 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h2><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name <span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> age <span class="type">int</span></span><br><span class="line"></span><br><span class="line">fmt.Scan(a ...any) (n <span class="type">int</span>, err <span class="type">error</span>) <span class="comment">// 返回读取成功的个数和 err</span></span><br><span class="line">fmt.Scan(&amp;name， &amp;age) <span class="comment">// 需要引用 读取下一个 （换行不影响输入）</span></span><br><span class="line"></span><br><span class="line">Scanf(format <span class="type">string</span>, a ...any) (n <span class="type">int</span>, err <span class="type">error</span>) </span><br><span class="line">fmt.Scanf(<span class="string">&quot;%s%d&quot;</span>, &amp;name, &amp;age) <span class="comment">// 需要引用 不能换行输入 !!!</span></span><br><span class="line"></span><br><span class="line">fmt.Scanln(a ...any) (n <span class="type">int</span>, err <span class="type">error</span>) <span class="comment">// 和 Scan 类似，但遇到换行就结束</span></span><br><span class="line">fmt.Scanln(&amp;name) <span class="comment">// 输入 bob 18 -&gt; name = bob</span></span><br></pre></td></tr></table></figure><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> name &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;a&quot;</span>, <span class="string">&quot;A&quot;</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;A&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;b&quot;</span>, <span class="string">&quot;B&quot;</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;B&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;Default&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 无需 break， case 内可有多个</span></span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;&#125; <span class="comment">// 每个源文件都可以有 init()，在 main 前执行，可用来初始化</span></span><br></pre></td></tr></table></figure><h3 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h3><p>遇到 $defer$ 语句时，将该语句放入栈（相关值直接<strong>拷贝</strong>），在<strong>函数返回后</strong>从栈顶开始执行。</p><p>遇到 $panic$ 仍然会执行，可以用来 $recover$ ，类似 $try-catch$</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file = openfile(...)</span><br><span class="line"><span class="keyword">defer</span> file.<span class="built_in">close</span>() <span class="comment">// 这样可以直接 close() 下面还可继续用</span></span><br></pre></td></tr></table></figure><h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">append</span>()</span><br><span class="line"><span class="built_in">len</span>()</span><br><span class="line"><span class="built_in">copy</span>()</span><br><span class="line">min()</span><br><span class="line">max()</span><br><span class="line"><span class="built_in">new</span>()</span><br><span class="line"><span class="built_in">make</span>()</span><br><span class="line"><span class="built_in">recover</span>()</span><br><span class="line"><span class="built_in">delete</span>()</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>$defer \rightarrow panic \rightarrow recover$</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testError</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := <span class="built_in">recover</span>() <span class="comment">// 捕获异常</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Error! &quot;</span>, err)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">var</span> a <span class="type">int</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">int</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> c <span class="type">int</span> = a / b <span class="comment">// panic </span></span><br><span class="line">fmt.Println(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义错误类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testError</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := <span class="built_in">recover</span>()</span><br><span class="line">fmt.Println(<span class="string">&quot;Error! &quot;</span>, err)</span><br><span class="line">&#125;()</span><br><span class="line">err := errors.New(<span class="string">&quot;something wrong&quot;</span>) <span class="comment">// New</span></span><br><span class="line"><span class="built_in">panic</span>(err) <span class="comment">// panic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Person)</span></span> Set(name <span class="type">string</span>, age <span class="type">int</span>) &#123;</span><br><span class="line">p.Name = name</span><br><span class="line">p.Age = age</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Person <span class="comment">// 匿名字段</span></span><br><span class="line">major <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Teacher <span class="keyword">struct</span> &#123;</span><br><span class="line">Person <span class="comment">// 匿名字段</span></span><br><span class="line">teach <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>$interface$ 可用来实现多态。</p><p>接口也可继承，也要全部实现。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Behavior <span class="keyword">interface</span> &#123; <span class="comment">// 必须实现接口内所有函数</span></span><br><span class="line">Say()</span><br><span class="line">Walk()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Student)</span></span> Say() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Student Say&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Student)</span></span> Walk() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Student Walk&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Teacher)</span></span> Say() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Teacher Say&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Teacher)</span></span> Walk() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Teacher Walk&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestInterface</span><span class="params">(b Behavior)</span></span> &#123;</span><br><span class="line">b.Say()</span><br><span class="line">b.Walk()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a := Teacher&#123;</span><br><span class="line">    Person: Person&#123;</span><br><span class="line">        Name: <span class="string">&quot;alice&quot;</span>,</span><br><span class="line">        Age:  <span class="number">24</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    teach: <span class="string">&quot;math&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b := Student&#123;</span><br><span class="line">    Person: Person&#123;</span><br><span class="line">        Name: <span class="string">&quot;bob&quot;</span>,</span><br><span class="line">        Age:  <span class="number">18</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    major: <span class="string">&quot;math&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TestInterface(a)</span><br><span class="line">TestInterface(b)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基类实现了，子类可以直接用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span></span> Say() &#123;</span><br><span class="line">fmt.Println(p.Name, <span class="string">&quot; Say&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span></span> Walk() &#123;</span><br><span class="line">fmt.Println(p.Name, <span class="string">&quot; Walk&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">i = a</span><br><span class="line">c, ok := i.(Teacher) <span class="comment">// 类型断言 .(type), 转换成功 ok 为 true</span></span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">    TestInterface(c)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;failed&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p>$os$ 内 $File$ 。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Create</span><span class="params">(name <span class="type">string</span>)</span></span> (*File, <span class="type">error</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Open</span><span class="params">(name <span class="type">string</span>)</span></span> (*File, <span class="type">error</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *File)</span></span> Close() <span class="type">error</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *File)</span></span> Name() <span class="type">string</span> <span class="comment">// returns the name of the file as presented to Open.</span></span><br></pre></td></tr></table></figure><p>$sample$</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">file, err := os.Open(<span class="string">&quot;data.txt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Open file failed&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line">reader := bufio.NewReader(file)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    str, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>) <span class="comment">// 读到换行结束， str 中包含换行 &#x27;\n&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> err == io.EOF &#123;                  <span class="comment">// EOF结束</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Print(str)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Print(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">json</span>.<span class="title">Marshal</span><span class="params">(v any)</span></span> ([]<span class="type">byte</span>, <span class="type">error</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// struct</span></span><br><span class="line">p := Person&#123;</span><br><span class="line">    Name: <span class="string">&quot;alice&quot;</span>,</span><br><span class="line">    Age:  <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line">data, err := json.Marshal(p)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(<span class="type">string</span>(data))</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// map</span></span><br><span class="line">f := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line">f[<span class="string">&quot;score&quot;</span>] = <span class="number">100</span></span><br><span class="line">f[<span class="string">&quot;Age&quot;</span>] = <span class="number">18</span></span><br><span class="line">data, err := json.Marshal(f)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(<span class="type">string</span>(data))</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义序列化标签</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">Age  <span class="type">int</span>    <span class="string">`json:&quot;age&quot;`</span> <span class="comment">// 反射机制</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">json</span>.<span class="title">Unmarshal</span><span class="params">(data []<span class="type">byte</span>, v any)</span></span> <span class="type">error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// struct</span></span><br><span class="line">str := <span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;alice\&quot;,\&quot;age\&quot;:18&#125;&quot;</span></span><br><span class="line"><span class="keyword">var</span> p Person</span><br><span class="line">err := json.Unmarshal([]<span class="type">byte</span>(str), &amp;p)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(p.Name, p.Age)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// map</span></span><br><span class="line">str := <span class="string">&quot;&#123;\&quot;score\&quot;:10,\&quot;age\&quot;:18&#125;&quot;</span></span><br><span class="line">p := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line">err := json.Unmarshal([]<span class="type">byte</span>(str), &amp;p)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(p)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><h3 id="go"><a href="#go" class="headerlink" title="go"></a>go</h3><p>$go$ 关键字，轻量级线程。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每隔一秒执行一次</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestRoutine</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;SubTask%d\n&quot;</span>, i)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> TestRoutine() <span class="comment">// 多线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;MainTask%d\n&quot;</span>, i)</span><br><span class="line">time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mutex"><a href="#mutex" class="headerlink" title="mutex"></a>mutex</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">fac = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">200</span>)</span><br><span class="line">lk  sync.Mutex <span class="comment">// 全局变量锁</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestRace</span><span class="params">(n <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">res := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n; i++ &#123;</span><br><span class="line">res *= i</span><br><span class="line">lk.Lock() <span class="comment">// 加锁</span></span><br><span class="line">fac[i] = res</span><br><span class="line">lk.Unlock() <span class="comment">// 解锁</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h3><p>协程间通信，本质是队列。</p><p>所有协程阻塞会 $dead ; lock$ 。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestChannel</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//（必须 make 初始化， 不能超过容量）</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">chan</span> <span class="type">int</span> = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">3</span>) <span class="comment">// 创建一个容量为 3 的 channel</span></span><br><span class="line">a &lt;- <span class="number">10</span>                            <span class="comment">// 放入 channel</span></span><br><span class="line">    b := &lt;-a                           <span class="comment">// 取出 （为空取出会阻塞）</span></span><br><span class="line">fmt.Println(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestChannel</span><span class="params">()</span></span> &#123;</span><br><span class="line">allchan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;, <span class="number">10</span>)</span><br><span class="line">allchan &lt;- <span class="number">10</span></span><br><span class="line">allchan &lt;- <span class="string">&quot;bob&quot;</span></span><br><span class="line">allchan &lt;- Person&#123;</span><br><span class="line">Name: <span class="string">&quot;alice&quot;</span>,</span><br><span class="line">Age:  <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line">&lt;-allchan</span><br><span class="line">&lt;-allchan</span><br><span class="line">p := &lt;-allchan</span><br><span class="line">fmt.Println(p)</span><br><span class="line">p = p.(Person) <span class="comment">// 类型断言</span></span><br><span class="line">fmt.Println(p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$close$</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">close</span><span class="params">(c <span class="keyword">chan</span>&lt;- Type)</span></span></span><br><span class="line"><span class="comment">// 关闭后不能放入新数据，但是仍然可以读取数据</span></span><br></pre></td></tr></table></figure><p>遍历 $channel$</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">close</span>(allchan) <span class="comment">// 要先关闭，未关闭会阻塞</span></span><br><span class="line"><span class="keyword">for</span> v := <span class="keyword">range</span> allchan &#123;</span><br><span class="line">    fmt.Println(v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>协程间通信</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeData</span><span class="params">(ci <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;start write&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">50</span>; i++ &#123;</span><br><span class="line">ci &lt;- i</span><br><span class="line">fmt.Println(<span class="string">&quot;write data&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(ci)</span><br><span class="line">fmt.Println(<span class="string">&quot;end write&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readData</span><span class="params">(ci <span class="keyword">chan</span> <span class="type">int</span>, cb <span class="keyword">chan</span> <span class="type">bool</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;start read&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">v, ok := &lt;-ci <span class="comment">// 读不了会阻塞，然后等待 write 写入， close 后 ok ！= nil</span></span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;read data&quot;</span>, v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(cb)</span><br><span class="line">fmt.Println(<span class="string">&quot;end read&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ci := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">10</span>) <span class="comment">// 容量小于数据量，管道放满后， 阻塞等待读取</span></span><br><span class="line">cb := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> writeData(ci)</span><br><span class="line"><span class="keyword">go</span> readData(ci, cb)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">_, ok := &lt;-cb <span class="comment">// 等待前面协程运行完</span></span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reflect</span>.<span class="title">TypeOf</span><span class="params">(i any)</span></span> reflect.Type <span class="comment">// 获取类型（struct 含包名）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reflect</span>.<span class="title">ValueOf</span><span class="params">(i any)</span></span> reflect.Value <span class="comment">// 获取值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(reflect.Type)</span></span> Kind() reflect.Kind <span class="comment">// 返回 int string struct ... 等类型</span></span><br></pre></td></tr></table></figure><h2 id="net"><a href="#net" class="headerlink" title="net"></a>net</h2><h3 id="Dial"><a href="#Dial" class="headerlink" title="Dial"></a>Dial</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">net</span>.<span class="title">Dial</span><span class="params">(network <span class="type">string</span>, address <span class="type">string</span>)</span></span> (net.Conn, <span class="type">error</span>)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">connect, err := net.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;127.0.0.1:8080&quot;</span>) <span class="comment">// 发送</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Dial error: &quot;</span>, err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Write"><a href="#Write" class="headerlink" title="Write"></a>Write</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(net.Conn)</span></span> Write(b []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>) <span class="comment">// 向连接中写入</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">reader := bufio.NewReader(os.Stdin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    line, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;ReadString error: &quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    n, err := connect.Write([]<span class="type">byte</span>(line))</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;connect error: &quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;send %d bytes data\n&quot;</span>, n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Listen"><a href="#Listen" class="headerlink" title="Listen"></a>Listen</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">net</span>.<span class="title">Listen</span><span class="params">(network <span class="type">string</span>, address <span class="type">string</span>)</span></span> (net.Listener, <span class="type">error</span>)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">listen, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;0.0.0.0:8080&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;listen err:&quot;</span>, err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> listen.Close()</span><br></pre></td></tr></table></figure><h3 id="Accept"><a href="#Accept" class="headerlink" title="Accept"></a>Accept</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(net.Listener)</span></span> Accept() (net.Conn, <span class="type">error</span>) <span class="comment">// 等待 Dial 会产生阻塞</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;listening...&quot;</span>)</span><br><span class="line">    connect, err := listen.Accept()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;listen accept err:&quot;</span>, err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;accept suceessfully:&quot;</span>, connect.RemoteAddr()) <span class="comment">// 获取 Dial Addr</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">go</span> process(connect)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(net.Conn)</span></span> Read(b []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>) <span class="comment">// 从连接中读取</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(connect net.Conn)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> connect.Close()</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">1024</span>)</span><br><span class="line">n, err := connect.Read(buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;connect read err:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;read %d bytes data&quot;</span>, n)</span><br><span class="line">fmt.Println(buf[:n])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">_, err := fmt.Fprintln(writer, <span class="string">&quot;Test http&quot;</span>) <span class="comment">// 向 writer 写入 data</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;send info error:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/test&quot;</span>, test) <span class="comment">// http 处理 test</span></span><br><span class="line">err := http.ListenAndServe(<span class="string">&quot;:9090&quot;</span>, <span class="literal">nil</span>) <span class="comment">// 监听并服务 Addr</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;http serve failed:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="std"><a href="#std" class="headerlink" title="std"></a>std</h2><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Interface <span class="keyword">interface</span> &#123;</span><br><span class="line">    Len() <span class="type">int</span></span><br><span class="line">    Less(i, j <span class="type">int</span>) <span class="type">bool</span> <span class="comment">// i, j are indices of sequence elements</span></span><br><span class="line">    Swap(i, j <span class="type">int</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Interface <span class="keyword">interface</span> &#123;</span><br><span class="line">sort.Interface</span><br><span class="line">Push(x any) <span class="comment">// add x as element Len()</span></span><br><span class="line">Pop() any   <span class="comment">// remove and return element Len() - 1.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Item <span class="keyword">struct</span> &#123;</span><br><span class="line">    value <span class="type">int</span></span><br><span class="line">    priority <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PriorityQueue []Item</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p PriorityQueue)</span></span> Len() <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(p)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p PriorityQueue)</span></span> Swap(i <span class="type">int</span>, j <span class="type">int</span>) &#123;</span><br><span class="line">    p[i], p[j] = p[j], p[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p PriorityQueue)</span></span> Less(i <span class="type">int</span>, j <span class="type">int</span>) <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> p[i].priority &lt; p[j].priority</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *PriorityQueue)</span></span> Push(x any) &#123;</span><br><span class="line">    *p = <span class="built_in">append</span>(*p, x.(Item))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *PriorityQueue)</span></span> Pop() any &#123;</span><br><span class="line">    old := *p</span><br><span class="line">    n := <span class="built_in">len</span>(old)</span><br><span class="line">    x := old[n<span class="number">-1</span>]</span><br><span class="line">    *p = old[<span class="number">0</span>:n<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">heap.Init(&amp;que)</span><br><span class="line">heap.Push(&amp;que, Item&#123;value: k, priority: <span class="number">0</span>&#125;)</span><br><span class="line">u := heap.Pop(&amp;que).(Item).value</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
          <category> Languages </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML</title>
      <link href="/2024/12/11/Learning/Languages/html/"/>
      <url>/2024/12/11/Learning/Languages/html/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><p>使用 $html5$ </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="html"><a href="#html" class="headerlink" title="html"></a>html</h1><p>$language$</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="head"><a href="#head" class="headerlink" title="head"></a>head</h2><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="title"><a href="#title" class="headerlink" title="title"></a>title</h3><p>更改标题</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">        Learning HTML</span><br><span class="line">    <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="body"><a href="#body" class="headerlink" title="body"></a>body</h2><h3 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h3><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;</span><br><span class="line">一级标题</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line">&lt;h2&gt;</span><br><span class="line">二级标题</span><br><span class="line">&lt;/h2&gt;</span><br><span class="line">&lt;h3&gt;</span><br><span class="line">三级标题</span><br><span class="line">&lt;/h3&gt;</span><br><span class="line">&lt;h4&gt;</span><br><span class="line">四级标题</span><br><span class="line">&lt;/h4&gt;</span><br><span class="line">&lt;h5&gt;</span><br><span class="line">五级标题</span><br><span class="line">&lt;/h5&gt;</span><br><span class="line">&lt;h6&gt;</span><br><span class="line">六级标题</span><br><span class="line">&lt;/h6&gt;</span><br></pre></td></tr></table></figure><h4 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">段落</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="划分"><a href="#划分" class="headerlink" title="划分"></a>划分</h4><p><code>div</code> 分割划分作用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文本标签"><a href="#文本标签" class="headerlink" title="文本标签"></a>文本标签</h3><p><code>&lt;em&gt;</code> 元素将文本标记为强调（emphasis）格式。<code>&lt;em&gt;</code> 元素可以嵌套，嵌套层次越深，则强调的程度越深。</p><p><code>&lt;strong&gt;</code> 表示文本十分重要，一般用粗体显示。</p><p><code>&lt;span&gt;</code> <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML">HTML</a> 元素是一个通用的行级容器，本身不具备特殊含义。它可被用于对元素进行编组，以便于添加样式（通过使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes#class"><code>class</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes#id"><code>id</code></a> 属性），或共享属性值（例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes#lang"><code>lang</code></a> 属性）。该元素仅应在无其他合适语义元素时使用。<code>&lt;span&gt;</code> 与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/div">&#96;&#96;</a> 元素非常相似，但是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/div">&#96;&#96;</a> 是<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Block-level_content">块级元素</a>，而 <code>&lt;span&gt;</code> 是一个<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Inline-level_content">行级元素</a>。</p><p><code>&lt;cite&gt;</code> 表示一个作品的引用，且必须包含作品的标题。这个引用可能是一个根据适当的上下文约定关联引用的元数据的缩写。</p><p><code>&lt;dfn&gt;</code> 表示术语的一个定义。</p><p><code>&lt;del&gt;</code> 标签表示一些被从文档中删除的文字内容。比如可以在需要显示修改记录或者源代码差异的情况使用这个标签。<code>&lt;ins&gt;</code> 标签的作用恰恰于此相反：表示文档中添加的内容。这个标签通常（但不一定要）在文字上显示删除线。</p><p><code>&lt;ins&gt;</code> 元素定义已经被插入文档中的文本。</p><p><code>&lt;sub&gt;</code> 元素用于指定应显示为下标的行内文本，这完全是出于排版的原因。下标通常使用较小的文本以较低的基线显示。</p><p><code>&lt;sup&gt;</code> 元素定义仅出于排版目的而显示为上标的行内文本。上标通常以较小的文本在高出基线的位置呈现。</p><p><code>&lt;code&gt;</code> 元素为其显示的内容添加用以表明其中的文本是一段简短的计算机代码的样式。</p><p><code>&lt;pre&gt;</code> 按原文显示。</p><h3 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h3><p><code>&lt;img&gt;</code> 元素将一张图像嵌入文档。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> = <span class="string">&quot;star.jpg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>src</code> 属性是<strong>必须的</strong>，它包含了你想嵌入的图片的路径。</li><li><code>alt</code> 属性包含一条对图像的文本描述，这不是强制性的。</li><li><code>width</code>  宽度，单位像素。</li><li><code>height</code> 高度。</li></ul><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p><code>&lt;a&gt;</code> 元素（或称锚元素）可以通过它的 href 属性创建通向其他<strong>网页、文件、电子邮件地址、同一页面内的位置或任何其他 URL 的超链接</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.bilibili.com/&quot;</span>&gt;</span>Bilibili<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>target</code> 关键词对加载 URL 的位置有特殊含义：</p><ul><li><code>_self</code>：当前页面加载。（默认）</li><li><code>_blank</code>：通常在新标签页打开，但用户可以通过配置选择在新窗口打开。</li><li><code>_parent</code>：当前浏览环境的父级浏览上下文。如果没有父级框架，行为与 <code>_self</code> 相同。</li><li><code>_top</code>：最顶级的浏览上下文（当前浏览上下文中最“高”的祖先）。如果没有祖先，行为与 <code>_self</code> 相同。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.bilibili.com/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>Bilibili<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页内跳转。</p><p>跳转到相应的 $name$ 处。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#pos&quot;</span>&gt;</span> To pos <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;pos&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p><code>&lt;ol&gt;</code> 元素表示有序列表，通常渲染为一个带编号的列表。</p><p><code>&lt;li&gt;</code> 元素用于表示列表中的项目。它必须包含在一个父元素中：有序列表、无序列表或菜单。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        步骤一</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        步骤二</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        步骤三</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        a</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        b</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        c</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><h4 id="表格标题"><a href="#表格标题" class="headerlink" title="表格标题"></a>表格标题</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span></span><br><span class="line">     表格标题</span><br><span class="line">    <span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="表格头部"><a href="#表格头部" class="headerlink" title="表格头部"></a>表格头部</h4><p><code>&lt;thead&gt;</code> 表示表格头部。</p><p><code>&lt;tr&gt;</code> 表示一行。</p><p><code>&lt;th&gt;</code> 表示头部这一格。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span></span><br><span class="line">            1</span><br><span class="line">            <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span></span><br><span class="line">            2</span><br><span class="line">            <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span></span><br><span class="line">            3</span><br><span class="line">            <span class="tag">&lt;/<span class="name">th</span>&gt;</span>            </span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="表格主体"><a href="#表格主体" class="headerlink" title="表格主体"></a>表格主体</h4><p><code>&lt;tr&gt;</code> 表示一行。</p><p><code>&lt;td&gt;</code> 表示表格主体这一格。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            bob</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            f</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            12</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            1</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            alice</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            m</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            10</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            2</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="表格脚注"><a href="#表格脚注" class="headerlink" title="表格脚注"></a>表格脚注</h4><p><code>&lt;tfoot&gt;</code> 表示脚注。</p><p><code>&lt;tr&gt;</code> 表示一行。</p><p><code>&lt;td&gt;</code> 表示表格脚注这一格。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            4</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h4><p><code>border=&quot;10 px&quot;</code> 表示外边界线 10 px。</p><p><code>width=&quot;10 px&quot;</code> 宽度。</p><p><code>height=&quot;10 px&quot;</code> 高度。</p><p><code>cellspacing=&quot;0&quot;</code> 相邻格边框距离。</p><p>单个格或行或 body 等。</p><p><code>align=&quot;center&quot;</code> 水平方向对齐方式，<code>left</code> <code>center</code> <code>right</code> 。</p><p><code>valign=&quot;middle&quot;</code> 垂直方向对齐方式，<code>top</code> <code>middle</code> <code>bottom</code> 。</p><p><code>th</code> <code>td</code> 内</p><p><code>colspan=&quot;2&quot;</code> 表示横跨两列。</p><p><code>rowspan=&quot;2&quot;</code> 表示竖跨两行。</p><h3 id="单标签"><a href="#单标签" class="headerlink" title="单标签"></a>单标签</h3><p><code>&lt;br&gt;</code> 换行。</p><p><code>&lt;hr&gt;</code> 水平分割线。</p><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><p> <code>&lt;form&gt;</code> 元素表示文档中的一个区域，此区域包含交互控件，用于向 Web 服务器提交信息。</p><p><code>&lt;button&gt;</code> 元素表示一个可点击的按钮，可以用在<a href="https://developer.mozilla.org/zh-CN/docs/Learn/Forms">表单</a>或文档其他需要使用简单标准按钮的地方。</p><p><code>&lt;input&gt;</code> 元素用于为基于 Web 的表单创建交互式控件，以便接受来自用户的数据。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://search.bilibili.com/all&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;keyword&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span></span><br><span class="line">        search</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><p><code>&lt;input&gt;</code> 属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;keyword&quot;</span> <span class="attr">value</span>=<span class="string">&quot;scut&quot;</span> <span class="attr">minlength</span>=<span class="string">&quot;4&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>单选形式： $name$ 需要设置成一样，需要给出默认值 $value$ 。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type=&quot;radio&quot;</span><br></pre></td></tr></table></figure><p>多选形式：$name$ 需要设置成一样，需要给出默认值 $value$ 。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type=&quot;checkbox&quot;</span><br></pre></td></tr></table></figure><p>单&#x2F;多选默认选中加上 $checked$</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">checked</span><br></pre></td></tr></table></figure><p><code>input</code> 作为按钮 <code>submit</code> 属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;confirm&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="button"><a href="#button" class="headerlink" title="button"></a>button</h4><p><code>button</code> 重置填入的内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span></span><br><span class="line">    reset</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>普通按钮 （按钮默认 <code>type=&quot;submit&quot;</code>）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span></span><br><span class="line">    normal button</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="textarea"><a href="#textarea" class="headerlink" title="textarea"></a>textarea</h4><p>多行输入（文本域）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;other&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;10&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;&#x27;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="select"><a href="#select" class="headerlink" title="select"></a>select</h4><p>下拉框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;place&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;gd&quot;</span>&gt;</span>guangdong<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;jx&quot;</span>&gt;</span>jiangxi<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;cd&quot;</span>&gt;</span>chengdu<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>让某个选项默认选中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;jx&quot;</span> <span class="attr">selected</span>&gt;</span>jiangxi<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br></pre></td></tr></table></figure><p>禁用某个控件，只展示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;keyword&quot;</span> <span class="attr">value</span>=<span class="string">&quot;bilibili&quot;</span> <span class="attr">disabled</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><code>&lt;label&gt;</code> 元素</strong>（标签）表示用户界面中某个元素的说明。</p><p><strong><code>&lt;fieldset&gt;</code></strong> 元素用于对表单中的控制元素进行分组（也包括 label 元素）。</p><p><strong><code>&lt;legend&gt;</code></strong> <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML">HTML</a> 元素表示其父元素fieldset内容的标题。</p><p>框架标签嵌入 web，文件等。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://www.bilibili.com/&quot;</span> <span class="attr">width</span>=<span class="string">&quot;900&quot;</span> <span class="attr">height</span>=<span class="string">&quot;600&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
          <category> Languages </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/2024/12/11/Learning/Languages/js/"/>
      <url>/2024/12/11/Learning/Languages/js/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><p>编写 $javascript$ 。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 浏览器弹窗</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&quot;tips&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 向 body 输出</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">writeln</span>(<span class="string">&quot;something&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 向控制台输出</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;It is console&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行外部文件（引入 $src$ 后 $script$ 中内容就无效）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;extern.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h2><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> name = value</span><br></pre></td></tr></table></figure><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><p>输出变量类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> a)</span><br><span class="line">a = <span class="string">&quot;sedrt&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> a)</span><br></pre></td></tr></table></figure><p>变量类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">number</span><br><span class="line">boolean</span><br><span class="line">string</span><br><span class="line"><span class="literal">null</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">object <span class="comment">// 引用数据类型</span></span><br></pre></td></tr></table></figure><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><table><thead><tr><th align="left">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">getDate()</td><td align="center">以数值返回天（1-31）</td></tr><tr><td align="left">getDay()</td><td align="center">以数值获取周名（0-6）</td></tr><tr><td align="left">getFullYear()</td><td align="center">获取四位的年（yyyy）</td></tr><tr><td align="left">getHours()</td><td align="center">获取小时（0-23）</td></tr><tr><td align="left">getMilliseconds()</td><td align="center">获取毫秒（0-999）</td></tr><tr><td align="left">getMinutes()</td><td align="center">获取分（0-59）</td></tr><tr><td align="left">getMonth()</td><td align="center">获取月（0-11）</td></tr><tr><td align="left">getSeconds()</td><td align="center">获取秒（0-59）</td></tr><tr><td align="left">getTime()</td><td align="center">获取时间（从 1970 年 1 月 1 日至今）</td></tr></tbody></table><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><table><thead><tr><th align="left">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_charat.asp">charAt()</a></td><td align="center">返回指定位置处的字符。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_charcodeat.asp">charCodeAt()</a></td><td align="center">返回指定位置处字符编码。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_codepointat.asp">codePointAt()</a></td><td align="center">返回字符串中索引（位置）处的 Unicode 值。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_concat_string.asp">concat()</a></td><td align="center">返回两个或多个连接的字符串。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_constructor_string.asp">constructor</a></td><td align="center">返回字符串的构造函数。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_endswith.asp">endsWith()</a></td><td align="center">返回字符串是否以指定值结尾。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_fromcharcode.asp">fromCharCode()</a></td><td align="center">将 Unicode 值作为字符返回。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_includes.asp">includes()</a></td><td align="center">返回字符串是否包含指定值。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_indexof.asp">indexOf()</a></td><td align="center">返回值在字符串中第一次出现的位置。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_lastindexof.asp">lastIndexOf()</a></td><td align="center">返回值在字符串中最后一次出现的位置。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_length_string.asp">length</a></td><td align="center">返回字符串中的字符数。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_localecompare.asp">localeCompare()</a></td><td align="center">使用基于本地的顺序来比较字符串。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_match.asp">match()</a></td><td align="center">在字符串中搜索值或正则表达式，并返回匹配项。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_prototype_string.asp">prototype</a></td><td align="center">允许您向对象添加属性和方法。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_repeat.asp">repeat()</a></td><td align="center">返回拥有多个字符串副本的新字符串。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_replace.asp">replace()</a></td><td align="center">在字符串中搜索值或正则表达式，并返回替换值的字符串。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_search.asp">search()</a></td><td align="center">检索字符串中与正则表达式匹配的子串。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_slice_string.asp">slice()</a></td><td align="center">提取字符串的一部分并返回新字符串。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_split.asp">split()</a></td><td align="center">将字符串拆分为子字符串数组。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_startswith.asp">startsWith()</a></td><td align="center">检查字符串是否以指定字符开头。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_substr.asp">substr()</a></td><td align="center">从字符串中抽取子串，该方法是 substring() 的变种。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_substring.asp">substring()</a></td><td align="center">从字符串中抽取子串。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_tolocalelowercase.asp">toLocaleLowerCase()</a></td><td align="center">使用主机的语言环境返回转换为小写字母的字符串。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_tolocaleuppercase.asp">toLocaleUpperCase()</a></td><td align="center">使用主机的语言环境返回转换为大写字母的字符串。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_tolowercase.asp">toLowerCase()</a></td><td align="center">返回转换为小写字母的字符串。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_tostring_string.asp">toString()</a></td><td align="center">将字符串或字符串对象作为字符串返回。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_touppercase.asp">toUpperCase()</a></td><td align="center">返回转换为大写字母的字符串。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_trim_string.asp">trim()</a></td><td align="center">返回删除了空格的字符串。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_string_trim_end.asp">trimEnd()</a></td><td align="center">返回从末尾删除空格的字符串。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_string_trim_start.asp">trimStart()</a></td><td align="center">返回从开头删除空格的字符串。</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_valueof_string.asp">valueOf()</a></td><td align="center">返回字符串或字符串对象的原始值。</td></tr></tbody></table><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>$toString()$</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">toString</span>()) <span class="comment">// number -&gt; string</span></span><br></pre></td></tr></table></figure><p>$String()$ $null, undefined$ 可以使用。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>(a))</span><br></pre></td></tr></table></figure><p>$Number()$</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="title class_">Number</span>(b)</span><br></pre></td></tr></table></figure><p>$parseInt(), parseFloat()$</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(str, base)</span><br></pre></td></tr></table></figure><p>$Boolean()$ （数字 $0, NaN$ ，字符串空串，$null, undefined$ 转为 $false$）</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>基础运算符会类型自动转换。</p><p>$&#x3D;&#x3D;&#x3D;$ 不类型转换比较，类型不一样 $false$，类型一样且值一样 $true$</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a===b)</span><br></pre></td></tr></table></figure><p>$!&#x3D;&#x3D;$ 与 $&#x3D;&#x3D;&#x3D;$ 相反。</p><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p>声明 object 并且添加属性。</p><p><code>obj.dataname = value</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">obj.<span class="property">username</span> = <span class="string">&quot;alice&quot;</span> <span class="comment">// 两种均可</span></span><br><span class="line">obj[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;bob&quot;</span></span><br><span class="line">obj.<span class="property">gender</span> = <span class="string">&quot;f&quot;</span></span><br></pre></td></tr></table></figure><p>如果读取不存在的属性，会返回 <code>undefined</code></p><p>属性可以是函数。</p><p>删除对象的属性。</p><p><code>delete obj.dataneme</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> obj.<span class="property">gender</span></span><br></pre></td></tr></table></figure><p><code>in</code></p><p>判断对象中是否有某个属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&quot;name&quot;</span> <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;name in obj&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 ${ }$ 来创建对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable constant_">OBJ</span> = &#123; <span class="attr">name</span>: <span class="string">&quot;a&quot;</span>, <span class="attr">gender</span>: <span class="string">&quot;f&quot;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="function"><a href="#function" class="headerlink" title="function"></a>function</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">cout</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">cout</span>(<span class="string">&quot;s&quot;</span>)</span><br></pre></td></tr></table></figure><p>匿名函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>(<span class="string">&quot;s&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">User</span>(<span class="params">username, password</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">username</span> = username</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">password</span> = password</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">func</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">username</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;alice&quot;</span>, <span class="string">&quot;123456&quot;</span>) <span class="comment">// 必须有 new</span></span><br></pre></td></tr></table></figure><p><code>instanceof</code> 判断对象是否是某个类的实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj <span class="keyword">instanceof</span> <span class="title class_">User</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user <span class="keyword">instanceof</span> <span class="title class_">User</span>)</span><br></pre></td></tr></table></figure><p><code>prototype</code> 该类的公共属性，该类的对象都可访问。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">User</span>(<span class="params">username, password</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">username</span> = username</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">password</span> = password</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">User</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">type</span> = <span class="string">&quot;user&quot;</span></span><br><span class="line"><span class="keyword">var</span> user1 = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;alice&quot;</span>, <span class="string">&quot;123&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> user2 = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;bob&quot;</span>, <span class="string">&quot;12345&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user1.<span class="property">type</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user2.<span class="property">type</span>)</span><br></pre></td></tr></table></figure><p><code>attribute in object</code></p><p>当 <code>prototype</code> 中含有某个属性时， <code>in</code>  会是 true 。</p><p>判断对象自身耳不判断原型中有无某个属性用 <code>hasOwnProperty()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;type&quot;</span> <span class="keyword">in</span> user1) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;username&quot;</span> <span class="keyword">in</span> user1) <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user1.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;type&quot;</span>)) <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user1.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;username&quot;</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">arr[<span class="number">9</span>] = <span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">9</span>]) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">8</span>]) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p><code>length</code> 返回最大索引 + 1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>修改 <code>length</code></p><p>增大，多出的部分空出来。</p><p>改小，多出的元素被删除。</p><p>字面量创建数组。</p><p><code>var name = []</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">3</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br></pre></td></tr></table></figure><h2 id="call-apply"><a href="#call-apply" class="headerlink" title="call apply"></a>call apply</h2><p><code>call(this: Function, thisArg: any, ...argArray: any[]): any</code></p><p>第一个参数影响函数内的 this，后面的参数是函数的参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span>(<span class="params">str, num</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="variable language_">this</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> str, str)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> num, num)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">User</span>(<span class="params">username, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">username</span> = username</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;scut&quot;</span>, <span class="number">1919</span>)</span><br><span class="line"></span><br><span class="line">f.<span class="title function_">call</span>(user, <span class="string">&quot;scut&quot;</span>, <span class="number">1919</span>)</span><br></pre></td></tr></table></figure><p><code>apply(this: Function, thisArg: any, argArray?: any): any</code> </p><p>与 <code>call</code> 类似，函数参数要用数组传递。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f.<span class="title function_">apply</span>(user, [<span class="string">&quot;scut&quot;</span>, <span class="number">1919</span>])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
          <category> Languages </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="/2024/12/11/Learning/Languages/css/"/>
      <url>/2024/12/11/Learning/Languages/css/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><p>（引入）样式一般在 <code>&lt;head&gt;</code> 中。</p><h2 id="样式位置"><a href="#样式位置" class="headerlink" title="样式位置"></a>样式位置</h2><h3 id="行内样式"><a href="#行内样式" class="headerlink" title="行内样式"></a>行内样式</h3><p>写在标签 <code>style </code> 中， <code>名:值;</code> 。（优先级最高）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">h1</span> style=&quot;<span class="attribute">color</span>: pink; <span class="attribute">font-size</span>: <span class="number">25px</span>;&quot;&gt;CSS STYLE LEARNING&lt;/<span class="selector-tag">h1</span>&gt;</span><br></pre></td></tr></table></figure><p>样式简单才使用。</p><h3 id="内部样式"><a href="#内部样式" class="headerlink" title="内部样式"></a>内部样式</h3><p><code>&lt;style&gt;...&lt;/style&gt;</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: pink;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 内部样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Let us start<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>another style<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../html/star.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;star&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="外部样式"><a href="#外部样式" class="headerlink" title="外部样式"></a>外部样式</h3><p>引入外部样式， 更改 <code>href=&quot;url&quot;</code> （优先级&#x3D;内部样式，样式会覆盖）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="通配选择器"><a href="#通配选择器" class="headerlink" title="通配选择器"></a>通配选择器</h3><p>选择所有元素 <code>*&#123;&#125;</code> 。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h3><p><code>元素&#123;&#125;</code> 统一设置样式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: pink;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><p><code>.name&#123;&#125;</code> ，<code>class=&quot;name&quot;</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fname</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sname</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tname</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;fname&quot;</span>&gt;</span>Let us start<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;sname&quot;</span>&gt;</span>inner style<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;tname&quot;</span>&gt;</span>outter style<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;fname&quot;</span>&gt;</span>extern style<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h3><p><code>#name&#123;&#125;</code> </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#fname</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#sname</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#tname</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可与 <code>class</code> 一起使用， ID 最好是唯一使用的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;fname&quot;</span>&gt;</span>Let us start<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;sname&quot;</span>&gt;</span>inner style<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;tname&quot;</span>&gt;</span>outter style<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h3><p><code>元素.类名&#123;&#125;</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.fname</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给元素为 <code>&lt;p&gt;</code> 且类名为 <code>fname</code> 。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;fname&quot;</span>&gt;</span>alice<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;fname&quot;</span>&gt;</span>bob<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h3><p><code>选择器1,选择器2，...&#123;&#125;</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fname</span>,</span><br><span class="line"><span class="selector-class">.sname</span>,</span><br><span class="line"><span class="selector-class">.tname</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: black;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">260px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><p><code>选择器 后代选择器&#123;&#125;</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ol</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">223</span>, <span class="number">25</span>, <span class="number">25</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.name</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>ul1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>ul2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>ul3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>ol1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>ol2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>ol3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>class sub<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><p><code>[属性]&#123;&#125;</code></p><p><code>[属性=&quot;value&quot;]&#123;&#125;</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[title]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>=<span class="string">&quot;atui&quot;</span>&gt;</span> test1 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>=<span class="string">&quot;atui&quot;</span>&gt;</span> test2 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h2><h3 id="动态伪类"><a href="#动态伪类" class="headerlink" title="动态伪类"></a>动态伪类</h3><p><code>选择器:状态&#123;&#125;</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123; <span class="comment">/* 超链接独有 */</span></span><br><span class="line">    <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123; <span class="comment">/* 超链接独有 */</span></span><br><span class="line">    <span class="attribute">color</span>: gray;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123; </span><br><span class="line">    <span class="attribute">color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: brown;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>link</code> 表示未访问。</p><p><code>visited</code> 表示已经访问。</p><p><code>hover</code> 表示鼠标悬停在这上。</p><p><code>active</code> 表示鼠标正在点击。（顺序一般这样）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.bilibili.com/anime/&quot;</span>&gt;</span>anime<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.bilibili.com/guochuang/&quot;</span>&gt;</span>guochuang<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>test active<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>focus</code> 可输入聚焦点击时才有。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: lightblue; <span class="comment">/* 改变光标颜色 */</span></span><br><span class="line">    <span class="attribute">background-color</span>: gold; <span class="comment">/* 背景颜色 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="结构伪类"><a href="#结构伪类" class="headerlink" title="结构伪类"></a>结构伪类</h3><p><code>:first-child</code> 伪类来选择父元素的第一个子元素。</p><p><code>:nth-of-type(n)</code> 同类型的第几个元素。</p><h3 id="否定伪类"><a href="#否定伪类" class="headerlink" title="否定伪类"></a>否定伪类</h3><p><code>:not(selector)</code> 表示除了 selector。</p><h3 id="目标伪类"><a href="#目标伪类" class="headerlink" title="目标伪类"></a>目标伪类</h3><p><code>:target</code> 当锚点指向时。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:target</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#i1&quot;</span>&gt;</span>to 1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#i2&quot;</span>&gt;</span>to 2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#i3&quot;</span>&gt;</span>to 3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#i4&quot;</span>&gt;</span>to 4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#i5&quot;</span>&gt;</span>to 5<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#i6&quot;</span>&gt;</span>to 6<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span> <span class="attr">id</span>=<span class="string">&quot;i1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span> <span class="attr">id</span>=<span class="string">&quot;i2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span> <span class="attr">id</span>=<span class="string">&quot;i3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span> <span class="attr">id</span>=<span class="string">&quot;i4&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span> <span class="attr">id</span>=<span class="string">&quot;i5&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span> <span class="attr">id</span>=<span class="string">&quot;i6&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h2><p>改变输入框提示的样式。</p><p><code>::placeholder</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::placeholder</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>改变鼠标选中元素的样式。</p><p><code>::selection</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::selection</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>selection<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在某元素前创建子元素。</p><p><code>::before</code></p><p>在某元素后创建子元素。</p><p><code>::after</code></p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><p><code>rgb(x, y, z)</code></p><p><code>rgba(x, y, z, k)</code> k 表示透明度<code>[0, 1]</code>。</p><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p>一般情况字体都要明确大小。</p><p>可为 body 配置字体。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>未配置字体的会默认继承（优先级最低）祖先的某些（包含字体）样式。</p><p>某些需要单独改的单独写样式即可。</p><p>更改字体族。</p><p>优先使用前面的，如果没有就使用后面的。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: <span class="string">&quot;Fira Code&quot;</span>, <span class="string">&quot;宋体&quot;</span>;</span><br></pre></td></tr></table></figure><p>字体风格。</p><p><code>italic</code> 斜体。</p><p><code>normal</code> 正常。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-style</span>: italic;</span><br></pre></td></tr></table></figure><p>字体粗细。</p><p><code>bold</code> 粗体。</p><p><code>narmal</code> 正常。</p><p><code>lighter</code> 细体。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-weight</span>: bold;</span><br><span class="line"><span class="attribute">font-weight</span>: lighter;</span><br></pre></td></tr></table></figure><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><p>颜色。</p><p><code>color</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">color</span>: pink;</span><br></pre></td></tr></table></figure><p>字间距。</p><p><code>letter-spacing</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">letter-spacing</span>: <span class="number">20px</span>;</span><br></pre></td></tr></table></figure><p>词间距。</p><p><code>word-spacing</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">word-spacing</span>: <span class="number">50px</span>;</span><br></pre></td></tr></table></figure><p>文本修饰。</p><p><code>text-decoration</code></p><p><code>underline</code> 下划线。</p><p><code>line-through</code> 中线。</p><p><code>overline</code> 上划线。</p><p><code>none</code> 无。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-decoration</span>: underline;</span><br></pre></td></tr></table></figure><p>线种类 </p><p><code>dotted</code> 点线。</p><p><code>wavy</code> 波浪线。</p><p>还可以选线的颜色。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-decoration</span>: line-through dotted red;</span><br></pre></td></tr></table></figure><p>缩进</p><p><code>text-indent</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-indent</span>: <span class="number">50px</span>;</span><br></pre></td></tr></table></figure><p>文本对齐方式</p><p><code>text-align</code></p><p><code>left</code>  <code>center</code>  <code>right</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-align</span>: center;</span><br></pre></td></tr></table></figure><p>行高</p><p><code>line-height</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">1.5</span>; 表示是字体大小的 <span class="number">1.5</span> 倍</span><br></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p><code>list-style-type</code> 可以设置列表元素的 marker（比如圆点、符号、或者自定义计数器样式）。</p><p><strong><code>list-style-position</code></strong> 属性指定标记框在主体块框中的位置。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/list-style-position#outside"><code>outside</code></a></p><p>标记盒在主块盒的外面。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/list-style-position#inside"><code>inside</code></a></p><p>标记盒是主要块盒中的第一个行内盒，处于元素的内容流之后。</p><p><strong><code>list-style-image</code></strong> 属性用来指定一个能用来作为列表元素标记的图片。</p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-width"><code>border-width</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-style"><code>border-style</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-color"><code>border-color</code></a> （不是独有）</p><p>一起写。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> black solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">td</span>, <span class="selector-tag">th</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> blue solid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>border-spacing</code> 单元格之间的间距。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-spacing</span>: <span class="number">1px</span>;</span><br></pre></td></tr></table></figure><p><code>border-collapse</code> 合并相邻的边框。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-collapse</span>: collapse;</span><br></pre></td></tr></table></figure><p><code>empty-cells</code> 空单元格处理</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">empty-cells</span>: hide;</span><br></pre></td></tr></table></figure><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p><code>background-image</code> 背景图片。</p><p><code>background-repeat</code> 背景重复方式。</p><p><code>background-position</code> 背景图片位置。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-color</span>: pink;</span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;favicon.ico&quot;</span>);</span><br><span class="line"><span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line"><span class="attribute">background-position</span>: center top;</span><br></pre></td></tr></table></figure><h3 id="鼠标"><a href="#鼠标" class="headerlink" title="鼠标"></a>鼠标</h3><p><code>cursor</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">hand.cur</span>), pointer;</span><br></pre></td></tr></table></figure><h2 id="长度单位"><a href="#长度单位" class="headerlink" title="长度单位"></a>长度单位</h2><p><code>em</code>  相对 font-size 的大小。</p><p><code>rem</code> 相对根 font-size 的大小。</p><p><code>%</code> 相对父元素的大小。</p><h2 id="元素显示模式"><a href="#元素显示模式" class="headerlink" title="元素显示模式"></a>元素显示模式</h2><p><code>display</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: inline-block;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 预组合值 */</span></span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">display</span>: inline;</span><br><span class="line"><span class="attribute">display</span>: inline-block;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">display</span>: inline-flex;</span><br><span class="line"><span class="attribute">display</span>: grid;</span><br><span class="line"><span class="attribute">display</span>: inline-grid;</span><br><span class="line"><span class="attribute">display</span>: flow-root;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成盒子 */</span></span><br><span class="line"><span class="attribute">display</span>: none;</span><br><span class="line"><span class="attribute">display</span>: contents;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 多关键字语法 */</span></span><br><span class="line"><span class="attribute">display</span>: block flex;</span><br><span class="line"><span class="attribute">display</span>: block flow;</span><br><span class="line"><span class="attribute">display</span>: block flow-root;</span><br><span class="line"><span class="attribute">display</span>: block grid;</span><br><span class="line"><span class="attribute">display</span>: inline flex;</span><br><span class="line"><span class="attribute">display</span>: inline flow;</span><br><span class="line"><span class="attribute">display</span>: inline flow-root;</span><br><span class="line"><span class="attribute">display</span>: inline grid;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 其他值 */</span></span><br><span class="line"><span class="attribute">display</span>: table;</span><br><span class="line"><span class="attribute">display</span>: table-row; <span class="comment">/* 所有的 table 元素 都有等效的 CSS display 值 */</span></span><br><span class="line"><span class="attribute">display</span>: list-item;</span><br></pre></td></tr></table></figure><p>隐藏，但占位。</p><p><code>visibility</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">visibility</span>: hidden;</span><br></pre></td></tr></table></figure><h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><h3 id="content"><a href="#content" class="headerlink" title="content"></a>content</h3><p>子元素都在父元素的内容区内。</p><p><code>min-width</code></p><p><code>min-height</code></p><h3 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">0px</span> <span class="number">20px</span> <span class="number">0px</span>;</span><br></pre></td></tr></table></figure><h3 id="border"><a href="#border" class="headerlink" title="border"></a>border</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border</span>: <span class="number">10px</span> solid orange;</span><br><span class="line"><span class="attribute">border-color</span>: orange;</span><br><span class="line"><span class="attribute">border-left-color</span>: gray;</span><br></pre></td></tr></table></figure><h3 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0px</span> <span class="number">20px</span> <span class="number">0px</span>;</span><br></pre></td></tr></table></figure><h3 id="内容溢出"><a href="#内容溢出" class="headerlink" title="内容溢出"></a>内容溢出</h3><p>在容器上加属性。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">overflow</span>: visible; 直接超出</span><br><span class="line"><span class="attribute">overflow</span>: scroll; 给滚动条</span><br><span class="line"><span class="attribute">overflow</span>: auto; 自动</span><br></pre></td></tr></table></figure><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><p><code>float</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>A<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    sajd fhkjasdh fklajs dhfkjlask jasd hfklajs dhf kjlas kjasdh fklajsd hfkjl askj asdhf klajsd hfkjl askjas dhfkl ajsdhfk jlas</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p><code>position</code></p><p><code>relative</code> 相对之前的。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>absolute</code> 绝对定位。</p><p>根据最近祖先的的定位（必须要有 position）(在盒内，包含 <code>padding</code> 不包含 <code>border</code>)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p><code>fixed</code> 固定定位。</p><p>根据视口定位（会根据视口移动）。</p><p><code>sticky</code> 粘性定位。</p><p>相对最近有滚动条的移动（body 有）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;Fira Code&quot;</span>, <span class="string">&quot;宋体&quot;</span>;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2000px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.first</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">    <span class="attribute">position</span>: sticky;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span> header <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;first&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>A1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>A2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>A3<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>A4<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>A5<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>A6<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    </span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;first&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>B1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>B2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>B3<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>B4<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>B5<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>B6<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    </span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;first&quot;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>C1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>C2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>C3<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>C4<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>C5<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>C6<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;first&quot;</span>&gt;</span>E<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>E1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>E2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>E3<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>E4<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>E5<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>E6<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    </span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;first&quot;</span>&gt;</span>F<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>F1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>F2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>F3<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>F4<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>F5<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>F6<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有定位才有</p><p><code>z-index</code> 层级。</p><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><h2 id="竖直中线"><a href="#竖直中线" class="headerlink" title="竖直中线"></a>竖直中线</h2><p><strong><code>justify-content</code></strong> 属性定义浏览器如何沿着弹性容器的<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Main_Axis">主轴</a>和网格容器的行向轴分配内容元素之间和周围的空间。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">justify-content</span>: center; <span class="comment">/* 居中排列 */</span></span><br><span class="line"><span class="attribute">justify-content</span>: space-between; <span class="comment">/* 均匀排列每个元素</span></span><br><span class="line"><span class="comment">                                   首个元素放置于起点，末尾元素放置于终点 */</span></span><br><span class="line"><span class="attribute">justify-content</span>: start; <span class="comment">/* Pack items from the start */</span></span><br><span class="line"><span class="attribute">justify-content</span>: end; <span class="comment">/* Pack items from the end */</span></span><br></pre></td></tr></table></figure><p><strong><code>justify-items</code></strong> 属性为所有<strong>盒</strong>中的项目定义了默认的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/justify-self"><code>justify-self</code></a> ，可以使这些项目以默认方式沿适当轴线对齐到每个盒子。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">justify-items: center; <span class="comment">/* Pack items around the center */</span></span><br><span class="line">justify-items: start; <span class="comment">/* Pack items from the start */</span></span><br><span class="line">justify-items: end; <span class="comment">/* Pack items from the end */</span></span><br></pre></td></tr></table></figure><h2 id="水平中线"><a href="#水平中线" class="headerlink" title="水平中线"></a>水平中线</h2><p><strong><code>align-content</code></strong> 属性设置了浏览器如何沿着<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_flexible_box_layout">弹性盒子布局</a>的纵轴和<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_grid_layout">网格布局</a>的主轴在内容项之间和周围分配空间。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">align-content</span>: center;</span><br><span class="line"><span class="attribute">align-content</span>: space-around;</span><br></pre></td></tr></table></figure><p><strong><code>align-items</code></strong> 属性设置了所有直接子元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/align-self"><code>align-self</code></a> 值作为一个组。在 Flexbox 中，它控制子元素在<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Cross_Axis">交叉轴</a>上的对齐。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">align-items</span>: center;</span><br></pre></td></tr></table></figure><h2 id="取消默认的-html-样式"><a href="#取消默认的-html-样式" class="headerlink" title="取消默认的 html 样式"></a>取消默认的 html 样式</h2><h3 id="全局选择器"><a href="#全局选择器" class="headerlink" title="全局选择器"></a>全局选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="reset-css"><a href="#reset-css" class="headerlink" title="reset.css"></a>reset.css</h3><p>引入自定义风格。</p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
          <category> Languages </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Poly</title>
      <link href="/2024/10/09/ACM/Template/poly/"/>
      <url>/2024/10/09/ACM/Template/poly/</url>
      
        <content type="html"><![CDATA[<h1 id="Poly"><a href="#Poly" class="headerlink" title="Poly"></a>Poly</h1><h2 id="polynomial"><a href="#polynomial" class="headerlink" title="polynomial"></a>polynomial</h2><h3 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h3><h4 id="Degree"><a href="#Degree" class="headerlink" title="Degree"></a>Degree</h4><p>对于一个多项式 $f(x)$，称其最高次项的次数为该多项式的 <strong>度（degree）</strong>，也称次数，记作 $\operatorname{deg}{f}$。</p><h4 id="Composite"><a href="#Composite" class="headerlink" title="Composite"></a>Composite</h4><p>定义 $R[[x]]$ 中元素 $f$ 的乘方为</p><p>$$<br>f^1&#x3D;f,f^k&#x3D;f^{k-1}\times f<br>$$</p><p>在此基础上，定义 $R[[x]]$ 中元素 $f,g$ 的复合为</p><p>$$<br>(f\circ g)(x)&#x3D;f(g(x))&#x3D;f_0+\sum_{k&#x3D;1}^{+\infty}f_kg^k(x)<br>$$</p><h4 id="Derivative"><a href="#Derivative" class="headerlink" title="Derivative"></a>Derivative</h4><p>尽管一般环甚至未必存在极限，<br>我们依然可以定义形式幂级数的 <strong>形式导数</strong>（formal derivative）为<br>$$<br>\left(\sum_{k&#x3D;0}^{+\infty}f_kx^k\right)’&#x3D;\sum_{k&#x3D;1}^{+\infty}kf_kx^{k-1}<br>$$</p><h4 id="Inverse"><a href="#Inverse" class="headerlink" title="Inverse"></a>Inverse</h4><p>对于形式幂级数 $f$，若 $f_0\not&#x3D;0$，其 <strong>乘法逆元</strong>（multiplicative inversion）$f^{-1}$ 为另一形式幂级数，满足</p><p>$$<br>f\times f^{-1}&#x3D;f^{-1}\times f&#x3D;1<br>$$</p><p>用形式幂级数乘法定义展开该式，可得 $f^{-1}$ 系数的递推式</p><p>$$<br>f^{-1}_0&#x3D;\dfrac{1}{f_0},f^{-1}<em>n&#x3D;\dfrac{-1}{f_0}\sum</em>{k&#x3D;0}^{n-1}f^{-1}<em>kf</em>{n-k}<br>$$</p><h4 id="Quotient-Remainder"><a href="#Quotient-Remainder" class="headerlink" title="Quotient &amp; Remainder"></a>Quotient &amp; Remainder</h4><p>对于多项式 $f(x), g(x)$，存在 <strong>唯一</strong> 的 $Q(x), R(x)$ 满足：</p><p>$$<br>\begin{aligned}<br>    f(x) &amp;&#x3D; Q(x) g(x) + R(x) \<br>    \operatorname{deg}{R} &amp;&lt; \operatorname{deg}{g}<br>\end{aligned}<br>$$</p><p>当 $\operatorname{deg}{f} \ge \operatorname{deg}{g}$ 时有 $\operatorname{deg}{Q} &#x3D; \operatorname{deg}{f} - \operatorname{deg}{g}$，否则有 $Q(x) &#x3D; 0$。我们称 $Q(x)$ 为 $g(x)$ 除 $f(x)$ 的 <strong>商（quotient）</strong>，$R(x)$ 为 $g(x)$ 除 $f(x)$ 的 <strong>余数（remainder）</strong>。</p><h4 id="Modulo"><a href="#Modulo" class="headerlink" title="Modulo"></a>Modulo</h4><p>模多项式是多项式环的子环，由多项式环除以同余的等价关系得到。</p><p>在上文提到的带余除法中，多项式 $f(x)$ 与它的余式 $R(x)$ 在模多项式 $g(x)$ 的意义下同余。</p><p>$$<br>f(x) \equiv R(x) \pmod{g(x)}<br>$$</p><p>这个同余式也意味着，对于多项式 $g(x)$ 的任意一个根 $x_0$，代入 $f(x)$ 和 $R(x)$ 中，得到的点值相同。即：</p><p>$$<br>f(x_0)&#x3D;R(x_0)<br>$$</p><p>并且，如果根 $x_0$ 在多项式 $g(x)$ 中的重数是 $k$，即 $(x-x_0)^k$ 整除 $g(x)$，则对任意大于等于 $0$ 小于 $k$ 的整数 $t$，有：</p><p>$$<br>f^{t}(x_0)&#x3D;R^{t}(x_0)<br>$$</p><p>这里的记号表示 $t$ 阶导数。</p><p>模多项式同余可以应用于幂级数。一个无限项的幂级数，可以在模具体的多项式情形下，和一个有限项的多项式同余。例如：</p><p>$$<br>1+x+x^2+x^3+\ldots \equiv 1+x+\ldots+x^{n-1} \pmod{x^n}<br>$$</p><p>显然剩余的所有项都被 $x^n$ 整除，因此模 $x^n$ 的操作等价于「截断」，将无穷项的幂级数截断到前 $n$ 项，直接将更高位的信息丢失。</p><h3 id="Fast-Fourier-Transform-FFT"><a href="#Fast-Fourier-Transform-FFT" class="headerlink" title="Fast Fourier Transform (FFT)"></a>Fast Fourier Transform (FFT)</h3> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// n -&gt; 2^p</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dft</span><span class="params">(vector&lt;complex&lt;T&gt;&gt;&amp; a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constexpr</span> T Pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line">    <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">rev</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            rev[i] |= n &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; rev[i]) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(a[i], a[rev[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="function">complex&lt;T&gt; <span class="title">wn</span><span class="params">(cos(Pi / i), sin(Pi / i))</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j += i * <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="function">complex&lt;T&gt; <span class="title">w</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; i; k++) &#123;</span><br><span class="line">                complex&lt;T&gt; u = a[k + j];</span><br><span class="line">                complex&lt;T&gt; v = a[k + j + i] * w;</span><br><span class="line">                a[k + j] = u + v;</span><br><span class="line">                a[k + j + i] = u - v;</span><br><span class="line">                w *= wn;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// n -&gt; 2^p</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">idft</span><span class="params">(vector&lt;complex&lt;T&gt;&gt;&amp; a)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">    <span class="built_in">reverse</span>(a.<span class="built_in">begin</span>() + <span class="number">1</span>, a.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">dft</span>(a);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x : a) &#123;</span><br><span class="line">        x /= n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求多项式乘法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">double</span>&gt; <span class="title">mul</span><span class="params">(vector&lt;<span class="type">double</span>&gt; a, vector&lt;<span class="type">double</span>&gt; b)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">1</span>, tot = a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &lt; tot) &#123;</span><br><span class="line">        n *= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;complex&lt;<span class="type">double</span>&gt;&gt; <span class="built_in">A</span>(n), <span class="built_in">B</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        A[i] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; b.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        B[i] = b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dft</span>(A);</span><br><span class="line">    <span class="built_in">dft</span>(B);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        A[i] *= B[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">idft</span>(A);</span><br><span class="line">    <span class="function">vector&lt;<span class="type">double</span>&gt; <span class="title">ans</span><span class="params">(tot)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; tot; i++) &#123;</span><br><span class="line">        ans[i] = A[i].<span class="built_in">real</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Fast-number-theoretic-transform-FNTT"><a href="#Fast-number-theoretic-transform-FNTT" class="headerlink" title="Fast number-theoretic transform (FNTT)"></a>Fast number-theoretic transform (FNTT)</h3><p>常见质数及原根<br>$$<br>p &#x3D; 167772161 &#x3D; 5 \times 2^{25}+1, g&#x3D;3<br>$$</p><p>$$<br>p &#x3D; 469762049 &#x3D; 7 \times 2^{26}+1, g&#x3D;3<br>$$</p><p>$$<br>p &#x3D; 754974721 &#x3D; 3^2 \times 5 \times 2^{24}+1, g&#x3D;11<br>$$</p><p>$$<br>p &#x3D; 998244353 &#x3D; 7 \times 17 \times 2^{23}+1, g&#x3D;3<br>$$</p><p>$$<br>p &#x3D; 1004535809 &#x3D; 479 \times 2^{21}+1, g&#x3D;3<br>$$</p><p>模数是质数的情况：化成 $p * 2^n + 1$ 的形式（$p$ 为质数）找到原根 $g$， $2^n$ 表示计算的最长长度</p><p>前置 $MInt$ </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> T <span class="title">power</span><span class="params">(T a, <span class="type">long</span> <span class="type">long</span> b)</span> </span>&#123;</span><br><span class="line">    T res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; b; a *= a, b &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            res *= a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MInt</span> &#123;</span><br><span class="line"><span class="type">unsigned</span> x;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="title">MInt</span><span class="params">()</span> : x(<span class="number">0</span>) &#123;</span>&#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">MInt</span><span class="params">(<span class="type">long</span> <span class="type">long</span> sig)</span> : x(norm(sig % P)) &#123;</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">int</span> <span class="title">val</span><span class="params">()</span> <span class="type">const</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> x; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// -P &lt;= v &lt; 2P</span></span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">long</span> <span class="type">long</span> <span class="title">norm</span><span class="params">(<span class="type">long</span> <span class="type">long</span> v)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (v &lt; <span class="number">0</span>) v += P;</span><br><span class="line">        <span class="keyword">if</span> (v &gt;= P) v -= P;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> MInt <span class="title">inv</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">power</span>(*<span class="keyword">this</span>, P - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">constexpr</span> MInt&amp; <span class="keyword">operator</span>+=(MInt that) &#123; </span><br><span class="line">        x = <span class="built_in">norm</span>(x + that.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>; </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">constexpr</span> MInt&amp; <span class="keyword">operator</span>-=(MInt that) &#123;</span><br><span class="line">        x = <span class="built_in">norm</span>(x + P - that.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>; </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">constexpr</span> MInt&amp; <span class="keyword">operator</span>*=(MInt that) &#123;</span><br><span class="line">        x = (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)x * that.x % P; </span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>; </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">constexpr</span> MInt&amp; <span class="keyword">operator</span>/=(MInt that) &#123; </span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) *= that.<span class="built_in">inv</span>(); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> MInt <span class="keyword">operator</span>+(MInt a, MInt b) &#123; <span class="keyword">return</span> a += b; &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> MInt <span class="keyword">operator</span>-(MInt a, MInt b) &#123; <span class="keyword">return</span> a -= b; &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> MInt <span class="keyword">operator</span>*(MInt a, MInt b) &#123; <span class="keyword">return</span> a *= b; &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> MInt <span class="keyword">operator</span>/(MInt a, MInt b) &#123; <span class="keyword">return</span> a /= b; &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> MInt <span class="keyword">operator</span>-(MInt a) &#123; <span class="keyword">return</span> <span class="built_in">MInt</span>() -= a; &#125; <span class="comment">// 负号</span></span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(MInt a, MInt b) &#123; <span class="keyword">return</span> a.x &lt; b.x; &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;=(MInt a, MInt b) &#123; <span class="keyword">return</span> a.x &lt;= b.x; &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>==(MInt a, MInt b) &#123; <span class="keyword">return</span> a.x == b.x; &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(MInt a, MInt b) &#123; <span class="keyword">return</span> a.x != b.x; &#125;</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, MInt a) &#123; </span><br><span class="line">        os &lt;&lt; a.x; </span><br><span class="line">        <span class="keyword">return</span> os; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; is, MInt&amp; a) &#123; </span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> x; </span><br><span class="line">        is &gt;&gt; x;</span><br><span class="line">        a = <span class="built_in">MInt</span>(x); </span><br><span class="line">        <span class="keyword">return</span> is; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>$FNTT$ </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// P 质数</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> MInt&lt;P&gt; <span class="title">findPrimitiveRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> x = P - <span class="number">1</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; factors;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> i = <span class="number">2</span>; i * i &lt;= x; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>) &#123;</span><br><span class="line">            factors.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="keyword">while</span> (x % i == <span class="number">0</span>) &#123;</span><br><span class="line">                x /= i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        factors.<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; P; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">power</span>(<span class="built_in">MInt</span>&lt;P&gt;(i), P - <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; f : factors) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">power</span>(<span class="built_in">MInt</span>&lt;P&gt;(i), (P - <span class="number">1</span>) / f) == <span class="number">1</span>) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">assert</span>(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span><br><span class="line"><span class="keyword">constexpr</span> MInt&lt;P&gt; primitiveRoot = <span class="built_in">findPrimitiveRoot</span>&lt;P&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dft</span><span class="params">(vector&lt;MInt&lt;P&gt;&gt;&amp; a)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">rev</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            rev[i] |= n &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; rev[i]) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(a[i], a[rev[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        MInt&lt;P&gt; wn = <span class="built_in">power</span>(primitiveRoot&lt;P&gt;, (P - <span class="number">1</span>) / (i * <span class="number">2</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j += i * <span class="number">2</span>) &#123;</span><br><span class="line">            MInt&lt;P&gt; w = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; i; k++) &#123;</span><br><span class="line">                MInt&lt;P&gt; u = a[k + j];</span><br><span class="line">                MInt&lt;P&gt; v = a[k + j + i] * w;</span><br><span class="line">                a[k + j] = u + v;</span><br><span class="line">                a[k + j + i] = u - v;</span><br><span class="line">                w *= wn;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">idft</span><span class="params">(vector&lt;MInt&lt;P&gt;&gt;&amp; a)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">    <span class="built_in">reverse</span>(a.<span class="built_in">begin</span>() + <span class="number">1</span>, a.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">dft</span>(a);</span><br><span class="line">    MInt&lt;P&gt; inv = <span class="built_in">MInt</span>&lt;P&gt;(n).<span class="built_in">inv</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        a[i] *= inv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Fast-Walsh-Transform-FWT"><a href="#Fast-Walsh-Transform-FWT" class="headerlink" title="Fast Walsh Transform (FWT)"></a>Fast Walsh Transform (FWT)</h3><p>FWT 和 FFT 的核心思想应该是相同的，都是对数组的变换。我们记对数组 $A$ 进行快速沃尔什变换后得到的结果为 $FWT[A]$。</p><p>那么 FWT 核心思想就是：</p><p>我们需要一个新序列 $C$，由序列 $A$ 和序列 $B$ 经过某运算规则得到，即 $C &#x3D; A \cdot B$；</p><p>我们先正向得到序列 $FWT[A], FWT[B]$，再根据 $FWT[C]&#x3D;FWT[A] \cdot FWT[B]$ 在 $O(n)$ 的时间复杂度内求出 $FWT[C]$，其中 $\cdot$ 是序列对应位置相乘；</p><p>然后逆向运算得到原序列 $C$。时间复杂度为 $O(n \log{n})$。</p><p>在算法竞赛中，FWT 是用于解决对下标进行位运算卷积问题的方法。</p><p>公式：$C_{i} &#x3D; \sum_{i&#x3D;j \oplus k}A_{j} B_{k}$</p><p>（其中 $\oplus$ 是二元位运算中的某一种）</p><h4 id="or"><a href="#or" class="headerlink" title="or"></a>or</h4><p>$$<br>C_{i} &#x3D; \sum\limits_{i &#x3D; j | k} A_{j} B_{k}<br>$$</p><p>我们按照定义，显然可以构造 $FWT[A]<em>i &#x3D; A’<em>i &#x3D; \sum</em>{i&#x3D;i\cup j}A</em>{j}$，来表示 $j$ 满足二进制中 $1$ 为 $i$ 的子集。</p><p>那么有：</p><p>$$<br>\begin{aligned}<br>FWT[A]<em>i\cdot FWT[B]<em>i&amp;&#x3D;\left(\sum</em>{i\cup j&#x3D;i} A_j\right)\left(\sum</em>{i\cup k&#x3D;i} B_k\right) \<br>&amp;&#x3D;\sum_{i\cup j&#x3D;i}\sum_{i\cup k&#x3D;i}A_jB_k \<br>&amp;&#x3D;\sum_{i\cup(j\cup k)&#x3D;i}A_jB_k \<br>&amp;&#x3D; FWT[C]_i<br>\end{aligned}<br>$$<br>我们令 $A_0$ 表示 $A$ 的前一半，$A_1$ 表示区间的后一半，那么 $A_0$ 就是 A 下标最大值的最高位为 $0$，他的子集就是他本身的子集（因为最高位为 $0$ 了），但是 $A_1$ 的最高位是 $1$，他满足条件的子集不仅仅是他本身，还包最高位为 $0$ 的子集，即</p><p>$$<br>FWT[A] &#x3D; merge(FWT[A_0], FWT[A_0] + FWT[A_1])<br>$$</p><p>其中 merge 表示像字符串拼接一样把两个数组拼起来，$+$ 就是普通加法，表示对应二进制位相加。</p><p>接下来就是反演了，其实反演是很简单的，既然知道了 $A_0$ 的本身的子集是他自己（$A_0 &#x3D; FWT[A_0]$），$A_1$ 的子集是 $FWT[A_0] + FWT[A_1]$，那就很简单的得出反演的递推式了：</p><p>$$<br>UFWT[A’] &#x3D; merge(UFWT[A_0’], UFWT[A_1’] - UFWT[A_0’])<br>$$<br>$dft$ 系数 $1$，$idft$ 系数 $-1$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">or_dft</span><span class="params">(vector&lt;MInt&lt;P&gt;&gt;&amp; a)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j += i * <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; i; k++) &#123;</span><br><span class="line">                a[i + j + k] += a[j + k]; <span class="comment">// * 1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">or_idft</span><span class="params">(vector&lt;MInt&lt;P&gt;&gt;&amp; a)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j += i * <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; i; k++) &#123;</span><br><span class="line">                a[i + j + k] -= a[j + k]; <span class="comment">// * -1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span><br><span class="line">vector&lt;MInt&lt;P&gt;&gt; <span class="built_in">or_fwt</span>(vector&lt;MInt&lt;P&gt;&gt; a, vector&lt;MInt&lt;P&gt;&gt; b) &#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">1</span>, tot = <span class="built_in">max</span>(a.<span class="built_in">size</span>(), b.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">while</span> (n &lt; tot) &#123;</span><br><span class="line">        n *= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    a.<span class="built_in">resize</span>(n);</span><br><span class="line">    b.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="built_in">or_dft</span>(a);</span><br><span class="line">    <span class="built_in">or_dft</span>(b);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        a[i] *= b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">or_idft</span>(a);</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="and"><a href="#and" class="headerlink" title="and"></a>and</h4><p>$$<br>C_{i} &#x3D; \sum\limits_{i &#x3D; j &amp; k} A_{j} B_{k}<br>$$</p><p>$$<br>FWT[A] &#x3D; merge(FWT[A_0] + FWT[A_1], FWT[A_1])<br>$$</p><p>$$<br>UFWT[A’] &#x3D; merge(UFWT[A_0’] - UFWT[A_1’], UFWT[A_1’])<br>$$</p><p>$dft$ 系数 $1$，$idft$ 系数 $-1$，但是前后 $merge$ 交换了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">and_dft</span><span class="params">(vector&lt;MInt&lt;P&gt;&gt;&amp; a)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j += i * <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; i; k++) &#123;</span><br><span class="line">                a[j + k] += a[i + j + k]; <span class="comment">// 与 or 相反</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">and_idft</span><span class="params">(vector&lt;MInt&lt;P&gt;&gt;&amp; a)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j += i * <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; i; k++) &#123;</span><br><span class="line">                a[j + k] -= a[i + j + k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span><br><span class="line">vector&lt;MInt&lt;P&gt;&gt; <span class="built_in">and_fwt</span>(vector&lt;MInt&lt;P&gt;&gt; a, vector&lt;MInt&lt;P&gt;&gt; b) &#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">1</span>, tot = <span class="built_in">max</span>(a.<span class="built_in">size</span>(), b.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">while</span> (n &lt; tot) &#123;</span><br><span class="line">        n *= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    a.<span class="built_in">resize</span>(n);</span><br><span class="line">    b.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="built_in">and_dft</span>(a);</span><br><span class="line">    <span class="built_in">and_dft</span>(b);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        a[i] *= b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">and_idft</span>(a);</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h4><p>$$<br>C_{i} &#x3D; \sum\limits_{i &#x3D; j \oplus k} A_{j} B_{k}<br>$$</p><p>$$<br>FWT[A] &#x3D; merge(FWT[A_0] + FWT[A_1], FWT[A_0] - FWT[A_1])<br>$$</p><p>逆变换易得：</p><p>$$<br>UFWT[A’] &#x3D; merge(\frac{UFWT[A_0’] + UFWT[A_1’]}{2}, \frac{UFWT[A_0’] - UFWT[A_1’]}{2})<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xor_dft</span><span class="params">(vector&lt;MInt&lt;P&gt;&gt;&amp; a)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j += i * <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; i; k++) &#123;</span><br><span class="line">                <span class="keyword">auto</span> u = a[j + k];</span><br><span class="line">                <span class="keyword">auto</span> v = a[i + j + k];</span><br><span class="line">                a[j + k] = u + v; <span class="comment">// 1</span></span><br><span class="line">                a[i + j + k] = u - v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xor_idft</span><span class="params">(vector&lt;MInt&lt;P&gt;&gt;&amp; a)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">auto</span> inv = <span class="built_in">MInt</span>&lt;P&gt;(<span class="number">2</span>).<span class="built_in">inv</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j += i * <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; i; k++) &#123;</span><br><span class="line">                <span class="keyword">auto</span> u = a[j + k];</span><br><span class="line">                <span class="keyword">auto</span> v = a[i + j + k];</span><br><span class="line">                a[j + k] = (u + v) * inv; <span class="comment">// 1/2</span></span><br><span class="line">                a[i + j + k] = (u - v) * inv;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span><br><span class="line">vector&lt;MInt&lt;P&gt;&gt; <span class="built_in">xor_fwt</span>(vector&lt;MInt&lt;P&gt;&gt; a, vector&lt;MInt&lt;P&gt;&gt; b) &#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">1</span>, tot = <span class="built_in">max</span>(a.<span class="built_in">size</span>(), b.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">while</span> (n &lt; tot) &#123;</span><br><span class="line">        n *= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    a.<span class="built_in">resize</span>(n);</span><br><span class="line">    b.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="built_in">xor_dft</span>(a);</span><br><span class="line">    <span class="built_in">xor_dft</span>(b);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        a[i] *= b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">xor_idft</span>(a);</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$dft$ 系数 $1$，$idft$ 系数 $\frac{1}{2}$</p><h4 id="xnor"><a href="#xnor" class="headerlink" title="xnor"></a>xnor</h4><p>$$<br>C_{i} &#x3D; \sum\limits_{i &#x3D; j \otimes k} A_{j} B_{k}<br>$$</p><p>$$<br>FWT[A] &#x3D; merge(FWT[A_1] - FWT[A_0], FWT[A_1] + FWT[A_0])<br>$$</p><p>$$<br>UFWT[A’] &#x3D; merge(\frac{UFWT[A_1’] - UFWT[A_0’]}{2}, \frac{UFWT[A_1’] + UFWT[A_0’]}{2})<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xnor_dft</span><span class="params">(vector&lt;MInt&lt;P&gt;&gt;&amp; a)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j += i * <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; i; k++) &#123;</span><br><span class="line">                <span class="keyword">auto</span> v = a[j + k]; <span class="comment">// 与 xor 相反</span></span><br><span class="line">                <span class="keyword">auto</span> u = a[i + j + k];</span><br><span class="line">                a[j + k] = u + v; <span class="comment">// 1</span></span><br><span class="line">                a[i + j + k] = u - v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xnor_idft</span><span class="params">(vector&lt;MInt&lt;P&gt;&gt;&amp; a)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">auto</span> inv = <span class="built_in">MInt</span>&lt;P&gt;(<span class="number">2</span>).<span class="built_in">inv</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j += i * <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; i; k++) &#123;</span><br><span class="line">                <span class="keyword">auto</span> v = a[j + k];</span><br><span class="line">                <span class="keyword">auto</span> u = a[i + j + k];</span><br><span class="line">                a[j + k] = (u + v) * inv; <span class="comment">// 1/2</span></span><br><span class="line">                a[i + j + k] = (u - v) * inv;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span><br><span class="line">vector&lt;MInt&lt;P&gt;&gt; <span class="built_in">xnor_fwt</span>(vector&lt;MInt&lt;P&gt;&gt; a, vector&lt;MInt&lt;P&gt;&gt; b) &#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">1</span>, tot = <span class="built_in">max</span>(a.<span class="built_in">size</span>(), b.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">while</span> (n &lt; tot) &#123;</span><br><span class="line">        n *= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    a.<span class="built_in">resize</span>(n);</span><br><span class="line">    b.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="built_in">xnor_dft</span>(a);</span><br><span class="line">    <span class="built_in">xnor_dft</span>(b);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        a[i] *= b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">xnor_idft</span>(a);</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$dft$ 系数 $1$，$idft$ 系数 $\frac{1}{2}$</p><h4 id="子集卷积"><a href="#子集卷积" class="headerlink" title="子集卷积"></a>子集卷积</h4><p>$$<br>c_{k} &#x3D; \sum\ a_{i} b_{j} \quad if \quad i &amp; j&#x3D;0 \quad  i \mid j&#x3D;k<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); i++) &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    cin &gt;&gt; x;</span><br><span class="line">    a[<span class="built_in">bitCount</span>(i)][i] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); i++) &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    cin &gt;&gt; x;</span><br><span class="line">    b[<span class="built_in">bitCount</span>(i)][i] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="built_in">xor_dft</span>(a[i]);</span><br><span class="line">    <span class="built_in">xor_dft</span>(b[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; (<span class="number">1</span> &lt;&lt; n); j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt;= i; k++) &#123;</span><br><span class="line">            c[i][j] += a[k][j] * b[i - k][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="built_in">xor_idft</span>(c[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); i++) &#123;</span><br><span class="line">    cout &lt;&lt; c[<span class="built_in">bitCount</span>(i)][i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$O(n^2 \times 2^{n})$</p><h3 id="Elementary-function"><a href="#Elementary-function" class="headerlink" title="Elementary-function"></a>Elementary-function</h3><h4 id="Derivative-1"><a href="#Derivative-1" class="headerlink" title="Derivative"></a>Derivative</h4><p>$$<br>\left(\sum_{k&#x3D;0}^{+\infty}f_kx^k\right)’&#x3D;\sum_{k&#x3D;1}^{+\infty}kf_kx^{k-1}<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constexpr</span> Poly <span class="title">deriv</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">res</span><span class="params">(<span class="keyword">this</span>-&gt;size() - <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;<span class="built_in">size</span>() - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        res[i] = (i + <span class="number">1</span>) * (*<span class="keyword">this</span>)[i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Integral"><a href="#Integral" class="headerlink" title="Integral"></a>Integral</h4><p>$$<br>\int_{k &#x3D; 0}^{+\infty} f_kx^k&#x3D;\sum_{k&#x3D;1}^{+\infty}  \frac{f_kx^{k}}{k + 1} + C<br>$$</p><p>$C$ 这里取了 $0$ </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constexpr</span> Poly <span class="title">integr</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="function">Poly <span class="title">res</span><span class="params">(<span class="keyword">this</span>-&gt;size() + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        res[i + <span class="number">1</span>] = (*<span class="keyword">this</span>)[i] / (i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Inverse-1"><a href="#Inverse-1" class="headerlink" title="Inverse"></a>Inverse</h4><p>$$<br>f(x) \ast f^{-1}(x) \equiv 1 \pmod{x^{n}}<br>$$</p><p>求 $f^{-1}(x)$ </p><p>假设有 $f_{0}^{-1}(x)$ 满足：<br>$$<br>f(x) \ast f_{0}^{-1}(x) \equiv 1 \pmod{x^{\lceil \frac{n}{2} \rceil}}<br>$$<br>再把原式变形一下：<br>$$<br>f(x) \ast f^{-1}(x) \equiv 1 \pmod{x^{\lceil \frac{n}{2} \rceil}}<br>$$<br>可得：<br>$$<br>f(x) \ast (f_{0}^{-1}(x) - f^{-1}(x)) \equiv 1 \pmod{x^{\lceil \frac{n}{2} \rceil}}<br>$$<br>由于逆元存在（$f(x) \neq 0$）：<br>$$<br>f_{0}^{-1}(x) - f^{-1}(x) \equiv 0 \pmod{x^{\lceil \frac{n}{2} \rceil}}<br>$$<br>两边平方可得：<br>$$<br>f^{-2}\left(x\right)-2f^{-1}\left(x\right)f^{-1}<em>{0}\left(x\right)+f^{-2}</em>{0}\left(x\right)\equiv 0 \pmod{x^{n}}<br>$$<br>两边同乘 $f\left(x\right)$ 并移项可得：</p><p>$$<br>f^{-1}\left(x\right)\equiv f^{-1}<em>{0}\left(x\right)\left(2-f\left(x\right)f^{-1}</em>{0}\left(x\right)\right) \pmod{x^{n}}<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取前 k 个系数</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> Poly <span class="title">trunc</span><span class="params">(<span class="type">int</span> k)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    Poly f = *<span class="keyword">this</span>;</span><br><span class="line">    f.<span class="built_in">resize</span>(k);</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> Poly <span class="title">inv</span><span class="params">(<span class="type">int</span> m)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    Poly x&#123;(*<span class="keyword">this</span>)[<span class="number">0</span>].<span class="built_in">inv</span>()&#125;;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; m) &#123;</span><br><span class="line">        k *= <span class="number">2</span>;</span><br><span class="line">        x = (x * (Poly&#123;<span class="number">2</span>&#125; - <span class="built_in">trunc</span>(k) * x)).<span class="built_in">trunc</span>(k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x.<span class="built_in">trunc</span>(m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="div"><a href="#div" class="headerlink" title="div"></a>div</h4><p>发现若能消除 $R\left(x\right)$ 的影响则可直接多项式求逆解决。</p><p>考虑构造变换</p><p>$$<br>f^{R}\left(x\right)&#x3D;x^{\operatorname{deg}{f}}f\left(\frac{1}{x}\right)<br>$$</p><p>观察可知其实质为反转 $f\left(x\right)$ 的系数。</p><p>设 $n&#x3D;\operatorname{deg}{f},m&#x3D;\operatorname{deg}{g}$。</p><p>将 $f\left(x\right)&#x3D;Q\left(x\right)g\left(x\right)+R\left(x\right)$ 中的 $x$ 替换成 $\frac{1}{x}$ 并将其两边都乘上 $x^{n}$，得到：</p><p>$$<br>\begin{aligned}<br>    x^{n}f\left(\frac{1}{x}\right)&amp;&#x3D;x^{n-m}Q\left(\frac{1}{x}\right)x^{m}g\left(\frac{1}{x}\right)+x^{n-m+1}x^{m-1}R\left(\frac{1}{x}\right)\<br>    f^{R}\left(x\right)&amp;&#x3D;Q^{R}\left(x\right)g^{R}\left(x\right)+x^{n-m+1}R^{R}\left(x\right)<br>\end{aligned}<br>$$</p><p>注意到上式中 $R^{R}\left(x\right)$ 的系数为 $x^{n-m+1}$，则将其放到模 $x^{n-m+1}$ 意义下即可消除 $R^{R}\left(x\right)$ 带来的影响。</p><p>又因 $Q^{R}\left(x\right)$ 的次数为 $\left(n-m\right)&lt;\left(n-m+1\right)$，故 $Q^{R}\left(x\right)$ 不会受到影响。</p><p>则：</p><p>$$<br>f^{R}\left(x\right)\equiv Q^{R}\left(x\right)g^{R}\left(x\right)\pmod{x^{n-m+1}}<br>$$</p><p>使用多项式求逆即可求出 $Q\left(x\right)$，将其反代即可得到 $R\left(x\right)$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="keyword">friend</span> Poly <span class="keyword">operator</span>/(Poly a, Poly b) &#123;</span><br><span class="line">    <span class="keyword">if</span> (b.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="built_in">assert</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a.<span class="built_in">size</span>() &lt; b.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">reverse</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">int</span> k = a.<span class="built_in">size</span>() - b.<span class="built_in">size</span>() + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">auto</span> c = a.<span class="built_in">trunc</span>(k) * b.<span class="built_in">inv</span>(k).<span class="built_in">trunc</span>(k);</span><br><span class="line">    <span class="built_in">reverse</span>(c.<span class="built_in">begin</span>(), c.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> c.<span class="built_in">shift</span>(k - (<span class="type">int</span>)c.<span class="built_in">size</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 保留 b.size() - 1 项，高位补 0 </span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">friend</span> Poly <span class="keyword">operator</span>%(Poly a, Poly b) &#123;</span><br><span class="line">    <span class="keyword">return</span> (a - a / b * b).<span class="built_in">trunc</span>(b.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ln"><a href="#ln" class="headerlink" title="$\ln$"></a>$\ln$</h4><p>给定多项式 $f(x)$，求模 $x^{n}$ 意义下的 $\ln{f(x)}$ </p><p>首先，对于多项式 $f(x)$，若 $\ln{f(x)}$ 存在，则由其定义，其必须满足：</p><p>$$<br>[x^{0}]f(x)&#x3D;1<br>$$</p><p>对 $\ln{f(x)}$ 求导再积分，可得：</p><p>$$<br>\begin{aligned}<br>    \frac{\mathrm{d} \ln{f(x)}}{\mathrm{d} x} &amp; \equiv \frac{f’(x)}{f(x)} &amp; \pmod{x^{n}} \<br>    \ln{f(x)} &amp; \equiv \int \mathrm{d} \ln{x} \equiv \int\frac{f’(x)}{f(x)} \mathrm{d} x &amp; \pmod{x^{n}}<br>\end{aligned}<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constexpr</span> Poly <span class="title">log</span><span class="params">(<span class="type">int</span> m)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">deriv</span>() * <span class="built_in">inv</span>(m)).<span class="built_in">integr</span>().<span class="built_in">trunc</span>(m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="exp"><a href="#exp" class="headerlink" title="$\exp$"></a>$\exp$</h4><p>设给定函数为 $h\left(x\right)$，有方程：</p><p>$$<br>g\left(f\left(x\right)\right)&#x3D;\ln{f\left(x\right)}-h\left(x\right)\pmod{x^{n}}<br>$$</p><p>应用 Newton’s Method 可得：</p><p>$$<br>\begin{aligned}<br>    f\left(x\right)&amp;\equiv f_{0}\left(x\right)-\frac{\ln{f_{0}\left(x\right)}-h\left(x\right)}{\frac{1}{f_{0}\left(x\right)}}&amp;\pmod{x^{n}}\<br>    &amp;\equiv f_{0}\left(x\right)\left(1-\ln{f_{0}\left(x\right)+h\left(x\right)}\right)&amp;\pmod{x^{n}}<br>\end{aligned}<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constexpr</span> Poly <span class="title">exp</span><span class="params">(<span class="type">int</span> m)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    Poly x&#123;<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; m) &#123;</span><br><span class="line">        k *= <span class="number">2</span>;</span><br><span class="line">        x = (x * (Poly&#123;<span class="number">1</span>&#125; - x.<span class="built_in">log</span>(k) + <span class="built_in">trunc</span>(k))).<span class="built_in">trunc</span>(k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x.<span class="built_in">trunc</span>(m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="pow"><a href="#pow" class="headerlink" title="$pow$"></a>$pow$</h4><p>$$<br>g(x) \equiv f^{k}(x) \pmod{ x^{n}}<br>$$</p><p>两边取 $\ln$ ：<br>$$<br>ln(g(x)) &#x3D; k \times ln(f(x)) \pmod{x^{n}}<br>$$<br>两边取 $\exp$ ：<br>$$<br>g(x) \equiv \exp{(\ln{g(x))}} \equiv \exp{(k \times \ln{f(x))}} \pmod{x^{n}}<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">k<span class="comment">// k &lt;= P - 1</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> Poly <span class="title">pow</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> m)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; <span class="keyword">this</span>-&gt;<span class="built_in">size</span>() &amp;&amp; (*<span class="keyword">this</span>)[i] == <span class="number">0</span>) &#123; <span class="comment">// 将前面的 0 去除</span></span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="keyword">this</span>-&gt;<span class="built_in">size</span>() || <span class="number">1LL</span> * i * k &gt;= m) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>(m);</span><br><span class="line">    &#125;</span><br><span class="line">    Value v = (*<span class="keyword">this</span>)[i];</span><br><span class="line">    <span class="keyword">auto</span> f = <span class="built_in">shift</span>(-i) * v.<span class="built_in">inv</span>();</span><br><span class="line">    <span class="keyword">return</span> (f.<span class="built_in">log</span>(m - i * k) * k).<span class="built_in">exp</span>(m - i * k).<span class="built_in">shift</span>(i * k) * <span class="built_in">power</span>(v, k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若输入 $k$ 较大</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constexpr</span> Poly <span class="title">pow</span><span class="params">(<span class="type">const</span> string&amp; s, <span class="type">int</span> m)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> k = <span class="number">0</span>, o = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x : s) &#123;</span><br><span class="line">        k = k * <span class="number">10</span> + x - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (k &gt;= m) &#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        k %= P;</span><br><span class="line">        o = o * <span class="number">10</span> + x - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        o %= P - <span class="number">1</span>; <span class="comment">// 欧拉函数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (flag &amp;&amp; (*<span class="keyword">this</span>)[<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>(m);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; <span class="keyword">this</span>-&gt;<span class="built_in">size</span>() &amp;&amp; (*<span class="keyword">this</span>)[i] == <span class="number">0</span>) &#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="keyword">this</span>-&gt;<span class="built_in">size</span>() || <span class="number">1LL</span> * i * k &gt;= m) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>(m);</span><br><span class="line">    &#125;</span><br><span class="line">    Value v = (*<span class="keyword">this</span>)[i];</span><br><span class="line">    <span class="keyword">auto</span> f = <span class="built_in">shift</span>(-i) * v.<span class="built_in">inv</span>();</span><br><span class="line">    <span class="keyword">return</span> (f.<span class="built_in">log</span>(m - i * k) * k).<span class="built_in">exp</span>(m - i * k).<span class="built_in">shift</span>(i * k) * <span class="built_in">power</span>(v, o); <span class="comment">// 修改为 o</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="sqrt"><a href="#sqrt" class="headerlink" title="$sqrt$"></a>$sqrt$</h4><p>给定多项式 $g\left(x\right)$，求 $f\left(x\right)$，满足：</p><p>$$<br>f^{2}\left(x\right)\equiv g\left(x\right) \pmod{x^{n}}<br>$$<br>首先讨论 $\left[x^0\right]g(x)$ 不为 $0$ 的情况。</p><p>易知：</p><p>$$<br>\left[x^0\right]f(x) &#x3D; \sqrt{\left[x^0\right]g(x)}<br>$$</p><p>若 $\left[x^0\right]g(x)$ 没有平方根，则多项式 $g(x)$ 没有平方根。</p><blockquote><p>$\left[x^0\right]g(x)$ 可能有多个平方根，选取不同的根会求出不同的 $f(x)$。</p></blockquote><p>假设现在已经求出了 $g\left(x\right)$ 在模 $x^{\left\lceil\frac{n}{2}\right\rceil}$ 意义下的平方根 $f_{0}\left(x\right)$，则有：</p><p>$$<br>\begin{aligned}<br>    f_{0}^{2}\left(x\right)&amp;\equiv g\left(x\right) &amp;\pmod{x^{\left\lceil\frac{n}{2}\right\rceil}}\<br>    f_{0}^{2}\left(x\right)-g\left(x\right)&amp;\equiv 0 &amp;\pmod{x^{\left\lceil\frac{n}{2}\right\rceil}}\<br>    \left(f_{0}^{2}\left(x\right)-g\left(x\right)\right)^{2}&amp;\equiv 0 &amp;\pmod{x^{n}}\<br>    \left(f_{0}^{2}\left(x\right)+g\left(x\right)\right)^{2}&amp;\equiv 4f_{0}^{2}\left(x\right)g\left(x\right) &amp;\pmod{x^{n}}\<br>    \left(\frac{f_{0}^{2}\left(x\right)+g\left(x\right)}{2f_{0}\left(x\right)}\right)^{2}&amp;\equiv g\left(x\right) &amp;\pmod{x^{n}}\<br>    \frac{f_{0}^{2}\left(x\right)+g\left(x\right)}{2f_{0}\left(x\right)}&amp;\equiv f\left(x\right) &amp;\pmod{x^{n}}\<br>    2^{-1}f_{0}\left(x\right)+2^{-1}f_{0}^{-1}\left(x\right)g\left(x\right)&amp;\equiv f\left(x\right) &amp;\pmod{x^{n}}<br>\end{aligned}<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constexpr</span> Poly <span class="title">sqrt</span><span class="params">(<span class="type">int</span> m)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    Poly x&#123;<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; m) &#123;</span><br><span class="line">        k *= <span class="number">2</span>;</span><br><span class="line">        x = (x + (<span class="built_in">trunc</span>(k) * x.<span class="built_in">inv</span>(k)).<span class="built_in">trunc</span>(k)) * <span class="built_in">Value</span>(<span class="number">2</span>).<span class="built_in">inv</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x.<span class="built_in">trunc</span>(m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Multipoint-eval-interpolation"><a href="#Multipoint-eval-interpolation" class="headerlink" title="Multipoint eval interpolation"></a>Multipoint eval interpolation</h3><p>给出一个多项式 $f\left(x\right)$ 和 $n$ 个点 $x_{1},x_{2},\dots,x_{n}$，求</p><p>$$<br>f\left(x_{1}\right),f\left(x_{2}\right),\dots,f\left(x_{n}\right)<br>$$<br>考虑使用分治来将问题规模减半。</p><p>将给定的点分为两部分：</p><p>$$<br>\begin{aligned}<br>    X_{0}&amp;&#x3D;\left{x_{1},x_{2},\dots,x_{\left\lfloor\frac{n}{2}\right\rfloor}\right}\<br>    X_{1}&amp;&#x3D;\left{x_{\left\lfloor\frac{n}{2}\right\rfloor+1},x_{\left\lfloor\frac{n}{2}\right\rfloor+2},\dots,x_{n}\right}<br>\end{aligned}<br>$$</p><p>构造多项式</p><p>$$<br>g_{0}\left(x\right)&#x3D;\prod_{x_{i}\in X_{0}}\left(x-x_{i}\right)<br>$$</p><p>则有 $\forall x\in X_{0}:g_{0}\left(x\right)&#x3D;0$。</p><p>考虑将 $f\left(x\right)$ 表示为 $g_{0}\left(x\right)Q\left(x\right)+f_{0}\left(x\right)$ 的形式，即：</p><p>$$<br>f_{0}\left(x\right)\equiv f\left(x\right)\pmod{g_{0}\left(x\right)}<br>$$</p><p>则有 $\forall x\in X_{0}:f\left(x\right)&#x3D;g_{0}\left(x\right)Q\left(x\right)+f_{0}\left(x\right)&#x3D;f_{0}\left(x\right)$，$X_{1}$ 同理。</p><p>至此，问题的规模被减半，可以使用分治 + 多项式取模解决。</p><p>时间复杂度</p><p>$$<br>T\left(n\right)&#x3D;2T\left(\frac{n}{2}\right)+O\left(n\log{n}\right)&#x3D;O\left(n\log^{2}{n}\right)<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constexpr</span> Poly <span class="title">mulT</span><span class="params">(Poly b)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b.<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> n = b.<span class="built_in">size</span>();</span><br><span class="line">    <span class="built_in">reverse</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> ((*<span class="keyword">this</span>) * b).<span class="built_in">shift</span>(-(n - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> vector&lt;Value&gt; <span class="title">eval</span><span class="params">(vector&lt;Value&gt; x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;Value&gt;(x.<span class="built_in">size</span>(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> n = <span class="built_in">max</span>(x.<span class="built_in">size</span>(), <span class="keyword">this</span>-&gt;<span class="built_in">size</span>());</span><br><span class="line">    <span class="function">vector&lt;Poly&gt; <span class="title">q</span><span class="params">(<span class="number">4</span> * n)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;Value&gt; <span class="title">ans</span><span class="params">(x.size())</span></span>;</span><br><span class="line">    x.<span class="built_in">resize</span>(n);</span><br><span class="line">    function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; build = </span><br><span class="line">        [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">            q[p] = Poly&#123;<span class="number">1</span>, -x[l]&#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="built_in">build</span>(<span class="number">2</span> * p, l, m);</span><br><span class="line">            <span class="built_in">build</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r);</span><br><span class="line">            q[p] = q[<span class="number">2</span> * p] * q[<span class="number">2</span> * p + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line">    function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>, <span class="type">const</span> Poly &amp;)&gt; work = </span><br><span class="line">        [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">const</span> Poly &amp;num) &#123;</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l &lt; <span class="built_in">int</span>(ans.<span class="built_in">size</span>())) &#123;</span><br><span class="line">                ans[l] = num[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">auto</span> lp = num.<span class="built_in">mulT</span>(q[<span class="number">2</span> * p + <span class="number">1</span>]);</span><br><span class="line">            lp.<span class="built_in">resize</span>(m - l);</span><br><span class="line">            <span class="built_in">work</span>(<span class="number">2</span> * p, l, m, lp);</span><br><span class="line">            <span class="keyword">auto</span> rp = num.<span class="built_in">mulT</span>(q[<span class="number">2</span> * p]);</span><br><span class="line">            rp.<span class="built_in">resize</span>(r - m);</span><br><span class="line">            <span class="built_in">work</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, rp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">work</span>(<span class="number">1</span>, <span class="number">0</span>, n, <span class="built_in">mulT</span>(q[<span class="number">1</span>].<span class="built_in">inv</span>(n)));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Newton’s-Method"><a href="#Newton’s-Method" class="headerlink" title="Newton’s Method"></a>Newton’s Method</h3><p>给定多项式 $g\left(x\right)$，已知有 $f\left(x\right)$ 满足：</p><p>$$<br>g\left(f\left(x\right)\right)\equiv 0\pmod{x^{n}}<br>$$</p><p>求出模 $x^{n}$ 意义下的 $f\left(x\right)$。</p><p>考虑倍增。</p><p>首先当 $n&#x3D;1$ 时，$\left[x^{0}\right]g\left(f\left(x\right)\right)&#x3D;0$ 的解需要单独求出。</p><p>假设现在已经得到了模 $x^{\left\lceil\frac{n}{2}\right\rceil}$ 意义下的解 $f_{0}\left(x\right)$，要求模 $x^{n}$ 意义下的解 $f\left(x\right)$。</p><p>将 $g\left(f\left(x\right)\right)$ 在 $f_{0}\left(x\right)$ 处进行泰勒展开，有：</p><p>$$<br>\sum_{i&#x3D;0}^{+\infty}\frac{g^{\left(i\right)}\left(f_{0}\left(x\right)\right)}{i!}\left(f\left(x\right)-f_{0}\left(x\right)\right)^{i}\equiv 0\pmod{x^{n}}<br>$$</p><p>因为 $f\left(x\right)-f_{0}\left(x\right)$ 的最低非零项次数最低为 $\left\lceil\frac{n}{2}\right\rceil$，故有：</p><p>$$<br>\forall 2\leqslant i:\left(f\left(x\right)-f_{0}\left(x\right)\right)^{i}\equiv 0\pmod{x^{n}}<br>$$</p><p>则：</p><p>$$<br>\sum_{i&#x3D;0}^{+\infty}\frac{g^{\left(i\right)}\left(f_{0}\left(x\right)\right)}{i!}\left(f\left(x\right)-f_{0}\left(x\right)\right)^{i}\equiv g\left(f_{0}\left(x\right)\right)+g’\left(f_{0}\left(x\right)\right)\left(f\left(x\right)-f_{0}\left(x\right)\right) \equiv 0\pmod{x^{n}}<br>$$</p><p>$$<br>f\left(x\right)\equiv f_{0}\left(x\right)-\frac{g\left(f_{0}\left(x\right)\right)}{g’\left(f_{0}\left(x\right)\right)}\pmod{x^{n}}<br>$$</p><h4 id="多项式求逆"><a href="#多项式求逆" class="headerlink" title="多项式求逆"></a>多项式求逆</h4><p>设给定函数为 $h\left(x\right)$，有方程：</p><p>$$<br>g\left(f\left(x\right)\right)&#x3D;\frac{1}{f\left(x\right)}-h\left(x\right)\equiv 0\pmod{x^{n}}<br>$$</p><p>应用 Newton’s Method 可得：</p><p>$$<br>\begin{aligned}<br>    f\left(x\right)&amp;\equiv f_{0}\left(x\right)-\frac{\frac{1}{f_{0}\left(x\right)}-h\left(x\right)}{-\frac{1}{f_{0}^{2}\left(x\right)}}&amp;\pmod{x^{n}}\<br>    &amp;\equiv 2f_{0}\left(x\right)-f_{0}^{2}\left(x\right)h\left(x\right)&amp;\pmod{x^{n}}<br>\end{aligned}<br>$$</p><p>时间复杂度</p><p>$$<br>T\left(n\right)&#x3D;T\left(\frac{n}{2}\right)+O\left(n\log{n}\right)&#x3D;O\left(n\log{n}\right)<br>$$</p><h4 id="多项式开方"><a href="#多项式开方" class="headerlink" title="多项式开方"></a>多项式开方</h4><p>设给定函数为 $h\left(x\right)$，有方程：</p><p>$$<br>g\left(f\left(x\right)\right)&#x3D;f^{2}\left(x\right)-h\left(x\right)\equiv 0\pmod{x^{n}}<br>$$</p><p>应用 Newton’s Method 可得：</p><p>$$<br>\begin{aligned}<br>    f\left(x\right)&amp;\equiv f_{0}\left(x\right)-\frac{f_{0}^{2}\left(x\right)-h\left(x\right)}{2f_{0}\left(x\right)}&amp;\pmod{x^{n}}\<br>    &amp;\equiv\frac{f_{0}^{2}\left(x\right)+h\left(x\right)}{2f_{0}\left(x\right)}&amp;\pmod{x^{n}}<br>\end{aligned}<br>$$</p><p>时间复杂度</p><p>$$<br>T\left(n\right)&#x3D;T\left(\frac{n}{2}\right)+O\left(n\log{n}\right)&#x3D;O\left(n\log{n}\right)<br>$$</p><h4 id="多项式-exp"><a href="#多项式-exp" class="headerlink" title="多项式 exp"></a>多项式 exp</h4><p>设给定函数为 $h\left(x\right)$，有方程：</p><p>$$<br>g\left(f\left(x\right)\right)&#x3D;\ln{f\left(x\right)}-h\left(x\right)\pmod{x^{n}}<br>$$</p><p>应用 Newton’s Method 可得：</p><p>$$<br>\begin{aligned}<br>    f\left(x\right)&amp;\equiv f_{0}\left(x\right)-\frac{\ln{f_{0}\left(x\right)}-h\left(x\right)}{\frac{1}{f_{0}\left(x\right)}}&amp;\pmod{x^{n}}\<br>    &amp;\equiv f_{0}\left(x\right)\left(1-\ln{f_{0}\left(x\right)+h\left(x\right)}\right)&amp;\pmod{x^{n}}<br>\end{aligned}<br>$$</p><p>时间复杂度</p><p>$$<br>T\left(n\right)&#x3D;T\left(\frac{n}{2}\right)+O\left(n\log{n}\right)&#x3D;O\left(n\log{n}\right)<br>$$</p><h3 id="多项式平移"><a href="#多项式平移" class="headerlink" title="多项式平移"></a>多项式平移</h3><p>多项式平移是简单情况的多项式复合变换，给出 $f(x)&#x3D;\sum\limits_{i&#x3D;0}^nf_ix^i$ 的系数和一个常数 $c$，求 $f(x+c)$ 的系数，即 $f(x)\mapsto f(x+c)$。</p><h4 id="二项式定理法"><a href="#二项式定理法" class="headerlink" title="二项式定理法"></a>二项式定理法</h4><p>考虑二项式定理 $\displaystyle (a+b)^n&#x3D;\sum _ {i&#x3D;0}^n\binom{n}{i}a^ib^{n-i}$ 那么</p><p>$$<br>\begin{aligned}<br>f(x+c)&amp;&#x3D;\sum _ {i&#x3D;0}^nf_i(x+c)^i\<br>&amp;&#x3D;\sum _ {i&#x3D;0}^nf_i\left(\sum _ {j&#x3D;0}^i\binom{i}{j}x^jc^{i-j}\right)\<br>&amp;&#x3D;\sum _ {i&#x3D;0}^nf_ii!\left(\sum _ {j&#x3D;0}^i\frac{x^j}{j!}\frac{c^{i-j}}{(i-j)!}\right)\<br>&amp;&#x3D;\sum _ {i&#x3D;0}^n\frac{x^i}{i!}\left(\sum _ {j&#x3D;i}^{n}f_jj!\frac{c^{j-i}}{(j-i)!}\right)<br>\end{aligned}<br>$$</p><p>$$<br>\begin{align}<br>\sum\limits_{j&#x3D;i}^{n}f_jj!\frac{c^{j-i}}{(j-i)!} &amp;&#x3D; \sum\limits_{k &#x3D; 0}^{n - i} f_{k + i}(k + i)! \frac{c^{k}}{k!} \<br>&amp;&#x3D; \sum\limits_{k &#x3D; 0}^{n - i} f^{rev}_{n - i - k}(k + i)! \frac{c^{k}}{k!}<br>\end{align}<br>$$</p><p>构造：<br>$$<br>A(x) &#x3D; \sum f_{i} i! x^{i}\<br>B(x) &#x3D; \sum \frac{c^{i}}{i!} x^{n - i}<br>$$<br>$A(x)B(x)$ 最后除 $i!$ 即为平移后的多项式。</p><p>$O(n\log(n))$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// f(x) -&gt; f(x + c)</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span></span><br><span class="line"><span class="function">Poly&lt;P&gt; <span class="title">shift</span><span class="params">(<span class="type">const</span> Poly&lt;P&gt;&amp; a, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = a.<span class="built_in">size</span>() - <span class="number">1</span>; <span class="comment">// 最高次数</span></span><br><span class="line">    vector&lt;MInt&lt;P&gt;&gt; <span class="built_in">fac</span>(n + <span class="number">1</span>, <span class="number">1</span>), <span class="built_in">invfac</span>(n + <span class="number">1</span>, <span class="number">1</span>), <span class="built_in">p</span>(n + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        fac[i] = fac[i - <span class="number">1</span>] * i;</span><br><span class="line">        p[i] = p[i - <span class="number">1</span>] * c;</span><br><span class="line">    &#125;</span><br><span class="line">    invfac[n] = fac[n].<span class="built_in">inv</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt; <span class="number">1</span>; i--) &#123;</span><br><span class="line">        invfac[i - <span class="number">1</span>] = invfac[i] * i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly&lt;P&gt; <span class="title">A</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">B</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        A[i] = a[i] * fac[i];</span><br><span class="line">        B[i] = p[n - i] * invfac[n - i];</span><br><span class="line">    &#125;</span><br><span class="line">    A *= B;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n; i &lt;= n * <span class="number">2</span>; i++) &#123;</span><br><span class="line">        A[i] *= invfac[i - n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> A.<span class="built_in">shift</span>(-n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="连续点值平移"><a href="#连续点值平移" class="headerlink" title="连续点值平移"></a>连续点值平移</h3><p>给定一个不超过 $n$ 次的多项式的 $n+1$ 个点值 $f(0),f(1) \dots f(n)$，和一个正整数 $m$，求 $f(m),f(m+1) \dots f(m+n)$。</p><p>考虑拉格朗日插值：<br>$$<br>\begin{align}<br>F(x) &amp;&#x3D; \sum\limits_{0 \le i \le n} f(i) \prod\limits_{0 \le j \le n \wedge j \neq i} \frac{x - x_{j}}{x_{i} - x_{j}} \<br>     &amp;&#x3D; \sum\limits_{0 \le i \le n} f(i) \prod\limits_{0 \le j \le n \wedge j \neq i} \frac{x - j}{i - j} \<br>     &amp;&#x3D; \sum\limits_{0 \le i \le n} \frac{f(i)}{i!} \frac{(-1)^{n - i}}{(n - i)!} \frac{x!}{(x - n - 1)!(x - i)} \<br>     &amp;&#x3D; \frac{x!}{(x - n - 1)!} \sum\limits_{0 \le i \le n} \frac{f(i) (-1)^{n - i}}{i! (n - i)!} \frac{1}{x - i}<br>\end{align}<br>$$<br>令<br>$$<br>A(x) &#x3D; \sum\limits_{0 \le i \le n} \frac{f(i) (-1)^{n - i}}{i! (n - i)!} x^{i} \<br>B(x) &#x3D; \sum\limits_{i \ge 0} \frac{1}{m - n + i} x^{i}<br>$$</p><p>$$<br>\begin{align}<br><a href="A(x)B(x)">x^{n + m}</a> &amp;&#x3D; \sum\limits_{0 \le i \le n} \frac{f(i) (-1)^{n - i}}{i! (n - i)!} \frac{1}{m + x - i} \<br>&amp;&#x3D; \frac{(m + x - n - 1)!}{(m + x)!} f(m + x)<br>\end{align}<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="function">Comb <span class="title">comb</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">Poly&lt;P&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">auto</span> finv = <span class="built_in">MInt</span>&lt;P&gt;(<span class="number">-1</span>).<span class="built_in">inv</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    cin &gt;&gt; a[i];</span><br><span class="line">    a[i] *= comb.<span class="built_in">invfac</span>(i) * comb.<span class="built_in">invfac</span>(n - i) * ((n - i) % <span class="number">2</span> == <span class="number">0</span> ? <span class="number">1</span> : finv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Poly&lt;P&gt; <span class="title">b</span><span class="params">(n * <span class="number">2</span> + <span class="number">1</span>)</span></span>; <span class="comment">// n * 2 + 1 项</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n * <span class="number">2</span>; i++) &#123;</span><br><span class="line">    b[i] = <span class="built_in">MInt</span>&lt;P&gt;(m - n + i).<span class="built_in">inv</span>();</span><br><span class="line">&#125;</span><br><span class="line">a *= b;</span><br><span class="line">vector&lt;MInt&lt;P&gt;&gt; <span class="built_in">upfac</span>(n * <span class="number">2</span> + <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n * <span class="number">2</span> + <span class="number">1</span>; i++) &#123;</span><br><span class="line">    upfac[i] = upfac[i - <span class="number">1</span>] * (m - n - <span class="number">1</span> + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n; i &lt;= <span class="number">2</span> * n; i++) &#123;</span><br><span class="line">    cout &lt;&lt; a[i] * upfac[i + <span class="number">1</span>] / upfac[i - n] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Chirp-Z-Transform"><a href="#Chirp-Z-Transform" class="headerlink" title="Chirp Z Transform"></a>Chirp Z Transform</h3><p>给出多项式 $A(x)&#x3D;\sum\limits_{i&#x3D;0}^na_ix^i\in\mathbb{C}\lbrack x\rbrack$ ，求出 $A(1),A(c),A(c^2),\dots$ 的一种算法。</p><p>对于非负整数 $k$ 和 $i$ 考虑</p><p>$$<br>ki&#x3D;\binom{i+k}{2}-\binom{i}{2}-\binom{k}{2}<br>$$</p><p>其中 $\binom{a}{b}&#x3D;\frac{a(a-1)\cdots (a-b+1)}{b!}$ 为二项式系数，那么</p><p>$$<br>A(c^k)&#x3D;c^{-\binom{k}{2}}\sum _ {i&#x3D;0}^na_ic^{\binom{i+k}{2}-\binom{i}{2}}<br>$$</p><p>令 $A_0(x)&#x3D;\sum\limits_{i}a_{n-i}c^{-\binom{n-i}{2}}x^i$ 且对于 $\forall j\gt n$ 和 $\forall j\lt 0$ 令 $a_j&#x3D;0$、$B_0(x)&#x3D;\sum\limits_{i\geq 0}c^{\binom{i}{2}}x^i$ 那么对于 $t\geq 0$ 有</p><p>$$<br>\begin{aligned}<br>\lbrack x^{n+t}\rbrack (A_0(x)B_0(x))&amp;&#x3D;\sum _ {i&#x3D;0}^{n+t}\left(\lbrack x^{n+t-i}\rbrack A_0(x)\right)\left(\lbrack x^{i}\rbrack B_0(x)\right)\<br>&amp;&#x3D;\sum_{i&#x3D;0}^{n+t}a_{i-t}c^{\binom{i}{2}-\binom{i-t}{2}}\<br>&amp;&#x3D;\sum_{i&#x3D;-t}^na_ic^{\binom{i+t}{2}-\binom{i}{2}}\<br>&amp;&#x3D;c^{\binom{t}{2}}\cdot A(c^t)<br>\end{aligned}<br>$$</p><p>通过计算 $c^{-\binom{t}{2}}\lbrack x^{n+t}\rbrack (A_0(x)B_0(x))$ 可得到 $A(1),A(c),\dots$，该算法需一次卷积。且 $\forall i\geq 0$ 有 $c^{\binom{i+1}{2}}&#x3D;c^{\binom{i}{2}}\cdot c^i$，可递推计算。</p><p>简单来说构造 $A_0(x), B_0(x)$ ：<br>$$<br>A_0(x)&#x3D;\sum\limits_{i}a_{n-i}c^{-\binom{n-i}{2}}x^i \<br>B_0(x)&#x3D;\sum\limits_{i\geq 0}c^{\binom{i}{2}}x^i \<br>A_0(x)B_0(x) &#x3D; c^{\binom{t}{2}}\cdot A(c^t)<br>$$<br>$t$ 为 $B_0(x)$ 的最高项。</p><p>给定一个 $n + 1$ 项多项式 $P(x)$ 以及 $c, m$，请计算 $P(c^0),P(c^1),\dots,P(c^{m-1})$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">long</span> n, c, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; c &gt;&gt; m;</span><br><span class="line"><span class="function">Poly&lt;P&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;MInt&lt;P&gt;&gt; <span class="built_in">p</span>(n + m + <span class="number">1</span>, <span class="number">1</span>); <span class="comment">// c^i;</span></span><br><span class="line">vector&lt;MInt&lt;P&gt;&gt; <span class="built_in">cp</span>(n + m + <span class="number">1</span>, <span class="number">1</span>); <span class="comment">// c^(binom&#123;i&#125;&#123;2&#125;)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n + m; i++) &#123;</span><br><span class="line">    p[i] = p[i - <span class="number">1</span>] * c;</span><br><span class="line">    cp[i + <span class="number">1</span>] = cp[i] * p[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Poly&lt;P&gt; A = a;</span><br><span class="line"><span class="built_in">reverse</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    A[i] /= cp[n - i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Poly&lt;P&gt; <span class="title">B</span><span class="params">(n + m + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n + m; i++) &#123;</span><br><span class="line">    B[i] = cp[i];</span><br><span class="line">&#125;</span><br><span class="line">A *= B;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n; i &lt; n + m; i++) &#123;</span><br><span class="line">    cout &lt;&lt; A[i] / cp[i - n] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Poly-Template"><a href="#Poly-Template" class="headerlink" title="Poly Template"></a>Poly Template</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> T <span class="title">power</span><span class="params">(T a, <span class="type">long</span> <span class="type">long</span> b)</span> </span>&#123;</span><br><span class="line">    T res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; b; a *= a, b &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            res *= a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MInt</span> &#123;</span><br><span class="line"><span class="type">unsigned</span> x;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="title">MInt</span><span class="params">()</span> : x(<span class="number">0</span>) &#123;</span>&#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">MInt</span><span class="params">(<span class="type">long</span> <span class="type">long</span> sig)</span> : x(norm(sig % P)) &#123;</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">int</span> <span class="title">val</span><span class="params">()</span> <span class="type">const</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> x; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// -P &lt;= v &lt; 2P</span></span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="type">long</span> <span class="type">long</span> <span class="title">norm</span><span class="params">(<span class="type">long</span> <span class="type">long</span> v)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (v &lt; <span class="number">0</span>) v += P;</span><br><span class="line">        <span class="keyword">if</span> (v &gt;= P) v -= P;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> MInt <span class="title">inv</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">power</span>(*<span class="keyword">this</span>, P - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">constexpr</span> MInt&amp; <span class="keyword">operator</span>+=(MInt that) &#123; </span><br><span class="line">        x = <span class="built_in">norm</span>(x + that.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>; </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">constexpr</span> MInt&amp; <span class="keyword">operator</span>-=(MInt that) &#123;</span><br><span class="line">        x = <span class="built_in">norm</span>(x + P - that.x);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>; </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">constexpr</span> MInt&amp; <span class="keyword">operator</span>*=(MInt that) &#123;</span><br><span class="line">        x = (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)x * that.x % P; </span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>; </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">constexpr</span> MInt&amp; <span class="keyword">operator</span>/=(MInt that) &#123; </span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) *= that.<span class="built_in">inv</span>(); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> MInt <span class="keyword">operator</span>+(MInt a, MInt b) &#123; <span class="keyword">return</span> a += b; &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> MInt <span class="keyword">operator</span>-(MInt a, MInt b) &#123; <span class="keyword">return</span> a -= b; &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> MInt <span class="keyword">operator</span>*(MInt a, MInt b) &#123; <span class="keyword">return</span> a *= b; &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> MInt <span class="keyword">operator</span>/(MInt a, MInt b) &#123; <span class="keyword">return</span> a /= b; &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> MInt <span class="keyword">operator</span>-(MInt a) &#123; <span class="keyword">return</span> <span class="built_in">MInt</span>() -= a; &#125; <span class="comment">// 负号</span></span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(MInt a, MInt b) &#123; <span class="keyword">return</span> a.x &lt; b.x; &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;=(MInt a, MInt b) &#123; <span class="keyword">return</span> a.x &lt;= b.x; &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>==(MInt a, MInt b) &#123; <span class="keyword">return</span> a.x == b.x; &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(MInt a, MInt b) &#123; <span class="keyword">return</span> a.x != b.x; &#125;</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, MInt a) &#123; </span><br><span class="line">        os &lt;&lt; a.x; </span><br><span class="line">        <span class="keyword">return</span> os; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; is, MInt&amp; a) &#123; </span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> x; </span><br><span class="line">        is &gt;&gt; x;</span><br><span class="line">        a = <span class="built_in">MInt</span>(x); </span><br><span class="line">        <span class="keyword">return</span> is; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// P 质数</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> MInt&lt;P&gt; <span class="title">findPrimitiveRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> x = P - <span class="number">1</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; factors;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> i = <span class="number">2</span>; i * i &lt;= x; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>) &#123;</span><br><span class="line">            factors.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="keyword">while</span> (x % i == <span class="number">0</span>) &#123;</span><br><span class="line">                x /= i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        factors.<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; P; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">power</span>(<span class="built_in">MInt</span>&lt;P&gt;(i), P - <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; f : factors) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">power</span>(<span class="built_in">MInt</span>&lt;P&gt;(i), (P - <span class="number">1</span>) / f) == <span class="number">1</span>) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">assert</span>(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span><br><span class="line"><span class="keyword">constexpr</span> MInt&lt;P&gt; primitiveRoot = <span class="built_in">findPrimitiveRoot</span>&lt;P&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dft</span><span class="params">(vector&lt;MInt&lt;P&gt;&gt;&amp; a)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">rev</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            rev[i] |= n &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; rev[i]) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(a[i], a[rev[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        MInt&lt;P&gt; wn = <span class="built_in">power</span>(primitiveRoot&lt;P&gt;, (P - <span class="number">1</span>) / (i * <span class="number">2</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j += i * <span class="number">2</span>) &#123;</span><br><span class="line">            MInt&lt;P&gt; w = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; i; k++) &#123;</span><br><span class="line">                MInt&lt;P&gt; u = a[k + j];</span><br><span class="line">                MInt&lt;P&gt; v = a[k + j + i] * w;</span><br><span class="line">                a[k + j] = u + v;</span><br><span class="line">                a[k + j + i] = u - v;</span><br><span class="line">                w *= wn;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">idft</span><span class="params">(vector&lt;MInt&lt;P&gt;&gt;&amp; a)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">    <span class="built_in">reverse</span>(a.<span class="built_in">begin</span>() + <span class="number">1</span>, a.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">dft</span>(a);</span><br><span class="line">    MInt&lt;P&gt; inv = <span class="built_in">MInt</span>&lt;P&gt;(n).<span class="built_in">inv</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        a[i] *= inv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Poly</span> : <span class="keyword">public</span> vector&lt;MInt&lt;P&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">using</span> Value = MInt&lt;P&gt;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Poly</span>() : <span class="built_in">vector</span>&lt;Value&gt;() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="keyword">constexpr</span> <span class="title">Poly</span><span class="params">(<span class="type">int</span> n)</span> : vector&lt;Value&gt;(n) &#123;</span>&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="keyword">constexpr</span> <span class="title">Poly</span><span class="params">(<span class="type">const</span> vector&lt;Value&gt; &amp;a)</span> : vector&lt;Value&gt;(a) &#123;</span>&#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">Poly</span><span class="params">(<span class="type">const</span> initializer_list&lt;Value&gt; &amp;a)</span> : vector&lt;Value&gt;(a) &#123;</span>&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">InputIt</span>, <span class="keyword">class</span> = _RequireInputIter&lt;InputIt&gt;&gt;</span><br><span class="line">    <span class="keyword">explicit</span> <span class="keyword">constexpr</span> <span class="built_in">Poly</span>(InputIt first, InputIt last) : <span class="built_in">vector</span>&lt;Value&gt;(first, last) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> F&gt;</span><br><span class="line">    <span class="keyword">explicit</span> <span class="keyword">constexpr</span> <span class="built_in">Poly</span>(<span class="type">int</span> n, F f) : <span class="built_in">vector</span>&lt;Value&gt;(n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            (*<span class="keyword">this</span>)[i] = <span class="built_in">f</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 系数移动 (k &gt; 0 右移)</span></span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">shift</span><span class="params">(<span class="type">int</span> k)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">auto</span> b = *<span class="keyword">this</span>;</span><br><span class="line">            b.<span class="built_in">insert</span>(b.<span class="built_in">begin</span>(), k, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;<span class="built_in">size</span>() &lt;= -k) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>(<span class="keyword">this</span>-&gt;<span class="built_in">begin</span>() + (-k), <span class="keyword">this</span>-&gt;<span class="built_in">end</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取前 k 个系数</span></span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">trunc</span><span class="params">(<span class="type">int</span> k)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        Poly f = *<span class="keyword">this</span>;</span><br><span class="line">        f.<span class="built_in">resize</span>(k);</span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> Poly <span class="keyword">operator</span>+(<span class="type">const</span> Poly &amp;a, <span class="type">const</span> Poly &amp;b) &#123;</span><br><span class="line">        <span class="function">Poly <span class="title">res</span><span class="params">(max(a.size(), b.size()))</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            res[i] += a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; b.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            res[i] += b[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> Poly <span class="keyword">operator</span>-(<span class="type">const</span> Poly &amp;a, <span class="type">const</span> Poly &amp;b) &#123;</span><br><span class="line">        <span class="function">Poly <span class="title">res</span><span class="params">(max(a.size(), b.size()))</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            res[i] += a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; b.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            res[i] -= b[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> Poly <span class="keyword">operator</span>-(<span class="type">const</span> Poly &amp;a) &#123;</span><br><span class="line">        <span class="function">std::vector&lt;Value&gt; <span class="title">res</span><span class="params">(a.size())</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; res.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            res[i] = -a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Poly</span>(res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> Poly <span class="keyword">operator</span>*(Poly a, Poly b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.<span class="built_in">size</span>() == <span class="number">0</span> || b.<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> n = <span class="number">1</span>, tot = a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (n &lt; tot) &#123;</span><br><span class="line">            n *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        a.<span class="built_in">resize</span>(n);</span><br><span class="line">        b.<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="built_in">dft</span>(a);</span><br><span class="line">        <span class="built_in">dft</span>(b);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            a[i] *= b[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">idft</span>(a);</span><br><span class="line">        a.<span class="built_in">resize</span>(tot);</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> Poly <span class="keyword">operator</span>*(Value a, Poly b) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; b.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            b[i] *= a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> Poly <span class="keyword">operator</span>*(Poly a, Value b) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            a[i] *= b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> Poly <span class="keyword">operator</span>/(Poly a, Poly b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="built_in">assert</span>(<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a.<span class="built_in">size</span>() &lt; b.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">reverse</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> k = a.<span class="built_in">size</span>() - b.<span class="built_in">size</span>() + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">auto</span> c = a.<span class="built_in">trunc</span>(k) * b.<span class="built_in">inv</span>(k).<span class="built_in">trunc</span>(k);</span><br><span class="line">        <span class="built_in">reverse</span>(c.<span class="built_in">begin</span>(), c.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> c.<span class="built_in">shift</span>(k - (<span class="type">int</span>)c.<span class="built_in">size</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> Poly <span class="keyword">operator</span>/(Poly a, Value b) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            a[i] /= b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保留 b.size() - 1 项，高位补 0 </span></span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">friend</span> Poly <span class="keyword">operator</span>%(Poly a, Poly b) &#123;</span><br><span class="line">        <span class="keyword">return</span> (a - a / b * b).<span class="built_in">trunc</span>(b.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> Poly &amp;<span class="keyword">operator</span>+=(Poly b) &#123;</span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) = (*<span class="keyword">this</span>) + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> Poly &amp;<span class="keyword">operator</span>-=(Poly b) &#123;</span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) = (*<span class="keyword">this</span>) - b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> Poly &amp;<span class="keyword">operator</span>*=(Poly b) &#123;</span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) = (*<span class="keyword">this</span>) * b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> Poly &amp;<span class="keyword">operator</span>*=(Value b) &#123;</span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) = (*<span class="keyword">this</span>) * b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> Poly &amp;<span class="keyword">operator</span>/=(Poly b) &#123;</span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) = (*<span class="keyword">this</span>) / b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> Poly &amp;<span class="keyword">operator</span>/=(Value b) &#123;</span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) = (*<span class="keyword">this</span>) / b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constexpr</span> Poly &amp;<span class="keyword">operator</span>%=(Poly b) &#123;</span><br><span class="line">        <span class="built_in">return</span> (*<span class="keyword">this</span>) = (*<span class="keyword">this</span>) % b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">deriv</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">Poly <span class="title">res</span><span class="params">(<span class="keyword">this</span>-&gt;size() - <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;<span class="built_in">size</span>() - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            res[i] = (i + <span class="number">1</span>) * (*<span class="keyword">this</span>)[i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">integr</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="function">Poly <span class="title">res</span><span class="params">(<span class="keyword">this</span>-&gt;size() + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            res[i + <span class="number">1</span>] = (*<span class="keyword">this</span>)[i] / (i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">inv</span><span class="params">(<span class="type">int</span> m)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        Poly x&#123;(*<span class="keyword">this</span>)[<span class="number">0</span>].<span class="built_in">inv</span>()&#125;;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &lt; m) &#123;</span><br><span class="line">            k *= <span class="number">2</span>;</span><br><span class="line">            x = (x * (Poly&#123;<span class="number">2</span>&#125; - <span class="built_in">trunc</span>(k) * x)).<span class="built_in">trunc</span>(k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x.<span class="built_in">trunc</span>(m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">log</span><span class="params">(<span class="type">int</span> m)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">deriv</span>() * <span class="built_in">inv</span>(m)).<span class="built_in">integr</span>().<span class="built_in">trunc</span>(m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">exp</span><span class="params">(<span class="type">int</span> m)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        Poly x&#123;<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &lt; m) &#123;</span><br><span class="line">            k *= <span class="number">2</span>;</span><br><span class="line">            x = (x * (Poly&#123;<span class="number">1</span>&#125; - x.<span class="built_in">log</span>(k) + <span class="built_in">trunc</span>(k))).<span class="built_in">trunc</span>(k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x.<span class="built_in">trunc</span>(m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// k &lt;= P - 1 的情况</span></span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">pow</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> m)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; <span class="keyword">this</span>-&gt;<span class="built_in">size</span>() &amp;&amp; (*<span class="keyword">this</span>)[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="keyword">this</span>-&gt;<span class="built_in">size</span>() || <span class="number">1LL</span> * i * k &gt;= m) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>(m);</span><br><span class="line">        &#125;</span><br><span class="line">        Value v = (*<span class="keyword">this</span>)[i];</span><br><span class="line">        <span class="keyword">auto</span> f = <span class="built_in">shift</span>(-i) * v.<span class="built_in">inv</span>();</span><br><span class="line">        <span class="keyword">return</span> (f.<span class="built_in">log</span>(m - i * k) * k).<span class="built_in">exp</span>(m - i * k).<span class="built_in">shift</span>(i * k) * <span class="built_in">power</span>(v, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">sqrt</span><span class="params">(<span class="type">int</span> m)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        Poly x&#123;<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &lt; m) &#123;</span><br><span class="line">            k *= <span class="number">2</span>;</span><br><span class="line">            x = (x + (<span class="built_in">trunc</span>(k) * x.<span class="built_in">inv</span>(k)).<span class="built_in">trunc</span>(k)) * <span class="built_in">Value</span>(<span class="number">2</span>).<span class="built_in">inv</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x.<span class="built_in">trunc</span>(m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> Poly <span class="title">mulT</span><span class="params">(Poly b)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (b.<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Poly</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> n = b.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">reverse</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> ((*<span class="keyword">this</span>) * b).<span class="built_in">shift</span>(-(n - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> vector&lt;Value&gt; <span class="title">eval</span><span class="params">(vector&lt;Value&gt; x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;<span class="built_in">size</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">vector</span>&lt;Value&gt;(x.<span class="built_in">size</span>(), <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> n = <span class="built_in">max</span>(x.<span class="built_in">size</span>(), <span class="keyword">this</span>-&gt;<span class="built_in">size</span>());</span><br><span class="line">        <span class="function">vector&lt;Poly&gt; <span class="title">q</span><span class="params">(<span class="number">4</span> * n)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;Value&gt; <span class="title">ans</span><span class="params">(x.size())</span></span>;</span><br><span class="line">        x.<span class="built_in">resize</span>(n);</span><br><span class="line">        function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; build = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">                q[p] = Poly&#123;<span class="number">1</span>, -x[l]&#125;;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">                <span class="built_in">build</span>(<span class="number">2</span> * p, l, m);</span><br><span class="line">                <span class="built_in">build</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r);</span><br><span class="line">                q[p] = q[<span class="number">2</span> * p] * q[<span class="number">2</span> * p + <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line">        function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>, <span class="type">const</span> Poly &amp;)&gt; work = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">const</span> Poly &amp;num) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (l &lt; <span class="built_in">int</span>(ans.<span class="built_in">size</span>())) &#123;</span><br><span class="line">                    ans[l] = num[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">auto</span> lp = num.<span class="built_in">mulT</span>(q[<span class="number">2</span> * p + <span class="number">1</span>]);</span><br><span class="line">                lp.<span class="built_in">resize</span>(m - l);</span><br><span class="line">                <span class="built_in">work</span>(<span class="number">2</span> * p, l, m, lp);</span><br><span class="line">                <span class="keyword">auto</span> rp = num.<span class="built_in">mulT</span>(q[<span class="number">2</span> * p]);</span><br><span class="line">                rp.<span class="built_in">resize</span>(r - m);</span><br><span class="line">                <span class="built_in">work</span>(<span class="number">2</span> * p + <span class="number">1</span>, m, r, rp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">work</span>(<span class="number">1</span>, <span class="number">0</span>, n, <span class="built_in">mulT</span>(q[<span class="number">1</span>].<span class="built_in">inv</span>(n)));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="LinearRecurrence"><a href="#LinearRecurrence" class="headerlink" title="LinearRecurrence"></a>LinearRecurrence</h3><p>给定一个线性递推数列 ${f_i}$ 的前 $k$ 项 $f_0\dots f_{k-1}$，和其递推式 $f_n&#x3D;\sum_{i&#x3D;1}^k f_{n-i}g_i$ 的各项系数 $g_i$，求 $f_n$。</p><p>定义 $F(\sum c_ix^i)&#x3D;\sum c_if_i$，那么答案就是 $F(x^n)$。</p><p>由于 $f_n&#x3D;\sum_{i&#x3D;1}^{k}f_{n-i}a_i$，所以 $F(x^n)&#x3D;F(\sum_{i&#x3D;1}^{k}a_ix^{n-i})$，所以 $F(x^n-\sum_{i&#x3D;1}^k a_ix^{n-i})&#x3D;F(x^{n-k}(x^k-\sum_{i&#x3D;0}^{k-1}a_{k-i}x^i))&#x3D;0$。</p><p>设 $G(x)&#x3D;x^k-\sum_{i&#x3D;0}^{k-1}a_{k-i}x^i$。</p><p>那么 $F(A(x)+x^nG(x))&#x3D;F(A(x))+F(x^nG(x))&#x3D;F(A(x))$。</p><p>那么就可以通过多次对 $A(x)$ 加上 $x^nG(x)$ 的倍数来降低 $A(x)$ 的次数。</p><p>也就是求 $F(A(x)\bmod G(x))$。$A(x)\bmod G(x)$ 的次数不超过 $k-1$，而 $f_{0..k-1}$ 已经给出了，就可以算了。</p><p>问题转化成了快速地求 $x^n\bmod G(x)$，只要将<strong>普通快速幂</strong>中的乘法与取模换成多项式乘法与多项式取模就可以在 $O(k\log k\log n)$ 的时间复杂度内解决这个问题了。</p><p>简单来说：求 $x^{n} \pmod{G(x)}$ ，$G(x) &#x3D; x^{k} - \sum_{i&#x3D;0}^{k-1}a_{k-i}x^i$ ，最后累加答案 $f_{n} \equiv \sum\limits_{i} f_{i}b_{i} \pmod{P}$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="type">int</span> P&gt;</span></span><br><span class="line"><span class="function">MInt&lt;P&gt; <span class="title">linearRecurrence</span><span class="params">(vector&lt;MInt&lt;P&gt;&gt; f, vector&lt;MInt&lt;P&gt;&gt; g, <span class="type">long</span> <span class="type">long</span> n)</span> </span>&#123;</span><br><span class="line">    Poly&lt;P&gt; a&#123;<span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    Poly&lt;P&gt; b&#123;<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="built_in">reverse</span>(g.<span class="built_in">begin</span>(), g.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x : g) &#123;</span><br><span class="line">        x *= <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    g.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="function"><span class="type">const</span> Poly&lt;P&gt; <span class="title">p</span><span class="params">(g.begin(), g.end())</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            b = b * a % p;</span><br><span class="line">        &#125;</span><br><span class="line">        a = a * a % p;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    MInt&lt;P&gt; res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; f.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        res += f[i] * b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相较于矩阵快速幂 $O(k^{3} \log(n))$ 更快</p><h2 id="generating-function"><a href="#generating-function" class="headerlink" title="generating function"></a>generating function</h2><h3 id="Ordinary-generating-function-OGF"><a href="#Ordinary-generating-function-OGF" class="headerlink" title="Ordinary generating function (OGF)"></a>Ordinary generating function (OGF)</h3><p>$$<br>F(x) &#x3D; \sum_i a_{i}x^{i}<br>$$</p><p>系数可用于求多重<strong>组合</strong>数</p><p>卷积<br>$$<br>F(x)G(x) &#x3D; \sum_n x^n \sum_{i&#x3D;0}^na_ib_{n-i}<br>$$<br>封闭形式</p><ol><li><p>系数 $&lt;1,1,\cdots,1&gt;$<br> $$<br> F(x) &#x3D; 1 + x + x^{2} + \cdots + x^{n} &#x3D; \frac{1}{1 - x}<br> $$</p><p> 由 $F(x) x + 1 &#x3D; F(x)$ 推出</p></li><li><p>系数 $&lt;1,p,\cdots,p^{n}&gt;$<br> $$<br> F(x) &#x3D; 1 + px + p^{2}x^{2} + \cdots + p^{n}x^{n} &#x3D; \frac{1}{1 - px}<br> $$</p></li><li><p>系数 $&lt;1,2,\cdots,n&gt;$<br> $$<br> F(x) &#x3D; 1 + 2x + 3x^{2} + \cdots + x^{n - 1} &#x3D; \frac{1}{(1 - x)^{2}}<br> $$<br> 对第一个式子求导即可</p></li><li><p>系数 $\binom{m}{n}$<br> $$<br> F(x)&#x3D;\sum_{n\ge 0}\binom{m}{n}x^n&#x3D;(1 + x)^{m}<br> $$</p></li><li><p>系数 $\binom{n + m - 1}{n}$<br> $$<br> F(x) &#x3D; \sum_{n \ge 0} \binom{n + m - 1}{n} x^{n} &#x3D; \frac{1}{(1 - x)^m}<br> $$<br> 该式为广义二项式定理</p></li></ol><h3 id="Exponential-generating-function-EGF"><a href="#Exponential-generating-function-EGF" class="headerlink" title="Exponential generating function (EGF)"></a>Exponential generating function (EGF)</h3><p>$$<br>F(x) &#x3D; \sum_{n} a_{n} \frac{x^{n}}{n!}<br>$$</p><p>系数可用于求多重<strong>排列</strong>数</p><p>卷积<br>$$<br>\begin{align}<br>F(x)G(x) &amp;&#x3D; \sum_{i \ge 0} a_{i} \frac{x^{i}}{i!} \sum_{j \ge 0} b_{j} \frac{x^{j}}{j!} \<br>         &amp;&#x3D; \sum_{n} x^{n} \sum_{i &#x3D; 0}^{n} a_{i}b_{n - i} \frac{1}{i!(n - i)!} \<br>         &amp;&#x3D; \sum_{n} \frac{x^{n}}{n!} \sum_{i &#x3D; 0}^{n} \binom{n}{i} a_{i}b_{n - i}<br>\end{align}<br>$$<br>封闭形式</p><ol><li><p>系数 $&lt;1, 1, \cdots, 1&gt;$<br> $$<br> F(x) &#x3D; 1 + \frac{x^{1}}{1!} + \frac{x^{2}}{2!} + \cdots + \frac{x^{n}}{n!} &#x3D; \mathrm{e}^{x}<br> $$</p></li><li><p>系数 $&lt;1, p, \cdots, p^{n}&gt;$<br> $$<br> F(x) &#x3D; 1 + p\frac{x^{1}}{1!} + p^{2}\frac{x^{2}}{2!} + \cdots + p^{n}\frac{x^{n}}{n!} &#x3D; \mathrm{e}^{px}<br> $$</p></li><li><p>系数 $&lt;1, -1, \cdots, (-1)^{n}&gt;$<br> $$<br> F(x) &#x3D; 1 - \frac{x^{1}}{1!} + \frac{x^{2}}{2!} + \cdots + (-1)^{n} \frac{x^{n}}{n!} &#x3D; \mathrm{e}^{-x}<br> $$</p></li><li><p>系数 $&lt;1, 0, \cdots, (n + 1) % 2&gt;$<br> $$<br> F(x) &#x3D; 1 + \frac{x^{2}}{2!} + \frac{x^{4}}{4!} + \cdots + \frac{x^{2n}}{(2n)!} &#x3D; \frac{\mathrm{e}^{x} + \mathrm{e}^{-x}}{2}<br> $$</p></li><li><p>系数 $&lt;0, 1, \cdots, n % 2&gt;$<br> $$<br> F(x) &#x3D; 1 + \frac{x^{1}}{1!} + \frac{x^{3}}{3!} + \cdots + \frac{x^{2n - 1}}{(2n - 1)!} &#x3D; \frac{\mathrm{e}^{x} - \mathrm{e}^{-x}}{2}<br> $$</p></li></ol><h3 id="Dirichlet-series-generating-function-DGF"><a href="#Dirichlet-series-generating-function-DGF" class="headerlink" title="Dirichlet series generating function (DGF)"></a>Dirichlet series generating function (DGF)</h3><p>$$<br>F(x) &#x3D; \sum_{n \ge 1} \frac{a_{n}}{n^{x}}<br>$$</p><p>卷积<br>$$<br>\begin{align}<br>F(x)G(x) &amp;&#x3D; \sum_{i \ge 1} \frac{a_{i}}{i^{x}} \sum_{j \ge 1} \frac{b_{j}}{j^{x}} \<br>         &amp;&#x3D; \sum_{n \ge 1} \frac{1}{n^{x}} \sum_{d \mid n} a_{d} b_{\frac{n}{d}}<br>\end{align}<br>$$</p><p>$$<br>f * g &#x3D; F(d)G(\frac{n}{d}) &#x3D; F(\frac{n}{d})G(d)<br>$$</p><p><strong>交换律：</strong> $f<em>g&#x3D;g</em>f$。</p><p><strong>结合律：</strong>$(f<em>g)<em>h&#x3D;f</em>(g</em>h)$。</p><p><strong>分配律：</strong>$(f+g)<em>h&#x3D;f</em>h+g*h$。</p><p><strong>积性函数</strong></p><p>若函数 $f(n)$ 满足 $f(1)&#x3D;1$ 且 $\forall x,y\in\mathbf{N}^*,~(x,y)&#x3D;1$ 都有 $f(xy)&#x3D;f(x)f(y)$，则 $f(n)$ 为 <strong>积性函数</strong>。<br>若函数 $f(n)$ 满足 $f(1)&#x3D;1$ 且 $\forall x,y\in\mathbf{N}^*$ 都有 $f(xy)&#x3D;f(x)f(y)$，则 $f(n)$ 为 <strong>完全积性函数</strong>。</p><p>欧拉函数和莫比乌斯函数都是积性函数<br>$$<br>\sum\limits_{d \mid n} \varphi(d) &#x3D; n<br>$$</p><p>$$<br>\sum\limits_{d \mid n} \mu(d) &#x3D; [n &#x3D; 1]<br>$$</p><p>欧拉函数与莫比乌斯函数的联系<br>$$<br>\sum\limits_{d \mid n} \mu(d) \frac{n}{d} &#x3D; \varphi(n)<br>$$<br>常用函数<br>$$<br>\begin{align}<br>&amp; \text{元函数：} \quad \varepsilon(n) &#x3D; [n &#x3D; 1] \<br>&amp; \text{常函数：} \quad 1(n) &#x3D; 1 \<br>&amp; \text{恒等函数：} \quad id(n) &#x3D; n<br>\end{align}<br>$$<br>卷积关系<br>$$<br>\begin{align}<br>&amp; \mu \ * \ 1 &#x3D; \varepsilon \<br>&amp; \varphi \ * \ 1 &#x3D; id \<br>&amp; \mu \ * \ id &#x3D; \varphi \<br>&amp; f \ * \ \varepsilon &#x3D; f \<br>&amp; f \ * \ 1 \neq f \<br>&amp; 1 \ * \ id &#x3D; \sigma \text{约数和}<br>\end{align}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> Template </category>
          
          <category> Poly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Number theory</title>
      <link href="/2024/10/09/ACM/Template/Number%20theory/"/>
      <url>/2024/10/09/ACM/Template/Number%20theory/</url>
      
        <content type="html"><![CDATA[<h1 id="Number-theory"><a href="#Number-theory" class="headerlink" title="Number theory"></a>Number theory</h1><h2 id="Inverse"><a href="#Inverse" class="headerlink" title="Inverse"></a>Inverse</h2><p>$ax \equiv 1$ $(mod \quad n)$ </p><p>逆元存在的充要条件 $gcd(a, n) &#x3D; 1$ </p><ol><li><p>$n$ 是质数且 $gcd(a, n) &#x3D; 1$，逆元 $x \equiv a^{n - 2} \quad (mod \quad n)$  （费马小定理）</p></li><li><p>$ax + ny &#x3D; gcd(a, n)$，$gcd(a, n) &#x3D; 1$ ，求 $x$ 的最小正整数解 （<code>Exgcd</code> 求解）</p></li><li><p>线性递推 $1,2,\cdots,n$ 的逆元：$inv_{i} &#x3D; (p - \lfloor \frac{p}{i} \rfloor ) \times inv_{p ; mod ; i} \quad mod ; p$</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">  inv[i] = (<span class="type">long</span> <span class="type">long</span>)(p - p / i) * inv[p % i] % p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>计算任意 $n$ 个数的逆元，先求前缀积 $S_{n}$ ，对 $S_{n}$ 利用 1 或 2 求解 $S_{n}$ 的逆元 $InvS_{n}$ ，则 $a_{n}$ 的逆元为 $InvS_{n} \times S_{n - 1}$， $InvS_{n - 1} &#x3D; InvS_{n} \times a_{n}$ 递推即可</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) s[i] = s[i - <span class="number">1</span>] * a[i] % p;</span><br><span class="line">sv[n] = <span class="built_in">qpow</span>(s[n], p - <span class="number">2</span>); <span class="comment">// 当然这里也可以用 exgcd 来求逆元,视个人喜好而定.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; --i) sv[i - <span class="number">1</span>] = sv[i] * a[i] % p;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) inv[i] = sv[i] * s[i - <span class="number">1</span>] % p;</span><br></pre></td></tr></table></figure><h2 id="Exgcd"><a href="#Exgcd" class="headerlink" title="Exgcd"></a>Exgcd</h2><p>$$<br>ax + by &#x3D; gcd(a, b)<br>$$</p><p>求可行解 $x_{0}$ ，$y_{0}$ ，以下为通解<br>$$<br>x &#x3D; x_{0} + \frac{b}{gcd(a, b)} k \<br>y &#x3D; y_{0} - \frac{a}{gcd(a, b)} k<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">Exgcd</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span>&amp; x, <span class="type">long</span> <span class="type">long</span>&amp; y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!b) &#123;</span><br><span class="line">x = <span class="number">1</span>;</span><br><span class="line">y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> c = <span class="built_in">Exgcd</span>(b, a % b, y, x);</span><br><span class="line">y -= (a / b) * x;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Bezout’s-Lemma"><a href="#Bezout’s-Lemma" class="headerlink" title="Bézout’s Lemma"></a>Bézout’s Lemma</h2><p>裴蜀定理<br>$$<br>ax + by &#x3D; m<br>$$<br>有解的充要条件 $gcd(a, b) \mid m$ </p><p>通解可利用 <code>Exgcd</code> 求<br>$$<br>x &#x3D; (x_{0} + \frac{b}{gcd(a, b)} k) \frac{m}{gcd(a, b)} \<br>y &#x3D; (y_{0} - \frac{a}{gcd(a, b)} k) \frac{m}{gcd(a, b)}<br>$$</p><h2 id="Fermat’s-little-theorem"><a href="#Fermat’s-little-theorem" class="headerlink" title="Fermat’s little theorem"></a>Fermat’s little theorem</h2><p>费马小定理</p><p>$p$ 为质数且 $gcd(a, p) &#x3D; 1$ ，则 $a^{p - 1} \equiv 1 \quad (mod \quad p)$ </p><p>求逆元 $ax \equiv 1 \quad (mod \quad p)$ </p><p>$a \times a^{p - 2} \equiv 1 \quad (mod \quad p) \Rightarrow x \equiv a^{p - 2} \quad (mod \quad p)$</p><h2 id="Euler’s-function"><a href="#Euler’s-function" class="headerlink" title="Euler’s function"></a>Euler’s function</h2><p>$$<br>\varphi(n) &#x3D; n \times \prod\limits_{i &#x3D; 1}^{k} \frac{p_{i} - 1}{p_{i}}<br>$$</p><p>质因数分解计算 $O(\sqrt{n})$ </p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">phi</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> p = x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> i = <span class="number">2</span>; i * i &lt;= x; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>) &#123;</span><br><span class="line">            p /= i;</span><br><span class="line">            p *= i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (x % i == <span class="number">0</span>) &#123;</span><br><span class="line">                x /= i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        p /= x;</span><br><span class="line">        p *= x - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可用 <strong>Pollard Rho</strong> 算法优化。</p><p>$$<br>gcd(a, p) &#x3D; 1 \Rightarrow a^{\varphi(p)} \equiv 1 \quad (mod \quad p)<br>$$</p><p>$n$ 的<strong>所有约数</strong>的欧拉函数值之和为 $n$<br>$$<br>\sum_{d \mid n} \varphi(d) &#x3D; n<br>$$</p><p><strong>trick</strong></p><p>求 $a_{1}^{a_{2}^{\cdots}} ; % ; p $ 的值，可以递归求解，注意扩展欧拉定理的适用范围，最多进行 $\log$ 次，$\varphi(p)$ 就会变为 1，</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询一个区间的答案 [l, r],现预处理 phi 的值</span></span><br><span class="line"><span class="keyword">auto</span> dfs = [&amp;](<span class="keyword">auto</span> dfs, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> dep) -&gt; <span class="type">long</span> <span class="type">long</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt; r || vphi[dep] == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">quick_power</span>(val[l], <span class="built_in">dfs</span>(dfs, l + <span class="number">1</span>, r, dep + <span class="number">1</span>), vphi[dep]);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 快速幂稍微修改一下，符合扩展欧拉定理</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">quick_power</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> flag = a &gt;= p;</span><br><span class="line">    a %= p;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (res * a &gt;= p) &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res = res * a % p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a * a &gt;= p &amp;&amp; b != <span class="number">0</span>) &#123;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        a = a * a % p;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res + flag * p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Euler’s-theorem"><a href="#Euler’s-theorem" class="headerlink" title="Euler’s theorem"></a>Euler’s theorem</h2><p>若 $gcd(a, p) &#x3D; 1$ ，则 $a^{\varphi(p)} \equiv 1 \quad (mod \quad p) $ （$\varphi(x)$ 表示 $1$ 到 $x$ 与 $x$ 互质的数的个数）</p><p>扩展欧拉定理<br>$$<br>a^{b} \equiv<br>\begin{cases}<br> a^{b ; mod ; \varphi(p)} &amp; gcd(a, p) &#x3D; 1 \<br> a^{b} &amp; gcd(a, p) \neq 1, b &lt; \varphi(p) \<br> a^{(b ; mod ; \varphi(p)) + \varphi(p)} &amp; gcd(a, p) \neq 1, b \ge \varphi(p)<br> \end{cases}<br>\quad (mod \quad p)<br>$$</p><h2 id="Wilson"><a href="#Wilson" class="headerlink" title="Wilson"></a>Wilson</h2><p>$(p - 1)! \equiv -1 \quad(mod \quad p)$  是 $p$ 为质数的充分必要条件</p><h2 id="Legendre"><a href="#Legendre" class="headerlink" title="Legendre"></a>Legendre</h2><p>$n!$ 中含有的素数 $p$ 的幂次 $v_p(n!)$ 为 $\sum\limits_{i &#x3D; 1}^{\infty} \lfloor \frac{n}{p^{i}} \rfloor &#x3D; \frac{n - S_{p}(n)}{p - 1}$ （$S_{p}(n)$ 表示 $n$ 在 $p$ 进制下的各位数的和）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">multiplicity_factorial</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    n /= p;</span><br><span class="line">    count += n;</span><br><span class="line">  &#125; <span class="keyword">while</span> (n);</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125; <span class="comment">// 计算 vp(n!)</span></span><br></pre></td></tr></table></figure><h2 id="Kummer"><a href="#Kummer" class="headerlink" title="Kummer"></a>Kummer</h2><p>素数 $p$ 在组合数 $\dbinom{n}{m}$ 中的幂次，恰好是 $p$ 进制下 $m$ 减掉 $n$ 需要借位的次数。<br>$$<br>v_p\left(\dbinom{n}{m}\right)&#x3D;\frac{S_p(m)+S_p(n-m)-S_p(n)}{p-1}<br>$$<br>（$S_{p}(n)$ 表示 $n$ 在 $p$ 进制下的各位数的和）</p><h2 id="Lucas"><a href="#Lucas" class="headerlink" title="Lucas"></a>Lucas</h2><p>Lucas 定理内容如下：对于质数 $p$，有</p><p>$$<br>\binom{n}{m}\bmod p &#x3D; \binom{\left\lfloor n&#x2F;p \right\rfloor}{\left\lfloor m&#x2F;p\right\rfloor}\cdot\binom{n\bmod p}{m\bmod p}\bmod p<br>$$</p><p>观察上述表达式，可知 $n\bmod p$ 和 $m\bmod p$ 一定是小于 $p$ 的数，可以直接求解，$\displaystyle\binom{\left\lfloor n&#x2F;p \right\rfloor}{\left\lfloor m&#x2F;p\right\rfloor}$ 可以继续用 Lucas 定理求解。这也就要求 $p$ 的范围不能够太大，一般在 $10^5$ 左右。边界条件：当 $m&#x3D;0$ 的时候，返回 $1$。</p><p>时间复杂度为 $O(f(p) + g(n)\log n)$，其中 $f(n)$ 为预处理组合数的复杂度，$g(n)$ 为单次求组合数的复杂度。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">lucas</span><span class="params">(<span class="type">long</span> <span class="type">long</span> n, <span class="type">long</span> <span class="type">long</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">lucas</span>(n / mod, m / mod) * <span class="built_in">C</span>(n % mod, m % mod) % mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>exlucas</strong></p><p>模数是个合数，</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// to do</span></span><br></pre></td></tr></table></figure><h2 id="ExCrt"><a href="#ExCrt" class="headerlink" title="ExCrt"></a>ExCrt</h2><p>给定 $n$ 组非负整数 $a_i, b_i$ ，求解关于 $x$ 的方程组的最小非负整数解。<br>$$<br>\begin{cases}<br>x\equiv b_1\pmod{a_1}\<br>x\equiv b_2\pmod{a_2}\<br>\dots\<br>x\equiv b_n\pmod{a_n}<br>\end{cases}<br>$$<br>采用裴蜀定理计算求得通解，逐个合并求解，通解：$x_{0} + k \times mod$ </p><p>设两个方程分别是 $x\equiv a_1 \pmod {m_1}$、$x\equiv a_2 \pmod {m_2}$；</p><p>将它们转化为不定方程：$x&#x3D;m_1p+a_1&#x3D;m_2q+a_2$，其中 $p, q$ 是整数，则有 $m_1p-m_2q&#x3D;a_2-a_1$。</p><p>由<strong>裴蜀定理</strong>，当 $a_2-a_1$ 不能被 $\gcd(m_1,m_2)$ 整除时，无解；</p><p>其他情况下，可以通过<strong>扩展欧几里得算法</strong>解出来一组可行解 $(p, q)$；</p><p>则原来的两方程组成的模方程组的解为 $x\equiv b\pmod M$，其中 $b&#x3D;m_1p+a_1$，$M&#x3D;\text{lcm}(m_1, m_2)$。</p><p>多个方程用上面的方法两两合并即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span> = <span class="type">__int128_t</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> ExCrt &#123;</span><br><span class="line">    vector&lt;pair&lt;T, T&gt;&gt; EquationSet;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ExCrt</span>() &#123;&#125;</span><br><span class="line">    <span class="comment">// remain 和 mod 都是非负整数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">const</span> T&amp; remain, <span class="type">const</span> T&amp; mod)</span> </span>&#123;</span><br><span class="line">        EquationSet.<span class="built_in">push_back</span>(&#123; remain, mod &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">ExGcd</span><span class="params">(T a, T b, T&amp; x, T&amp; y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">            x = <span class="number">1</span>;</span><br><span class="line">            y = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">        T c = <span class="built_in">ExGcd</span>(b, a % b, y, x);</span><br><span class="line">        y -= (a / b) * x;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">(<span class="type">const</span> T&amp; val, <span class="type">const</span> T&amp; mod)</span> </span>&#123; <span class="comment">// 返回同余最小非负整数</span></span><br><span class="line">        T res = val % mod;</span><br><span class="line">        <span class="keyword">if</span> (res &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            res += mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 求同余的最小非负整数 无解返回 -1</span></span><br><span class="line">    <span class="function">T <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        T result = <span class="number">0</span>;</span><br><span class="line">        T mod = <span class="number">1</span>;</span><br><span class="line">        T x, y, r, g;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; [a, m] : EquationSet) &#123;</span><br><span class="line">            r = <span class="built_in">get</span>(a - result, m);</span><br><span class="line">            g = <span class="built_in">ExGcd</span>(mod, m, x, y);</span><br><span class="line">            <span class="keyword">if</span> (r % g != <span class="number">0</span>) &#123; <span class="comment">// 裴蜀定理</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 无解</span></span><br><span class="line">            &#125;</span><br><span class="line">            x = x * (r / g) % (m / g);</span><br><span class="line">            result += x * mod;</span><br><span class="line">            mod *= (m / g);</span><br><span class="line">            result = <span class="built_in">get</span>(result, mod);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EquationSet.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="ExBSGS"><a href="#ExBSGS" class="headerlink" title="ExBSGS"></a>ExBSGS</h2><p>求满足 $a^{x} \equiv b \quad (mod \quad p)$ 的最小非负整数解</p><p>考虑分块 $x &#x3D; i \times m - j$ 先枚举 $j$ 把结果放到哈希表中，再枚举 $i$ 查找结果（ $m &#x3D; \sqrt{p}$ ）</p><p>$a &lt; m, b &lt; m$ 不满足就先 $mod$ 一下。</p><p>对 $a,b,m\in\mathbf{Z}^+$，求解</p><p>$$<br>a^x\equiv b\pmod m<br>$$</p><p>其中 $a,m$ 不一定互质。</p><p>当 $(a, m)&#x3D;1$ 时，在模 $m$ 意义下 $a$ 存在逆元，因此可以使用 BSGS 算法求解。于是我们想办法让他们变得互质。</p><p>具体地，设 $d_1&#x3D;(a, m)$. 如果 $d_1\nmid b$，则原方程无解。否则我们把方程同时除以 $d_1$，得到</p><p>$$<br>\frac{a}{d_1}\cdot a^{x-1}\equiv \frac{b}{d_1}\pmod{\frac{m}{d_1}}<br>$$</p><p>如果 $a$ 和 $\frac{m}{d_1}$ 仍不互质就再除，设 $d_2&#x3D;\left(a, \frac{m}{d_1}\right)$. 如果 $d_2\nmid \frac{b}{d_1}$，则方程无解；否则同时除以 $d_2$ 得到</p><p>$$<br>\frac{a^2}{d_1d_2}\cdot a^{x-2}≡\frac{b}{d_1d_2} \pmod{\frac{m}{d_1d_2}}<br>$$</p><p>同理，这样不停的判断下去，直到 $a\perp \dfrac{m}{d_1d_2\cdots d_k}$.</p><p>记 $D&#x3D;\prod_{i&#x3D;1}^kd_i$，于是方程就变成了这样：</p><p>$$<br>\frac{a^k}{D}\cdot a^{x-k}\equiv\frac{b}{D} \pmod{\frac{m}{D}}<br>$$</p><p>由于 $a\perp\dfrac{m}{D}$，于是推出 $\dfrac{a^k}{D}\perp \dfrac{m}{D}$. 这样 $\dfrac{a^k}{D}$ 就有逆元了，于是把它丢到方程右边，这就是一个普通的 BSGS 问题了，于是求解 $x-k$ 后再加上 $k$ 就是原方程的解啦。</p><p>注意，不排除解小于等于 $k$ 的情况，所以在消因子之前做一下 $\Theta(k)$ 枚举，直接验证 $a^i\equiv b \pmod m$，这样就能避免这种情况。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T </span>= <span class="type">long</span> <span class="type">long</span>&gt;</span><br><span class="line"><span class="function">T <span class="title">quick_power</span><span class="params">(T a, T b, T p)</span> </span>&#123;</span><br><span class="line">    a %= p;</span><br><span class="line">    T res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            res = res * a % p;</span><br><span class="line">        &#125;</span><br><span class="line">        a = a * a % p;</span><br><span class="line">        b /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T </span>= <span class="type">long</span> <span class="type">long</span>&gt;</span><br><span class="line"><span class="function">T <span class="title">ExBSGS</span><span class="params">(T a, T b, T p)</span> </span>&#123;</span><br><span class="line">    a %= p;</span><br><span class="line">    b %= p;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">1</span> || p == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    T g, k = <span class="number">0</span>, A = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123; <span class="comment">// 使 a, p 互质</span></span><br><span class="line">        g = <span class="built_in">gcd</span>(a, p);</span><br><span class="line">        <span class="keyword">if</span> (g == <span class="number">1</span>) &#123; <span class="comment">// 已经互质</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (b % g != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 无解</span></span><br><span class="line">        &#125;</span><br><span class="line">        b /= g;</span><br><span class="line">        p /= g;</span><br><span class="line">        k += <span class="number">1</span>;</span><br><span class="line">        A = A * (a / g) % p;</span><br><span class="line">        <span class="keyword">if</span> (A == b) &#123;</span><br><span class="line">            <span class="keyword">return</span> k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    T m = <span class="built_in">sqrt</span>(p) + <span class="number">1</span>; <span class="comment">// 分块</span></span><br><span class="line">    unordered_map&lt;T, T&gt; f;</span><br><span class="line">    f[b] = <span class="number">0</span>;</span><br><span class="line">    T t = b;</span><br><span class="line">    <span class="keyword">for</span> (T j = <span class="number">1</span>; j &lt; m; j++) &#123;</span><br><span class="line">        t = t * a % p;</span><br><span class="line">        f[t] = j;</span><br><span class="line">    &#125;</span><br><span class="line">    T mi = <span class="built_in">quick_power</span>(a, m, p);</span><br><span class="line">    t = A; <span class="comment">// 更改 t </span></span><br><span class="line">    <span class="keyword">for</span> (T i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        t = t * mi % p;</span><br><span class="line">        <span class="keyword">if</span> (f.<span class="built_in">count</span>(t)) &#123;</span><br><span class="line">            <span class="keyword">return</span> i * m - f[t] + k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BSGS</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">quick_power</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span> p)</span></span>&#123;</span><br><span class="line">    a %= p;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>)&#123;</span><br><span class="line">            res = res * a % p;</span><br><span class="line">        &#125;</span><br><span class="line">        a = a * a % p;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// p 为 质数</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">BSGS</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span> p)</span> </span>&#123;</span><br><span class="line">    a %= p;</span><br><span class="line">    b %= p;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">1</span> &amp;&amp; p == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> m = <span class="built_in">sqrt</span>(p) + <span class="number">1</span>;</span><br><span class="line">    unordered_map&lt;<span class="type">long</span> <span class="type">long</span>, <span class="type">long</span> <span class="type">long</span>&gt; f;</span><br><span class="line">    f[b] = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> t = b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">        t = t * a % p;</span><br><span class="line">        f[t] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> am = <span class="built_in">quick_power</span>(a, m, p);</span><br><span class="line">    t = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        t = t * am % p;</span><br><span class="line">        <span class="keyword">if</span> (f.<span class="built_in">count</span>(t)) &#123;</span><br><span class="line">            <span class="keyword">return</span> i * m - f[t];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Primitive-root"><a href="#Primitive-root" class="headerlink" title="Primitive-root"></a>Primitive-root</h2><p>满足同余式 $a^n \equiv 1 \pmod m$ 的最小正整数 $n$ 存在，这个 $n$ 称作 $a$ 模 $m$ 的阶，记作 $\delta_m(a)$ 或 $\operatorname{ord}_m(a)$.</p><p><strong>性质</strong></p><ol><li>$a,a^2,\cdots,a^{\delta_m(a)}$ 模 $m$ 两两不同余。</li><li>若 $a^n \equiv 1 \pmod m$，则 $\delta_m(a)\mid n$.</li><li>设 $m\in\mathbf{N}^{*}$，$a,b\in\mathbf{Z}$，$(a,m)&#x3D;(b,m)&#x3D;1$，则 $\delta_m(ab)&#x3D;\delta_m(a)\delta_m(b)$ 的充分必要条件是 $\left(\delta_m(a), \delta_m(b)\right)&#x3D;1$ </li><li>设 $k \in \mathbf{N}$，$m\in \mathbf{N}^{*}$，$a\in\mathbf{Z}$，$(a,m)&#x3D;1$，则 $\delta_m(a^k)&#x3D;\dfrac{\delta_m(a)}{\left(\delta_m(a),k\right)}$</li></ol><p>设 $m \in \mathbf{N}^{<em>}$，$g\in \mathbf{Z}$. 若 $(g,m)&#x3D;1$，且 $\delta_m(g)&#x3D;\varphi(m)$，则称 $g$ 为模 $m$ 的原根。<br>即 $g$ 满足 $\delta_m(g) &#x3D; \left| \mathbf{Z}_m^</em> \right| &#x3D; \varphi(m)$. 当 $m$ 是质数时，我们有 $g^i \bmod m,,0 \lt i \lt m$ 的结果互不相同。</p><p><strong>原根判定定理</strong></p><p>设 $m \geqslant 3, (g,m)&#x3D;1$，则 $g$ 是模 $m$ 的原根的充要条件是，对于 $\varphi(m)$ 的每个素因数 $p$，都有 $g^{\frac{\varphi(m)}{p}}\not\equiv 1\pmod m$.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果有原根，在 p^0.25 就能找到 复杂度 (p^0.25 * log(phi(p))) 最小原根</span></span><br><span class="line"><span class="keyword">auto</span> findPrimitiveRoot = [&amp;](<span class="type">long</span> <span class="type">long</span> p) -&gt; <span class="type">long</span> <span class="type">long</span> &#123;</span><br><span class="line">    <span class="keyword">auto</span> factors = <span class="built_in">factorize</span>(phi[p]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> i = <span class="number">1</span>; i &lt; p; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">power</span>(i, phi[p], p) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> f : factors) &#123; <span class="comment">// phi[p] 的所有因子</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">power</span>(i, phi[p] / f, p) == <span class="number">1</span>) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>原根存在定理</strong></p><p> 一个数 $m$ 存在原根当且仅当 $m&#x3D;2,4,p^{\alpha},2p^{\alpha}$，其中 $p$ 为奇素数，$\alpha\in \mathbf{N}^{*}$.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断 [0, n] 内的数有无 primitive root (n &gt;= 4) </span></span><br><span class="line"><span class="comment">// 有原根的类型 2, 4, p^a, 2*p^a (p 为奇质数)</span></span><br><span class="line"><span class="keyword">auto</span> haveRoot = [&amp;](<span class="type">long</span> <span class="type">long</span> n) -&gt; vector&lt;<span class="type">int</span>&gt; &#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; <span class="built_in">have</span>(n + <span class="number">1</span>);</span><br><span class="line">    have[<span class="number">2</span>] = <span class="literal">true</span>;</span><br><span class="line">    have[<span class="number">4</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; primes.<span class="built_in">size</span>(); i++) &#123; <span class="comment">// p^a, 2*p^a 都有原根 (p 为奇质数)</span></span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> cur = primes[i];</span><br><span class="line">        <span class="keyword">while</span> (cur &lt;= n) &#123;</span><br><span class="line">            have[cur] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (cur * <span class="number">2</span> &lt;= n) &#123;</span><br><span class="line">                have[cur * <span class="number">2</span>] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur *= primes[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> have;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">auto</span> have = <span class="built_in">haveRoot</span>(N);</span><br></pre></td></tr></table></figure><p><strong>原根个数</strong></p><p>若一个数 $m$ 有原根，则它原根的个数为 $\varphi(\varphi(m))$.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// phi(p) * log(p) 时间算所有原根 最小原根 g ，所有原根 g^k % p (gcd(k, phi(p)) == 1)</span></span><br><span class="line"><span class="keyword">auto</span> allPrimitiveRoot = [&amp;](<span class="type">long</span> <span class="type">long</span> p) -&gt; vector&lt;<span class="type">int</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">auto</span> rt = <span class="built_in">findPrimitiveRoot</span>(p);</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; root;</span><br><span class="line">    root.<span class="built_in">push_back</span>(rt);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> x = rt;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; phi[p]; i++) &#123;</span><br><span class="line">        x = x * rt % p;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">gcd</span>(i, phi[p]) == <span class="number">1</span>) &#123;</span><br><span class="line">            root.<span class="built_in">push_back</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(root.<span class="built_in">begin</span>(), root.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 最终 phi(phi(p)) 个</span></span><br></pre></td></tr></table></figure><h2 id="Sqrt-decomposition"><a href="#Sqrt-decomposition" class="headerlink" title="Sqrt-decomposition"></a>Sqrt-decomposition</h2><p><strong>引理</strong><br>$$<br>\forall a,b,c\in\mathbb{Z},\left\lfloor\frac{a}{bc}\right\rfloor&#x3D;\left\lfloor\frac{\left\lfloor\frac{a}{b}\right\rfloor}{c}\right\rfloor<br>$$</p><p><strong>结论</strong></p><p>对于常数 $n$，使得式子<br>$$<br>\left\lfloor\dfrac ni\right\rfloor&#x3D;\left\lfloor\dfrac nj\right\rfloor<br>$$</p><p>成立且满足 $i\leq j\leq n$ 的 $j$ 值最大为 $\left\lfloor\dfrac n{\lfloor\frac ni\rfloor}\right\rfloor$，即值 $\left\lfloor\dfrac ni\right\rfloor$ 所在块的<strong>右端点</strong>为 $\left\lfloor\dfrac n{\lfloor\frac ni\rfloor}\right\rfloor$。</p><p>（$i$ 不是第几块，而是下标）</p><p><strong>向上取整</strong> </p><p>向上取整与前文所述的向下取整十分类似，但略有区别：</p><p>对于常数 $n$，使得式子</p><p>$$<br>\left\lceil\dfrac ni\right\rceil&#x3D;\left\lceil\dfrac nj\right\rceil<br>$$</p><p>成立且满足 $i\leq j\leq n$ 的 $j$ 值最大为 $\left\lfloor\dfrac{n-1}{\lfloor\frac{n-1}i\rfloor}\right\rfloor$，即值 $\left\lceil\dfrac ni\right\rceil$ 所在块的右端点为 $\left\lfloor\dfrac{n-1}{\lfloor\frac{n-1}i\rfloor}\right\rfloor$。</p><p>当 $i&#x3D;n$ 时，上式会出现分母为 $0$ 的错误，<strong>需要特殊处理</strong>。</p><p>证明：$\left\lceil\dfrac ni\right\rceil&#x3D;\left\lfloor\dfrac{n-1}i\right\rfloor+1$，可以发现 $n$ 的上取整分块与 $n-1$ 的下取整分块是一样的。</p><h2 id="Mobius"><a href="#Mobius" class="headerlink" title="Mobius"></a>Mobius</h2><p>$$<br>f(n) &#x3D; \sum\limits_{d \mid n} g(d) \<br>g(n) &#x3D; \sum\limits_{d \mid n} \mu(d) f(\frac{n}{d})<br>$$</p><p>数论函数 $f(n)$ 称为数论函数 $g(n)$ 的莫比乌斯变换</p><p>数论函数 $g(n)$ 称为数论函数 $f(n)$ 的莫比乌斯逆变换（反演）</p><p>反演结论：<br>$$<br>\sum\limits_{d \mid gcd(i, j)} \mu(d) &#x3D; [gcd(i, j) &#x3D; 1]<br>$$</p><h2 id="Linear-sieves"><a href="#Linear-sieves" class="headerlink" title="Linear sieves"></a>Linear sieves</h2><h3 id="sieve-primes"><a href="#sieve-primes" class="headerlink" title="sieve primes"></a>sieve primes</h3><p>每个质数被其最小的因子删除</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [2, n] 内的质数</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">linear_sieves</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vis</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j = <span class="number">0</span>; j &lt; res.<span class="built_in">size</span>() &amp;&amp; i * res[j] &lt;= n; j++)&#123;</span><br><span class="line">            vis[i * res[j]] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % res[j] == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sieve-divisors"><a href="#sieve-divisors" class="headerlink" title="sieve divisors"></a>sieve divisors</h3><p><img src="/../../../images/ACM/divisor.png" alt="divisor"></p><p>$w(n)$ 表示质因子最多的个数</p><p>$d(n)$ 表示约数最多的个数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求 [0, n) 某个数的约数 </span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Divisor</span> &#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; p, v;</span><br><span class="line">    <span class="built_in">Divisor</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        v.<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!v[i]) &#123;</span><br><span class="line">                v[i] = i;</span><br><span class="line">                p.<span class="built_in">push_back</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; p.<span class="built_in">size</span>() &amp;&amp; i * p[j] &lt; n; j++) &#123;</span><br><span class="line">                v[i * p[j]] = p[j];</span><br><span class="line">                <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">auto</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">div</span><span class="params">(<span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">while</span> (x &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> l = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> r = div.<span class="built_in">size</span>();</span><br><span class="line">            <span class="type">int</span> d = v[x];</span><br><span class="line">            <span class="keyword">while</span> (x % d == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt; r; i++) &#123;</span><br><span class="line">                    div.<span class="built_in">push_back</span>(div[i] * d);</span><br><span class="line">                &#125;</span><br><span class="line">                x /= d;</span><br><span class="line">                l = r;</span><br><span class="line">                r = div.<span class="built_in">size</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> div; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="sieve-count-of-divisors"><a href="#sieve-count-of-divisors" class="headerlink" title="sieve count of divisors"></a>sieve count of divisors</h3><p>$$<br>唯一分解定理 \quad x &#x3D; \prod_{i &#x3D; 1}^{n} p_{i}^{k_{i}} \quad<br>$$</p><p>$$<br>乘法原理 \quad 约数个数 &#x3D; \prod_{i &#x3D; 1}^{n}(k_{i} + 1)<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [1, n] 约数个数</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sieve_divisors</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; primes;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cnt</span><span class="params">(n + <span class="number">1</span>, <span class="number">1</span>)</span>, <span class="title">p</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">vis</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">            primes.<span class="built_in">push_back</span>(i);</span><br><span class="line">            cnt[i] = <span class="number">2</span>;</span><br><span class="line">            p[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; primes.<span class="built_in">size</span>() &amp;&amp; i * primes[j] &lt;= n; j++) &#123;</span><br><span class="line">            <span class="type">int</span> val = i * primes[j];</span><br><span class="line">            vis[val] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % primes[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                p[val] = p[i] + <span class="number">1</span>;</span><br><span class="line">                cnt[val] = cnt[i] / (p[i] + <span class="number">1</span>) * (p[val] + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p[val] = <span class="number">1</span>;</span><br><span class="line">                cnt[val] = cnt[i] * (p[val] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sieve-sum-of-divisors"><a href="#sieve-sum-of-divisors" class="headerlink" title="sieve sum of divisors"></a>sieve sum of divisors</h3><p>$$<br>sum &#x3D; \prod\limits_{i &#x3D; 1}^{n} \sum\limits_{j &#x3D; 0}^{k_{i}} p_{i}^{j}<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; pri;</span><br><span class="line"><span class="type">bool</span> not_prime[N];</span><br><span class="line"><span class="type">int</span> g[N], f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pre</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">  g[<span class="number">1</span>] = f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!not_prime[i]) &#123;</span><br><span class="line">      pri.<span class="built_in">push_back</span>(i);</span><br><span class="line">      g[i] = i + <span class="number">1</span>;</span><br><span class="line">      f[i] = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> pri_j : pri) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i * pri_j &gt; n) <span class="keyword">break</span>;</span><br><span class="line">      not_prime[i * pri_j] = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">if</span> (i % pri_j == <span class="number">0</span>) &#123;</span><br><span class="line">        g[i * pri_j] = g[i] * pri_j + <span class="number">1</span>;</span><br><span class="line">        f[i * pri_j] = f[i] / g[i] * g[i * pri_j];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      f[i * pri_j] = f[i] * f[pri_j];</span><br><span class="line">      g[i * pri_j] = <span class="number">1</span> + pri_j;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sieve-euler-function"><a href="#sieve-euler-function" class="headerlink" title="sieve euler function"></a>sieve euler function</h3><p>注意到在线性筛中，每一个合数都是被最小的质因子筛掉。比如设 $p_1$ 是 $n$ 的最小质因子，$n’ &#x3D; \frac{n}{p_1}$，那么线性筛的过程中 $n$ 通过 $n’ \times p_1$ 筛掉。</p><p>观察线性筛的过程，我们还需要处理两个部分，下面对 $n’ \bmod p_1$ 分情况讨论。</p><p>如果 $n’ \bmod p_1 &#x3D; 0$，那么 $n’$ 包含了 $n$ 的所有质因子。</p><p>$$<br>\begin{aligned}<br>\varphi(n) &amp; &#x3D; n \times \prod_{i &#x3D; 1}^s{\frac{p_i - 1}{p_i}} \\<br>&amp; &#x3D; p_1 \times n’ \times \prod_{i &#x3D; 1}^s{\frac{p_i - 1}{p_i}} \\<br>&amp; &#x3D; p_1 \times \varphi(n’)<br>\end{aligned}<br>$$</p><p>那如果 $n’ \bmod p_1 \neq 0$ 呢，这时 $n’$ 和 $p_1$ 是互质的，根据欧拉函数性质，我们有：</p><p>$$<br>\begin{aligned}<br>\varphi(n) &amp; &#x3D; \varphi(p_1) \times \varphi(n’) \\<br>&amp; &#x3D; (p_1 - 1) \times \varphi(n’)<br>\end{aligned}<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [0, n] 欧拉函数 (n &gt;= 1)</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sieve_euler_func</span><span class="params">(<span class="type">long</span> <span class="type">long</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">phi</span><span class="params">(n + <span class="number">1</span>)</span>, primes</span>;</span><br><span class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!phi[i]) &#123;</span><br><span class="line">            phi[i] = i - <span class="number">1</span>;</span><br><span class="line">            primes.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; p : primes) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i * p &gt; n) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i % p == <span class="number">0</span>) &#123;</span><br><span class="line">                phi[i * p] = phi[i] * p;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            phi[i * p] = phi[i] * phi[p];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> phi;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="sieve-mobius"><a href="#sieve-mobius" class="headerlink" title="sieve mobius"></a>sieve mobius</h3><p>$$<br>\mu (n)&#x3D;<br>\begin{cases}<br>1 \quad \quad \quad n &#x3D; 1 \<br>0 \quad \quad \quad n \ 含有平方因子 \<br>{(-1)}^{k} \quad k \ 为 \ n \ 本质不同的质因子个数<br>\end{cases}<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [0, n] 莫比乌斯函数</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mobius</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mu</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">vis</span><span class="params">(n + <span class="number">1</span>)</span>, primes</span>;</span><br><span class="line">    mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">            mu[i] = <span class="number">-1</span>;</span><br><span class="line">            vis[i] = <span class="literal">true</span>;</span><br><span class="line">            primes.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; p : primes) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i * p &gt; n) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            vis[i * p] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % p == <span class="number">0</span>) &#123;</span><br><span class="line">                mu[i * p] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mu[i * p] = -mu[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mu;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="杜教筛"><a href="#杜教筛" class="headerlink" title="杜教筛"></a>杜教筛</h2><p>求数论函数前缀和 $S(n) &#x3D; \sum\limits_{i &#x3D; 1}^{n} f(i)$</p><p>任意数论函数 $g$，必满足：<br>$$<br>\begin{align}<br>\sum\limits_{i &#x3D; 1}^{n} (f * g)(i) &amp;&#x3D; \sum\limits_{i &#x3D; 1}^{n} \sum\limits_{d \mid i} g(d) f(\frac{i}{d}) \<br>&amp;&#x3D; \sum\limits_{i &#x3D; 1}^{n} \sum_{ji &#x3D; 1}^{n} g(i) f(j) \<br>&amp;&#x3D; \sum\limits_{i &#x3D; 1}^{n} \sum_{j &#x3D; 1}^{\lfloor \frac{n}{i} \rfloor} g(i) f(j) \<br>&amp;&#x3D; \sum\limits_{i &#x3D; 1}^{n} g(i) \sum_{j &#x3D; 1}^{\lfloor \frac{n}{i} \rfloor} f(j) \<br>&amp;&#x3D; \sum\limits_{i &#x3D; 1}^{n} g(i) S(\lfloor \frac{n}{i} \rfloor)<br>\end{align}<br>$$<br>分离出首项：$g(1)S(n) &#x3D; \sum\limits_{i &#x3D; 1}^{n} (f * g)(i) - \sum\limits_{i &#x3D; 2}^{n} g(i) S(\lfloor \frac{n}{i} \rfloor)$</p><p>对于 $S(n)$ ，先预处理出 $S(m)$ 再计算，当 $m &#x3D; n^{\frac{2}{3}}$ 时，复杂度最优 $O(n^{\frac{2}{3}})$</p><p>对于 $g$ 的构造需要能 $O(1)$ 计算 $\sum\limits_{i &#x3D; 1}^{n} (f * g) (i)$ 和 $\sum\limits_{i &#x3D; 1}^{n} g(i)$ </p><p>求 $\sum\limits_{i &#x3D; 1}^{n} \varphi(i)$</p><p>因为 $\varphi * 1 &#x3D; id$ ，构造 $g &#x3D; 1$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">1</span> &lt;&lt; <span class="number">20</span>; <span class="comment">// (2E9 1s)</span></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; phi;</span><br><span class="line">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; sphi;</span><br><span class="line">unordered_map&lt;<span class="type">long</span> <span class="type">long</span>, <span class="type">long</span> <span class="type">long</span>&gt; fphi;</span><br><span class="line"></span><br><span class="line">phi = <span class="built_in">euler</span>(N);</span><br><span class="line">sphi.<span class="built_in">assign</span>(N + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">    sphi[i] = sphi[i - <span class="number">1</span>] + phi[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">getSphi</span><span class="params">(<span class="type">long</span> <span class="type">long</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= N) &#123;</span><br><span class="line">        <span class="keyword">return</span> sphi[n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fphi.<span class="built_in">count</span>(n)) &#123; <span class="comment">// 记忆化</span></span><br><span class="line">        <span class="keyword">return</span> fphi[n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res = n * (n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> l = <span class="number">2</span>, r = <span class="number">2</span>; l &lt;= n; l = r + <span class="number">1</span>) &#123;</span><br><span class="line">        r = n / (n / l);</span><br><span class="line">        res -= (r - l + <span class="number">1</span>) * <span class="built_in">getSphi</span>(n / l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fphi[n] = res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求 $S(n) &#x3D; \sum_{i &#x3D; 1}^{n} \mu(i)$</p><p>因为 $\mu * 1 &#x3D; \varepsilon$，构造 $g &#x3D; 1$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; mu;</span><br><span class="line">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; smu;</span><br><span class="line">unordered_map&lt;<span class="type">long</span> <span class="type">long</span>, <span class="type">long</span> <span class="type">long</span>&gt; fmu;</span><br><span class="line"></span><br><span class="line">mu = <span class="built_in">mobius</span>(N);</span><br><span class="line">smu.<span class="built_in">assign</span>(N + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">    smu[i] = smu[i - <span class="number">1</span>] + mu[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">getSmu</span><span class="params">(<span class="type">long</span> <span class="type">long</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= N) &#123;</span><br><span class="line">        <span class="keyword">return</span> smu[n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fmu.<span class="built_in">count</span>(n)) &#123;</span><br><span class="line">        <span class="keyword">return</span> fmu[n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res = <span class="number">1</span>; <span class="comment">// 单位元前缀和 1  !!!</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> l = <span class="number">2</span>, r = <span class="number">2</span>; l &lt;= n; l = r + <span class="number">1</span>) &#123;</span><br><span class="line">        r = n / (n / l);</span><br><span class="line">        res -= (r - l + <span class="number">1</span>) * <span class="built_in">getSmu</span>(n / l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fmu[n] = res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Min25"><a href="#Min25" class="headerlink" title="Min25"></a>Min25</h2><p>求<strong>积性函数</strong>前缀和。<br>$$<br>\sum_{i &#x3D; 1}^{n} &#x3D; f(i)<br>$$<br>限制：</p><ol><li>$f(p)$ 是关于 $p$ 的项数较少的多项式或可以快速求值。</li><li>$f(p^{c})$ 可以快速求值。</li></ol><p>记号：</p><ol><li>$\Rho$ 表示全体质数集合  </li><li>$p_{i}$ 表示第 $i$ 个质数，特别的 $p_{0} &#x3D; 0$</li><li>$minp(i)$ 表示 $i$ 的最小质因子，特别的 $minp(1) &#x3D; 1$</li></ol><p><strong>第一部分</strong></p><p>设一个<strong>完全积性函数</strong> $F(x)$ ，要求 $F(p) &#x3D; f(p)$ 。</p><p>构造一个函数 $G(n, j) &#x3D; \sum\limits_{i &#x3D; 1}^{n} F(i) [i \in \Rho ~ or ~ p_{j} &lt; minp(i)]$ 。</p><p>考虑求解函数 $G(n, j)$ ：</p><ol><li><p>$p_{j}^{2} &gt; n$ 时（$p_{j} &gt; \sqrt{n}$）</p><p>$G(n, j) &#x3D; G(n, j - 1)$ </p></li><li><p>$p_{j}^{2} \le n$ 时（$p_{j} \le \sqrt{n}$）</p></li></ol><p>将 $i$ 分解成 $p_{j} \times k$，$G(n, j)$ 到 $  G(n, j - 1)$ 要加上的贡献为 $\sum\limits_{k &#x3D; p_{j}}^{\lfloor \frac{n}{p_{j}} \rfloor} F(kp_{j}) [p_{j} \le minp(k)]$ 。</p><p>由于 $F(x)$ 为<strong>完全积性函数</strong>，$\sum\limits_{k &#x3D; p_{j}}^{\lfloor \frac{n}{p_{j}} \rfloor} F(kp_{j}) [p_{j} \le minp(k)] &#x3D; F(p_{j}) \sum\limits_{k &#x3D; p_{j}}^{\lfloor \frac{n}{p_{j}} \rfloor} F(k) [p_{j} \le minp(k)]$ 。</p><p>其中 $\sum\limits_{k &#x3D; p_{j}}^{\lfloor \frac{n}{p_{j}} \rfloor} F(k) [p_{j} \le minp(k)] &#x3D; G(\lfloor \frac{n}{p_{j}} \rfloor, j - 1) - \sum\limits_{i &#x3D; 1}^{j - 1} F(p_{i})$ 。</p><p>故 $G(n, j)$ 的递推式为：<br>$$<br>G(n, j) &#x3D; \left{<br>\begin{align}<br> &amp; G(n, j - 1) &amp; p_{j}^{2} &gt; n \<br> &amp; G(n, j - 1) - F(p_{j}) (G(\lfloor \frac{n}{p_{j}} \rfloor, j - 1) - \sum\limits_{i &#x3D; 1}^{j - 1} F(p_{i})) &amp; otherwise<br>\end{align}<br>\right.<br>$$<br>这样就能递归求解 $G$ 。</p><p><strong>第二部分</strong></p><p>构造 $S(n, j) &#x3D; \sum\limits_{i &#x3D; 1}^{n} f(i) [p_{j} &lt; minp(i)]$ 。</p><p>把 $i$ 分成质数和合数讨论 (1 单独算)</p><p><strong>质数贡献</strong>：</p><p>$\sum\limits_{p \in \Rho \wedge p \le n} f(p) - \sum\limits_{i &#x3D; 1}^{j} f(p_{i}) &#x3D; G(n, +\infty) - \sum\limits_{i &#x3D; 1}^{j} f(p_{i})$ </p><p><strong>合数贡献</strong>：</p><p>$\sum\limits_{k &gt; j}^{+\infty} \sum\limits_{i &#x3D; 1}^{p_{k}^{i} \le n} f(p_{k}^{i}) (S(\lfloor \frac{n}{p_{k}^{i}} \rfloor, k) + [i &gt; 1])$ </p><p>综上：<br>$$<br>S(n, j) &#x3D; G(n, +\infty) - \sum\limits_{i &#x3D; 1}^{j} f(p_{i}) + \sum\limits_{k &gt; j}^{+\infty} \sum\limits_{i &#x3D; 1}^{p_{k}^{i} \le n} f(p_{k}^{i}) (S(\lfloor \frac{n}{p_{k}^{i}} \rfloor, k) + [i &gt; 1])<br>$$</p><p>$$<br>\sum_{i &#x3D; 1}^{n} f(i) &#x3D; S(n, 0) + 1<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    求一个多项式的前缀和 poly f = a_0 + a_1 * x + ... + a_n * x_n</span></span><br><span class="line"><span class="comment">    每一项分开单独求</span></span><br><span class="line"><span class="comment">    f(p) = a * p^&#123;k&#125; =&gt; f&#x27;(p) = p^&#123;k&#125;</span></span><br><span class="line"><span class="comment">    拆系数，最后结果乘 a 即可</span></span><br><span class="line"><span class="comment">    对于 p^&#123;k&#125; 需要求 \sum\limits_&#123;i = 2&#125;^&#123;n&#125; i^&#123;k&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">int64_t</span>;</span><br><span class="line"></span><br><span class="line">i64 n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">i64 lim = <span class="built_in">sqrt</span>(n * <span class="number">4</span>);</span><br><span class="line">vector&lt;i64&gt; p = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="function">vector&lt;i64&gt; <span class="title">vis</span><span class="params">(lim + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (i64 i = <span class="number">2</span>; i &lt;= lim; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">        p.<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i64 j = <span class="number">1</span>; j &lt; p.<span class="built_in">size</span>() &amp;&amp; i * p[j] &lt;= lim; j++) &#123;</span><br><span class="line">        vis[i * p[j]] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">vector&lt;i64&gt; <span class="title">pos</span><span class="params">(lim + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function">vector&lt;i64&gt; <span class="title">idxless</span><span class="params">(lim + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function">vector&lt;i64&gt; <span class="title">idxgreater</span><span class="params">(lim + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function">vector&lt;i64&gt; <span class="title">g0</span><span class="params">(lim + <span class="number">1</span>, <span class="number">0</span>)</span></span>; <span class="comment">// 0 次项 ，1 次 ... k 次</span></span><br><span class="line"><span class="keyword">for</span> (i64 l = <span class="number">1</span>, r, i = <span class="number">1</span>; l &lt;= n; l = r + <span class="number">1</span>, i++) &#123;</span><br><span class="line">    pos[i] = n / l;</span><br><span class="line">    <span class="keyword">if</span> (pos[i] &lt;= lim) &#123;</span><br><span class="line">        idxless[pos[i]] = i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        idxgreater[n / pos[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    r = n / (n / l);</span><br><span class="line">    <span class="comment">// 这里计算 \sum\limits_&#123;i = 2&#125;^&#123;n / l&#125; i^&#123;k&#125;</span></span><br><span class="line">    g0[i] = pos[i] - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    gk[i] = \sum\limits_&#123;i = 2&#125;^&#123;n / l&#125; i^&#123;k&#125;; (伯努利数)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> idx = [&amp;](i64 x) -&gt; i64 &#123;</span><br><span class="line">    <span class="keyword">return</span> x &lt;= lim ? idxless[x] : idxgreater[n / x];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i64 j = <span class="number">1</span>; j &lt; p.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (i64 i = <span class="number">1</span>; i &lt;= lim &amp;&amp; p[j] * p[j] &lt;= pos[i]; i++) &#123;</span><br><span class="line">        g0[i] -= <span class="built_in">power</span>(p[j], <span class="number">0</span>) * (g0[<span class="built_in">idx</span>(pos[i] / p[j])] - g0[<span class="built_in">idx</span>(p[j - <span class="number">1</span>])]);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        gk[i] -= power(p[j], k) * (gk[idx(pos[i] / p[j])] - gk[idx(p[j - 1])]);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// f(p^&#123;k&#125;) 求解</span></span><br><span class="line"><span class="keyword">auto</span> f = [&amp;](i64 p, i64 k) -&gt; i64 &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="comment">/* to fill*/</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> sum = [&amp;](<span class="keyword">auto</span> sum, i64 n, i64 c) -&gt; i64 &#123;</span><br><span class="line">    <span class="keyword">if</span> (p[c] &gt;= n) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    i64 res = <span class="number">0</span>;</span><br><span class="line">    res += a0 * (g0[<span class="built_in">idx</span>(n)] - g0[<span class="built_in">idx</span>(p[c])]);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    res += ak * (gk[idx(n)] - gk[idx(p[c])]); // ak 为 所求多项式系数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">for</span> (i64 i = c + <span class="number">1</span>; i &lt; p.<span class="built_in">size</span>() &amp;&amp; p[i] * p[i] &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (i64 j = <span class="number">1</span>, x = p[i]; x * p[i] &lt;= n; j++, x *= p[i]) &#123;</span><br><span class="line">            res += <span class="built_in">f</span>(x, j) * <span class="built_in">sum</span>(sum, n / x, i) + <span class="built_in">f</span>(x * p[i], j + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// ans = sum(sum, n, 0) + 1;</span></span><br></pre></td></tr></table></figure><p>例如</p><p>给定 $f(p^{k}) &#x3D; p^{k} (p^{k} - 1)$</p><p>拆成两部分 $f(p^{k}) &#x3D; p^{2k}$ 和 $f(p^{k}) &#x3D; p^{k}$ 计算差值</p><p>$f_{1}(x) &#x3D; -x \quad f_2(x) &#x3D; x^{2}$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g1 = n * (n + <span class="number">1</span>) / <span class="number">2</span> - <span class="number">1</span>; <span class="comment">// 系数 -1</span></span><br><span class="line">g2 = n * (n + <span class="number">1</span>) * (n * <span class="number">2</span> + <span class="number">1</span>) / <span class="number">2</span> - <span class="number">1</span>; <span class="comment">// 系数 1</span></span><br><span class="line"><span class="comment">// 系数在求 sum 处乘</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> Template </category>
          
          <category> Number theory </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Graph</title>
      <link href="/2024/06/14/ACM/Template/Graph/"/>
      <url>/2024/06/14/ACM/Template/Graph/</url>
      
        <content type="html"><![CDATA[<h1 id="Graph"><a href="#Graph" class="headerlink" title="Graph"></a>Graph</h1><h2 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h2><h3 id="树链剖分"><a href="#树链剖分" class="headerlink" title="树链剖分"></a>树链剖分</h3><h4 id="重链剖分"><a href="#重链剖分" class="headerlink" title="重链剖分"></a>重链剖分</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get fa, siz, dep, son</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt;  <span class="title">fa</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">siz</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">dep</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">son</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">auto</span> dfs = [&amp;](<span class="keyword">auto</span> self, <span class="type">int</span> u, <span class="type">int</span> f) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">    <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">    fa[u] = f;</span><br><span class="line">    siz[u] = <span class="number">1</span>;</span><br><span class="line">    dep[u] = dep[f] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; v : tree[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v != f) &#123;</span><br><span class="line">            <span class="built_in">self</span>(self, v, u);</span><br><span class="line">            siz[u] += siz[v];</span><br><span class="line">            <span class="keyword">if</span> (siz[v] &gt; siz[s]) &#123;</span><br><span class="line">                s = v;</span><br><span class="line">                son[u] = s;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">dfs</span>(dfs, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// get dfn, top</span></span><br><span class="line"><span class="type">int</span> id = <span class="number">0</span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">top</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">dfn</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">auto</span> get = [&amp;](<span class="keyword">auto</span> self, <span class="type">int</span> u, <span class="type">int</span> t) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">    top[u] = t;</span><br><span class="line">    dfn[u] = ++id;</span><br><span class="line">    <span class="keyword">if</span> (son[u]) &#123;</span><br><span class="line">        <span class="built_in">self</span>(self, son[u], t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; v : tree[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v != fa[u] &amp;&amp; v != son[u]) &#123;</span><br><span class="line">            <span class="built_in">self</span>(self, v, v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">get</span>(get, <span class="number">1</span>, <span class="number">1</span>);<span class="comment">// t = 1</span></span><br></pre></td></tr></table></figure><p><strong>author: Jiangly</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">HLD</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; siz, top, dep, parent, in, out, seq;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; adj;</span><br><span class="line">    <span class="type">int</span> cur;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">HLD</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">HLD</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        siz.<span class="built_in">resize</span>(n);</span><br><span class="line">        top.<span class="built_in">resize</span>(n);</span><br><span class="line">        dep.<span class="built_in">resize</span>(n);</span><br><span class="line">        parent.<span class="built_in">resize</span>(n);</span><br><span class="line">        in.<span class="built_in">resize</span>(n);</span><br><span class="line">        out.<span class="built_in">resize</span>(n);</span><br><span class="line">        seq.<span class="built_in">resize</span>(n);</span><br><span class="line">        cur = <span class="number">0</span>;</span><br><span class="line">        adj.<span class="built_in">assign</span>(n, &#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        adj[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        adj[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">(<span class="type">int</span> root = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        top[root] = root;</span><br><span class="line">        dep[root] = <span class="number">0</span>;</span><br><span class="line">        parent[root] = <span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">dfs1</span>(root);</span><br><span class="line">        <span class="built_in">dfs2</span>(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (parent[u] != <span class="number">-1</span>) &#123;</span><br><span class="line">            adj[u].<span class="built_in">erase</span>(std::<span class="built_in">find</span>(adj[u].<span class="built_in">begin</span>(), adj[u].<span class="built_in">end</span>(), parent[u]));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        siz[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;v : adj[u]) &#123;</span><br><span class="line">            parent[v] = u;</span><br><span class="line">            dep[v] = dep[u] + <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">dfs1</span>(v);</span><br><span class="line">            siz[u] += siz[v];</span><br><span class="line">            <span class="keyword">if</span> (siz[v] &gt; siz[adj[u][<span class="number">0</span>]]) &#123;</span><br><span class="line">                std::<span class="built_in">swap</span>(v, adj[u][<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        in[u] = cur++;</span><br><span class="line">        seq[in[u]] = u;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) &#123;</span><br><span class="line">            top[v] = v == adj[u][<span class="number">0</span>] ? top[u] : v;</span><br><span class="line">            <span class="built_in">dfs2</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">        out[u] = cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (top[u] != top[v]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dep[top[u]] &gt; dep[top[v]]) &#123;</span><br><span class="line">                u = parent[top[u]];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                v = parent[top[v]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dep[u] &lt; dep[v] ? u : v;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dist</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dep[u] + dep[v] - <span class="number">2</span> * dep[<span class="built_in">lca</span>(u, v)];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">jump</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[u] &lt; k) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> d = dep[u] - k;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (dep[top[u]] &gt; d) &#123;</span><br><span class="line">            u = parent[top[u]];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> seq[in[u] - dep[u] + d];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isAncester</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> in[u] &lt;= in[v] &amp;&amp; in[v] &lt; out[u];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rootedParent</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        std::<span class="built_in">swap</span>(u, v);</span><br><span class="line">        <span class="keyword">if</span> (u == v) &#123;</span><br><span class="line">            <span class="keyword">return</span> u;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">isAncester</span>(u, v)) &#123;</span><br><span class="line">            <span class="keyword">return</span> parent[u];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> it = std::<span class="built_in">upper_bound</span>(adj[u].<span class="built_in">begin</span>(), adj[u].<span class="built_in">end</span>(), v, [&amp;](<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">            <span class="keyword">return</span> in[x] &lt; in[y];</span><br><span class="line">        &#125;) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> *it;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rootedSize</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == v) &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">isAncester</span>(v, u)) &#123;</span><br><span class="line">            <span class="keyword">return</span> siz[v];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n - siz[<span class="built_in">rootedParent</span>(u, v)];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rootedLca</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">lca</span>(a, b) ^ <span class="built_in">lca</span>(b, c) ^ <span class="built_in">lca</span>(c, a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="LCA"><a href="#LCA" class="headerlink" title="LCA"></a>LCA</h3><h4 id="O-log"><a href="#O-log" class="headerlink" title="O(log)"></a>O(log)</h4><h5 id="倍增"><a href="#倍增" class="headerlink" title="倍增"></a>倍增</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">STLCA</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, m, root;</span><br><span class="line">    vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; dep;</span><br><span class="line">    vector&lt;vector&lt;pair&lt;<span class="type">int</span>, <span class="type">long</span> <span class="type">long</span>&gt;&gt;&gt; tree;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; fa;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">STLCA</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">STLCA</span>(<span class="type">int</span> n, <span class="type">int</span> root = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">init</span>(n, root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m = __lg(n) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;root = root;</span><br><span class="line">        dep.<span class="built_in">assign</span>(n, <span class="number">0</span>);</span><br><span class="line">        tree.<span class="built_in">assign</span>(n, &#123;&#125;);</span><br><span class="line">        fa.<span class="built_in">assign</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">long</span> <span class="type">long</span> w = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">        tree[u].<span class="built_in">push_back</span>(&#123; v, w &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> dfs = [&amp;](<span class="keyword">auto</span> dfs, <span class="type">int</span> u, <span class="type">int</span> f) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">            fa[u][<span class="number">0</span>] = f;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; m; j++) &#123;</span><br><span class="line">                fa[u][j] = fa[fa[u][j - <span class="number">1</span>]][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; [v, w] : tree[u]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v != f) &#123;</span><br><span class="line">                    dep[v] = dep[u] + w;</span><br><span class="line">                    <span class="built_in">dfs</span>(dfs, v, u);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">dfs</span>(dfs, root, root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[x] &lt; dep[y]) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = m - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dep[fa[x][j]] &gt;= dep[y]) &#123;</span><br><span class="line">                x = fa[x][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x == y) &#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = m - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fa[x][j] != fa[y][j]) &#123;</span><br><span class="line">                x = fa[x][j];</span><br><span class="line">                y = fa[y][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fa[x][<span class="number">0</span>];   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="树链剖分-1"><a href="#树链剖分-1" class="headerlink" title="树链剖分"></a>树链剖分</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> fa[N];</span><br><span class="line"><span class="type">int</span> dep[N];</span><br><span class="line"><span class="type">int</span> siz[N];</span><br><span class="line"><span class="type">int</span> son[N];</span><br><span class="line"><span class="type">int</span> top[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; tree[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">fa[u] = f;</span><br><span class="line">siz[u] = <span class="number">1</span>;</span><br><span class="line">dep[u] = dep[f] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : tree[u]) &#123;</span><br><span class="line"><span class="keyword">if</span> (v != f) &#123;</span><br><span class="line"><span class="built_in">dfs</span>(v, u);</span><br><span class="line">siz[u] += siz[v];<span class="comment">//计算子节点数</span></span><br><span class="line"><span class="keyword">if</span> (siz[son[u]] &lt; siz[v]) son[u] = v;<span class="comment">//更新重边</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_top</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">top[u] = f;</span><br><span class="line"><span class="keyword">if</span> (son[u]) <span class="built_in">get_top</span>(son[u], f);<span class="comment">//重边</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : tree[u]) &#123;</span><br><span class="line"><span class="keyword">if</span> (!top[v]) &#123; <span class="comment">//# f 不一定是 v 的 父节点</span></span><br><span class="line"><span class="built_in">get_top</span>(v, v);<span class="comment">//轻边</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get_top(rt, rt);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (top[a] != top[b]) &#123; <span class="comment">//跳到同一条重边</span></span><br><span class="line">dep[top[a]] &gt; dep[top[b]] ? a = fa[top[a]] : b = fa[top[b]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dep[a] &lt; dep[b] ? a : b;<span class="comment">//选择深度更小的节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="O-1"><a href="#O-1" class="headerlink" title="O(1)"></a>O(1)</h4><h5 id="dfn序"><a href="#dfn序" class="headerlink" title="dfn序"></a>dfn序</h5><p>$$<br>lca(x, y) &#x3D;<br>\begin{cases}<br>x &amp; x &#x3D; y\<br>[dfn_{x} + 1, dfn_{y}] 之间深度最小节点的父亲  &amp; x \neq y<br>\end{cases}<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;<span class="comment">// number of vertex</span></span><br><span class="line"><span class="type">int</span> tot;</span><br><span class="line"><span class="type">int</span> lg[N];</span><br><span class="line"><span class="type">int</span> dep[N];</span><br><span class="line"><span class="type">int</span> dfn[N];</span><br><span class="line"><span class="type">int</span> st[N][M];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; tree[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">    dfn[u] = ++tot;</span><br><span class="line">    dep[u] = dep[f] + <span class="number">1</span>;</span><br><span class="line">    st[dfn[u]][<span class="number">0</span>] = f;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; v : tree[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v != f) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(v, u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dfn[x] &lt; dfn[y] ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;<span class="comment">// !!!</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        lg[i] = lg[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// st</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; M; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= n; i++) &#123;</span><br><span class="line">            st[i][j] = <span class="built_in">get</span>(st[i][j - <span class="number">1</span>], st[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == y) &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    x = dfn[x];</span><br><span class="line">    y = dfn[y];</span><br><span class="line">    <span class="keyword">if</span> (x &gt; y) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    x++;</span><br><span class="line">    <span class="type">int</span> k = lg[y - x + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">get</span>(st[x][k], st[y - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dis</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dep[x] + dep[y] - dep[<span class="built_in">lca</span>(x, y)] * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DfnLCA</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, m, root;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; lg;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; dfn;</span><br><span class="line">    vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; dep;</span><br><span class="line">    vector&lt;vector&lt;pair&lt;<span class="type">int</span>, <span class="type">long</span> <span class="type">long</span>&gt;&gt;&gt; tree;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; st;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">DfnLCA</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">DfnLCA</span>(<span class="type">int</span> n, <span class="type">int</span> root = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">init</span>(n, root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m = __lg(n) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;root = root;</span><br><span class="line">        lg.<span class="built_in">assign</span>(n, <span class="number">-1</span>);</span><br><span class="line">        dfn.<span class="built_in">assign</span>(n, <span class="number">0</span>);</span><br><span class="line">        dep.<span class="built_in">assign</span>(n, <span class="number">0</span>);</span><br><span class="line">        tree.<span class="built_in">assign</span>(n, &#123;&#125;);</span><br><span class="line">        st.<span class="built_in">assign</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            lg[i] = lg[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">long</span> <span class="type">long</span> w = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">        tree[u].<span class="built_in">push_back</span>(&#123; v, w &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">select</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dfn[x] &lt; dfn[y] ? x : y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> id = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">auto</span> dfs = [&amp;](<span class="keyword">auto</span> dfs, <span class="type">int</span> u, <span class="type">int</span> f) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">            dfn[u] = id++;</span><br><span class="line">            st[dfn[u]][<span class="number">0</span>] = f;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; [v, w] : tree[u]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v != f) &#123;</span><br><span class="line">                    dep[v] = dep[u] + w;</span><br><span class="line">                    <span class="built_in">dfs</span>(dfs, v, u);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">dfs</span>(dfs, root, root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; m; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i + (<span class="number">1</span> &lt;&lt; j) &lt; n; i++) &#123;</span><br><span class="line">                st[i][j] = <span class="built_in">select</span>(st[i][j - <span class="number">1</span>], st[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == y) &#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        x = dfn[x];</span><br><span class="line">        y = dfn[y];</span><br><span class="line">        <span class="keyword">if</span> (x &gt; y) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        x += <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> k = lg[y - x + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">select</span>(st[x][k], st[y - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">dis</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dep[x] + dep[y] - dep[<span class="built_in">lca</span>(x, y)] * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="欧拉序"><a href="#欧拉序" class="headerlink" title="欧拉序"></a>欧拉序</h5><p>$$<br>lca(x, y) &#x3D; [Euler_{x}, Euler_{y}] 之间深度最小的节点<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// to do</span></span><br></pre></td></tr></table></figure><h3 id="直径"><a href="#直径" class="headerlink" title="直径"></a>直径</h3><p>两次 dfs 或者 dp 可求出</p><p><strong>trick:</strong></p><p>每次合并两个联通块（合并后仍为树），求直径</p><p>设连通块1的直径为 $d_{1}$ 端点为 $u_{1}, v_{1}$</p><p>设连通块2的直径为 $d_{2}$ 端点为 $u_{2}, v_{2}$</p><p>$d &#x3D; max(d_{1}, d_{2}, dis(u_{1}, u_{2}), dis(u_{1}, v_{2}), dis(v_{1}, u_{2}), dis(v_{1}, v_{2}))$</p><p>然后更新端点即可</p><p><strong>trick:</strong></p><p>树上的点到树上某点的最远距离等于它到树直径两端点取 $max$</p><h3 id="DSU-on-tree"><a href="#DSU-on-tree" class="headerlink" title="DSU on tree"></a>DSU on tree</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">siz</span><span class="params">(n + <span class="number">1</span>, <span class="number">1</span>)</span>, <span class="title">son</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">auto</span> dfs = [&amp;](<span class="keyword">auto</span> dfs, <span class="type">int</span> u, <span class="type">int</span> f) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; v : tree[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v != f) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(dfs, v, u);</span><br><span class="line">            siz[u] += siz[v];</span><br><span class="line">            <span class="keyword">if</span> (siz[v] &gt;= siz[son[u]]) &#123;</span><br><span class="line">                son[u] = v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">dfs</span>(dfs, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">i64 result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">auto</span> update = [&amp;](<span class="keyword">auto</span> update, <span class="type">int</span> u, <span class="type">int</span> f, <span class="type">int</span> s) -&gt; <span class="type">void</span> &#123;</span><br><span class="line"><span class="comment">// 增加点 u 的信息</span></span><br><span class="line">    <span class="comment">// 计算result的贡献 </span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; v : tree[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v != f &amp;&amp; v != s) &#123;</span><br><span class="line">            <span class="built_in">update</span>(update, v, u, s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> restore = [&amp;](<span class="keyword">auto</span> restore, <span class="type">int</span> u, <span class="type">int</span> f) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">    <span class="comment">// 删减点 u 的信息</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; v : tree[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v != f) &#123;</span><br><span class="line">            <span class="built_in">restore</span>(restore, v, u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> calculate = [&amp;](<span class="keyword">auto</span> calculate, <span class="type">int</span> u, <span class="type">int</span> f, <span class="type">int</span> op) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; v : tree[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v != f &amp;&amp; v != son[u]) &#123;</span><br><span class="line">            <span class="built_in">calculate</span>(calculate, v, u, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (son[u]) &#123;</span><br><span class="line">        <span class="built_in">calculate</span>(calculate, son[u], u, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">update</span>(update, u, f, son[u]);</span><br><span class="line"><span class="comment">// 获得点 u 答案 -&gt; result</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (op) &#123;</span><br><span class="line">        <span class="built_in">restore</span>(restore, u, f);</span><br><span class="line">        result = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">calculate</span>(calculate, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="TreeHash"><a href="#TreeHash" class="headerlink" title="TreeHash"></a>TreeHash</h3><p>判断一些树是否同构的时，我们常常把这些树转成哈希值储存起来，以降低复杂度。<br>$$<br>f(S) &#x3D; \left( c + \sum_{x \in S} g(x) \right) \bmod m<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeHash</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> root;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> mask;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> delta; <span class="comment">// f(u) = delta + sum(son(u))</span></span><br><span class="line">    vector&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt; key;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; tree;</span><br><span class="line">    <span class="built_in">TreeHash</span>(<span class="type">int</span> n, <span class="type">int</span> rt) : <span class="built_in">root</span>(rt) &#123;</span><br><span class="line">        key.<span class="built_in">assign</span>(n, <span class="number">0</span>);</span><br><span class="line">        tree.<span class="built_in">assign</span>(n, &#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        tree[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">hash</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// hash 设计</span></span><br><span class="line">        val ^= mask;</span><br><span class="line">        val ^= val &lt;&lt; <span class="number">13</span>;</span><br><span class="line">        val ^= val &gt;&gt; <span class="number">7</span>;</span><br><span class="line">        val ^= val &lt;&lt; <span class="number">17</span>;</span><br><span class="line">        val ^= mask;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> dfs = [&amp;](<span class="keyword">auto</span> &amp;&amp;dfs, <span class="type">int</span> u, <span class="type">int</span> f) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">            key[u] = delta;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; v : tree[u]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v != f) &#123;</span><br><span class="line">                    <span class="built_in">dfs</span>(dfs, v, u);</span><br><span class="line">                    key[u] += <span class="built_in">hash</span>(key[v]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">dfs</span>(dfs, root, root);</span><br><span class="line">        <span class="comment">// g(f(u) - g(son(u))) + f(son(u))</span></span><br><span class="line">        <span class="keyword">auto</span> dp = [&amp;](<span class="keyword">auto</span>&amp; dp, <span class="type">int</span> u, <span class="type">int</span> f) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; v : tree[u]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v != f) &#123;</span><br><span class="line">                    key[v] += <span class="built_in">hash</span>(key[u] - <span class="built_in">hash</span>(key[v])); </span><br><span class="line">                    <span class="built_in">dp</span>(dp, v, u);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">dp</span>(dp, root, root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> TreeHash::mask = chrono::steady_clock::<span class="built_in">now</span>().<span class="built_in">time_since_epoch</span>().<span class="built_in">count</span>();</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> TreeHash::delta = chrono::steady_clock::<span class="built_in">now</span>().<span class="built_in">time_since_epoch</span>().<span class="built_in">count</span>();</span><br></pre></td></tr></table></figure><h2 id="2-SAT"><a href="#2-SAT" class="headerlink" title="2 - SAT"></a>2 - SAT</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 给定 n 个 bool 变量</span></span><br><span class="line"><span class="comment"> * 给定 m 个条件 [i = a or j = b] (a, b in &#123; 0, 1 &#125;)</span></span><br><span class="line"><span class="comment"> * 求使得全部条件满足的构造</span></span><br><span class="line"><span class="comment"> * [a or b] -&gt; [!a -&gt; b] or [!b -&gt; a]</span></span><br><span class="line"><span class="comment"> * 建图 </span></span><br><span class="line"><span class="comment"> * i + !a * n -&gt; j + b * n</span></span><br><span class="line"><span class="comment"> * j + !b * n -&gt; i + a * n</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Twosat</span> &#123; </span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> n;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; dfn, low, stk, scc;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; graph;</span><br><span class="line">    <span class="built_in">Twosat</span>(<span class="type">int</span> n) : <span class="built_in">n</span>(n) &#123;</span><br><span class="line">        dfn.<span class="built_in">assign</span>(n * <span class="number">2</span> + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        low.<span class="built_in">assign</span>(n * <span class="number">2</span> + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        stk.<span class="built_in">assign</span>(n * <span class="number">2</span> + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        scc.<span class="built_in">assign</span>(n * <span class="number">2</span> + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        graph.<span class="built_in">assign</span>(n * <span class="number">2</span> + <span class="number">1</span>, &#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// [i = a or j = b]</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addConstraint</span><span class="params">(<span class="type">int</span> i, <span class="type">bool</span> a, <span class="type">int</span> j, <span class="type">bool</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">addEdge</span>(i + !a * n, j + b * n);</span><br><span class="line">        <span class="built_in">addEdge</span>(j + !b * n, i + a * n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        graph[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> id = <span class="number">0</span>;</span><br><span class="line">        dfn[u] = low[u] = ++id;</span><br><span class="line">        stk.<span class="built_in">push_back</span>(u);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; v : graph[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!dfn[v]) &#123;</span><br><span class="line">                <span class="built_in">tarjan</span>(v);</span><br><span class="line">                low[u] = <span class="built_in">min</span>(low[u], low[v]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!scc[v]) &#123;</span><br><span class="line">                low[u] = <span class="built_in">min</span>(low[u], dfn[v]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (dfn[u] == low[u]) &#123;</span><br><span class="line">            cnt += <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> v;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                v = stk.<span class="built_in">back</span>();</span><br><span class="line">                stk.<span class="built_in">pop_back</span>();</span><br><span class="line">                scc[v] = cnt;</span><br><span class="line">            &#125; <span class="keyword">while</span> (v != u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n * <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!dfn[i]) &#123;</span><br><span class="line">                <span class="built_in">tarjan</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (scc[i] == scc[i + n]) &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            res[i] = scc[i] &gt; scc[i + n];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>trick</strong></p><ol><li><p>判定某个变量的取值 （0， 1， ？）</p><p> $i \rightarrow i + n$ 变量为 1，$i + n \rightarrow i$ 变量为 0，都不能到达即都有可能。</p><p> 复杂度 $O(n)$</p></li><li><p>固定选 $i$ 点，建边 $i \rightarrow inv(i)$</p></li></ol><h2 id="二分图"><a href="#二分图" class="headerlink" title="二分图"></a>二分图</h2><h3 id="判定-（染色法）"><a href="#判定-（染色法）" class="headerlink" title="判定 （染色法）"></a>判定 （染色法）</h3><p>一个<strong>无向图</strong>是二分图，当且仅当图中不存在奇环。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">BipartiteGraph</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> n;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; graph;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">BipartiteGraph</span>(<span class="type">int</span> n) : <span class="built_in">n</span>(n) &#123;</span><br><span class="line">        graph.<span class="built_in">assign</span>(n, &#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        graph[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vis</span><span class="params">(n, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">auto</span> dfs = [&amp;](<span class="keyword">auto</span> &amp;&amp;dfs, <span class="type">int</span> u, <span class="type">int</span> tag) -&gt; <span class="type">bool</span> &#123;</span><br><span class="line">            vis[u] = tag;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; v : graph[u]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (vis[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">dfs</span>(dfs, v, tag ^ <span class="number">1</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (vis[v] != (tag ^ <span class="number">1</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">dfs</span>(dfs, i, <span class="number">0</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="最大匹配-（匈牙利算法）"><a href="#最大匹配-（匈牙利算法）" class="headerlink" title="最大匹配 （匈牙利算法）"></a>最大匹配 （匈牙利算法）</h3><p>$O(nm)$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Hungary</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> n, m;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; lm, rm; <span class="comment">// 左右两边的 match</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; adj;</span><br><span class="line">    <span class="built_in">Hungary</span>(<span class="type">int</span> n, <span class="type">int</span> m) : <span class="built_in">n</span>(n), <span class="built_in">m</span>(m) &#123;</span><br><span class="line">        lm.<span class="built_in">assign</span>(n, <span class="number">-1</span>);</span><br><span class="line">        rm.<span class="built_in">assign</span>(m, <span class="number">-1</span>);</span><br><span class="line">        adj.<span class="built_in">assign</span>(n, &#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 左边向右边建边 (只用单向边)</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        adj[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> tag = <span class="number">0</span>; <span class="comment">// 时间戳， 这样不用清空 vis</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vis</span><span class="params">(m)</span></span>;</span><br><span class="line">        <span class="keyword">auto</span> dfs = [&amp;](<span class="keyword">auto</span> dfs, <span class="type">int</span> u) -&gt; <span class="type">bool</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; v : adj[u]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (vis[v] != tag) &#123;</span><br><span class="line">                    vis[v] = tag;</span><br><span class="line">                    <span class="keyword">if</span> (rm[v] == <span class="number">-1</span> || <span class="built_in">dfs</span>(dfs, rm[v])) &#123;</span><br><span class="line">                        lm[u] = v;</span><br><span class="line">                        rm[v] = u;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            tag += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">dfs</span>(dfs, i)) &#123;</span><br><span class="line">                cnt += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>trick</strong></p><ol><li><p>（每个左边的点最多有两条边时）求字典序最小的最大匹配，<code>work</code> 处倒序枚举 $i$ 即可。</p><p> 在这种情况下，形成的是树或基环树（森林），对环上<strong>最小编号</strong>选一个最小匹配就可确定所有匹配。</p></li></ol><h4 id="Konig-定理"><a href="#Konig-定理" class="headerlink" title="König 定理"></a>König 定理</h4><p>最小点覆盖：选最少的点，满足每条边至少有一个端点被选。</p><p>二分图中，最小点覆盖 $&#x3D;$ 最大匹配。</p><p>将二分图点集分成左右两个集合，使得所有边的两个端点都不在一个集合。</p><h4 id="最大独立集"><a href="#最大独立集" class="headerlink" title="最大独立集"></a>最大独立集</h4><p>最大独立集：选最多的点，满足两两之间没有边相连。</p><p>因为在最小点覆盖中，任意一条边都被至少选了一个顶点，所以对于其点集的补集，任意一条边都被至多选了一个顶点，所以不存在边连接两个点集中的点，且该点集最大</p><p>最大独立集: $n$ $-$ 最小点覆盖。</p><h4 id="最小路径覆盖"><a href="#最小路径覆盖" class="headerlink" title="最小路径覆盖"></a>最小路径覆盖</h4><p>给定有向无环图（$DAG$）选若干条不相交的路径把整个图覆盖，最少选几条。</p><p>把  $n$ 个点拆分为 $[1, n]$ 和 $[n + 1, 2n]$ 两部分，如果存在边 $(x, y)$ ，则建边 $(x, y + n)$ 。</p><p>答案为 $n$ $-$  最大匹配。</p><h2 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h2><h3 id="MaxFlow"><a href="#MaxFlow" class="headerlink" title="MaxFlow"></a>MaxFlow</h3><p>$dinic ; O(\sqrt{n}m)$ </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">MaxFlow</span> &#123;</span><br><span class="line">    <span class="keyword">using</span> T = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> to;</span><br><span class="line">        T cap;</span><br><span class="line">        <span class="built_in">Edge</span>(<span class="type">int</span> to, T cap) : <span class="built_in">to</span>(to), <span class="built_in">cap</span>(cap) &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;Edge&gt; e;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; g;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; cur, h;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MaxFlow</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">MaxFlow</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        e.<span class="built_in">clear</span>();</span><br><span class="line">        g.<span class="built_in">assign</span>(n, &#123;&#125;);</span><br><span class="line">        cur.<span class="built_in">resize</span>(n);</span><br><span class="line">        h.<span class="built_in">resize</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, T c)</span> </span>&#123;</span><br><span class="line">        g[u].<span class="built_in">push_back</span>(e.<span class="built_in">size</span>());</span><br><span class="line">        e.<span class="built_in">emplace_back</span>(v, c);</span><br><span class="line">        g[v].<span class="built_in">push_back</span>(e.<span class="built_in">size</span>());</span><br><span class="line">        e.<span class="built_in">emplace_back</span>(u, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        h.<span class="built_in">assign</span>(n, <span class="number">-1</span>);</span><br><span class="line">        h[s] = <span class="number">0</span>;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">        que.<span class="built_in">push</span>(s);</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">const</span> <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">const</span> <span class="type">int</span>&amp; i : g[u]) &#123;</span><br><span class="line">                <span class="type">const</span> <span class="keyword">auto</span>&amp; [v, c] = e[i];</span><br><span class="line">                <span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; h[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">                    h[v] = h[u] + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (v == t) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    que.<span class="built_in">push</span>(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, T f)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == t) &#123;</span><br><span class="line">            <span class="keyword">return</span> f;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> r = f;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>&amp; i = cur[u]; i &lt; <span class="built_in">int</span>(g[u].<span class="built_in">size</span>()); i++) &#123;</span><br><span class="line">            <span class="type">const</span> <span class="type">int</span> j = g[u][i];</span><br><span class="line">            <span class="keyword">auto</span> [v, c] = e[j];</span><br><span class="line">            <span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; h[v] == h[u] + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="type">const</span> <span class="keyword">auto</span> a = <span class="built_in">dfs</span>(v, t, <span class="built_in">min</span>(r, c));</span><br><span class="line">                e[j].cap -= a;</span><br><span class="line">                e[j ^ <span class="number">1</span>].cap += a;</span><br><span class="line">                r -= a;</span><br><span class="line">                <span class="keyword">if</span> (r == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> f;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f - r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">flow</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        T ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">bfs</span>(s, t)) &#123;</span><br><span class="line">            cur.<span class="built_in">assign</span>(n, <span class="number">0</span>);</span><br><span class="line">            ans += <span class="built_in">dfs</span>(s, t, numeric_limits&lt;T&gt;::<span class="built_in">max</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">minCut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">c</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            c[i] = (h[i] != <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">        <span class="type">int</span> from;</span><br><span class="line">        <span class="type">int</span> to;</span><br><span class="line">        T cap;</span><br><span class="line">        T flow;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取所有边的信息</span></span><br><span class="line">    <span class="function">vector&lt;Info&gt; <span class="title">edges</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        vector&lt;Info&gt; info;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; e.<span class="built_in">size</span>(); i += <span class="number">2</span>) &#123;</span><br><span class="line">            Info x;</span><br><span class="line">            x.from = e[i + <span class="number">1</span>].to;</span><br><span class="line">            x.to = e[i].to;</span><br><span class="line">            x.cap = e[i].cap + e[i + <span class="number">1</span>].cap;</span><br><span class="line">            x.flow = e[i + <span class="number">1</span>].cap;</span><br><span class="line">            info.<span class="built_in">push_back</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="欧拉图"><a href="#欧拉图" class="headerlink" title="欧拉图"></a>欧拉图</h2><ol><li>无向图是欧拉图当且仅当：<ul><li>非零度顶点是连通的</li><li>顶点的度数都是偶数</li></ul></li><li>无向图是半欧拉图当且仅当：<ul><li>非零度顶点是连通的</li><li>恰有 2 个奇度顶点</li></ul></li><li>有向图是欧拉图当且仅当：<ul><li>非零度顶点是强连通的</li><li>每个顶点的入度和出度相等</li></ul></li><li>有向图是半欧拉图当且仅当：<ul><li>非零度顶点是弱连通的</li><li>至多一个顶点的出度与入度之差为 1</li><li>至多一个顶点的入度与出度之差为 1</li><li>其他顶点的入度和出度相等</li></ul></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Hierholzer</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> n;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; in, out;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; adj;</span><br><span class="line">    <span class="built_in">Hierholzer</span>(<span class="type">int</span> n) : <span class="built_in">n</span>(n) &#123;</span><br><span class="line">        in.<span class="built_in">assign</span>(n, <span class="number">0</span>);</span><br><span class="line">        out.<span class="built_in">assign</span>(n, <span class="number">0</span>);</span><br><span class="line">        adj.<span class="built_in">assign</span>(n, &#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        in[v] += <span class="number">1</span>;</span><br><span class="line">        out[u] += <span class="number">1</span>;</span><br><span class="line">        adj[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">        <span class="type">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> oic = <span class="number">0</span>, ooc = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123; <span class="comment">// 判定是否存在欧拉路径</span></span><br><span class="line">            <span class="keyword">if</span> (in[i] != out[i]) &#123;</span><br><span class="line">                ok = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (in[i] == out[i] + <span class="number">1</span>) &#123;</span><br><span class="line">                    oic += <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (in[i] == out[i] - <span class="number">1</span>) &#123;</span><br><span class="line">                    ooc += <span class="number">1</span>; s = i;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    path.<span class="built_in">clear</span>();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!ok &amp;&amp; (oic != <span class="number">1</span> || ooc != <span class="number">1</span>)) &#123;</span><br><span class="line">            path.<span class="built_in">clear</span>();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123; <span class="comment">// 字典序最小对边排序</span></span><br><span class="line">            <span class="built_in">sort</span>(adj[i].<span class="built_in">begin</span>(), adj[i].<span class="built_in">end</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cur</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">auto</span> dfs = [&amp;](<span class="keyword">auto</span> &amp;&amp;dfs, <span class="type">int</span> u) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> &amp;i = cur[u]; i &lt; adj[u].<span class="built_in">size</span>();) &#123;</span><br><span class="line">                <span class="built_in">dfs</span>(dfs, adj[u][i++]);</span><br><span class="line">            &#125;</span><br><span class="line">            path.<span class="built_in">push_back</span>(u);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">dfs</span>(dfs, s);</span><br><span class="line">        <span class="built_in">reverse</span>(path.<span class="built_in">begin</span>(), path.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Rings-counts"><a href="#Rings-counts" class="headerlink" title="Rings-counts"></a>Rings-counts</h2><h3 id="普通环计数"><a href="#普通环计数" class="headerlink" title="普通环计数"></a>普通环计数</h3><p>对于状态 $f(s,i)$，枚举下一个结点 $u$。若 $u$ 在集合 $s$ 中且是编号最小的那个（即起点），就将答案 $A$ 加上 $f(s,i)$。若 $u$ 不在 $s$ 中，就将 $f(s,i)$ 加上 $f(s\cup{u},u)$。</p><p>这样会把二元环（即重边）也算上，并且每个非二元环会被计算两次（因为固定起点可以向两个方向走），所以答案为 $\dfrac{A-m}2$，其中 $m$ 表示边数。时间复杂度 $O(2^nm)$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">g</span>(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    <span class="type">int</span> u, v;</span><br><span class="line">    cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">    u--, v--;</span><br><span class="line">    g[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">    g[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">vector <span class="title">f</span><span class="params">(n, vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;(<span class="number">1</span> &lt;&lt; n))</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    f[i][<span class="number">1</span> &lt;&lt; i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> s = <span class="number">0</span>; s &lt; (<span class="number">1</span> &lt;&lt; n); s++) &#123;</span><br><span class="line">    <span class="type">int</span> lowbit = s &amp; (-s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">0</span>; c &lt; n; c++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (f[c][s] == <span class="number">0</span>) &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; v : g[c]) &#123;</span><br><span class="line">            <span class="type">int</span> mask = (<span class="number">1</span> &lt;&lt; v);</span><br><span class="line">            <span class="keyword">if</span> (mask &lt; lowbit) &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line">            <span class="keyword">if</span> ((s &gt;&gt; v) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (lowbit == mask) &#123;</span><br><span class="line">                    ans += f[c][s];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                f[v][s | mask] += f[c][s];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; (ans - m) / <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h3 id="三元环计数"><a href="#三元环计数" class="headerlink" title="三元环计数"></a>三元环计数</h3><p>无向图三元环个数</p><p>我们规定从度数小的点指向度数大的点，度数相同就从编号小的点指向编号大的点。那么此时此图是一张有向无环图（DAG）。</p><p>枚举 u 和 u 指向的点 v，再在 v 指向的点中枚举 w，检验 u 是否与 w 相连即可。</p><p>$O(m\sqrt{m})$ </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">deg</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; <span class="built_in">edge</span>(m + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    <span class="keyword">auto</span>&amp; [u, v] = edge[i];</span><br><span class="line">    cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">    deg[u] += <span class="number">1</span>;</span><br><span class="line">    deg[v] += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">adj</span>(n + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    <span class="keyword">auto</span>&amp; [u, v] = edge[i];</span><br><span class="line">    <span class="keyword">if</span> (deg[u] &lt; deg[v] || (deg[u] == deg[v] &amp;&amp; u &lt; v)) &#123;</span><br><span class="line">        adj[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        adj[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vis</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> u = <span class="number">1</span>; u &lt;= n; u++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; v : adj[u]) &#123;</span><br><span class="line">        vis[v] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; v : adj[u]) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; w : adj[v]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[w]) &#123;</span><br><span class="line">                ans += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; v : adj[u]) &#123;</span><br><span class="line">        vis[v] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> Template </category>
          
          <category> Graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data Structures</title>
      <link href="/2024/06/14/ACM/Template/Data%20structure/"/>
      <url>/2024/06/14/ACM/Template/Data%20structure/</url>
      
        <content type="html"><![CDATA[<h1 id="Data-Structures"><a href="#Data-Structures" class="headerlink" title="Data Structures"></a>Data Structures</h1><h2 id="DSU"><a href="#DSU" class="headerlink" title="DSU"></a>DSU</h2><h3 id="普通并查集"><a href="#普通并查集" class="headerlink" title="普通并查集"></a>普通并查集</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DSU</span> &#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; f, siz;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">DSU</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">DSU</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        f.<span class="built_in">resize</span>(n);</span><br><span class="line">        std::<span class="built_in">iota</span>(f.<span class="built_in">begin</span>(), f.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        siz.<span class="built_in">assign</span>(n, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (x != f[x]) &#123;</span><br><span class="line">            x = f[x] = f[f[x]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">same</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        x = <span class="built_in">find</span>(x);</span><br><span class="line">        y = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (x == y) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        siz[x] += siz[y];</span><br><span class="line">        f[y] = x;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> siz[<span class="built_in">find</span>(x)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="种类并查集"><a href="#种类并查集" class="headerlink" title="种类并查集"></a>种类并查集</h3><p>用普通并查集开 $n \times k$ 倍空间， $k$ 为种类数。</p><p><strong>trick</strong> </p><ol><li><p>判断种类，关系。</p><p> 建边表示不同种类之间的关系。</p></li><li><p>判断无向图中是否有奇环（二分图充要条件）</p><p> 建边 $merge(x, y + n)$ ， $merge(x + n, y)$ ，如果 $same(x, y)$ 则图中有奇环。</p></li></ol><h3 id="带权并查集"><a href="#带权并查集" class="headerlink" title="带权并查集"></a>带权并查集</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DSU</span> &#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; f, siz, val, max_val;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">DSU</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">DSU</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        f.<span class="built_in">resize</span>(n);</span><br><span class="line">        std::<span class="built_in">iota</span>(f.<span class="built_in">begin</span>(), f.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        siz.<span class="built_in">assign</span>(n, <span class="number">1</span>);</span><br><span class="line">        val.<span class="built_in">assign</span>(n, <span class="number">0</span>);</span><br><span class="line">        max_val.<span class="built_in">assign</span>(n, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (f[x] == x) &#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> t = <span class="built_in">find</span>(f[x]);</span><br><span class="line">        val[x] += val[f[x]]; <span class="comment">// 计算权值</span></span><br><span class="line">        <span class="keyword">return</span> f[x] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">same</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// x &lt;- y 边权为 w</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> vx = <span class="built_in">value</span>(x);</span><br><span class="line">        <span class="type">int</span> vy = <span class="built_in">value</span>(y);</span><br><span class="line">        x = <span class="built_in">find</span>(x);</span><br><span class="line">        y = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (x == y) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        max_val[x] = <span class="built_in">max</span>(max_val[x], max_val[y] + vx - vy + w);</span><br><span class="line">        val[y] += vx - vy + w;</span><br><span class="line">        siz[x] += siz[y];</span><br><span class="line">        f[y] = x;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> siz[<span class="built_in">find</span>(x)];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">value</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">find</span>(x); <span class="comment">// 路径压缩</span></span><br><span class="line">        <span class="keyword">return</span> val[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">max_value</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="comment">// 连通块最大深度/权值</span></span><br><span class="line">        <span class="keyword">return</span> max_val[<span class="built_in">find</span>(x)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="可撤销并查集"><a href="#可撤销并查集" class="headerlink" title="可撤销并查集"></a>可撤销并查集</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DSU</span> &#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; f, siz;</span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; stk;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">DSU</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">DSU</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        f.<span class="built_in">resize</span>(n);</span><br><span class="line">        std::<span class="built_in">iota</span>(f.<span class="built_in">begin</span>(), f.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        siz.<span class="built_in">assign</span>(n, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// O(log(n))</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">while</span> (x != f[x]) &#123;</span><br><span class="line">            x = f[x]; <span class="comment">// 不能路径压缩</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">same</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        x = <span class="built_in">find</span>(x);</span><br><span class="line">        y = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (x == y) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (siz[x] &lt; siz[y]) &#123; <span class="comment">// 按秩合并</span></span><br><span class="line">            <span class="built_in">swap</span>(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        f[y] = x;</span><br><span class="line">        siz[x] += siz[y];</span><br><span class="line">        stk.<span class="built_in">push_back</span>(&#123; x, y &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> siz[<span class="built_in">find</span>(x)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 回退一步</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">auto</span> [x, y] = stk.<span class="built_in">back</span>();</span><br><span class="line">        stk.<span class="built_in">pop_back</span>();</span><br><span class="line">        siz[x] -= siz[y];</span><br><span class="line">        f[y] = y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>trick</strong></p><ol><li><p>维护连通块内的连通性，可以打 <code>tag</code> ，在并查集撤销时更新 <code>tag</code> 。<code>merge</code> 时要消除 <code>tag</code> 的影响。</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    x = <span class="built_in">find</span>(x);</span><br><span class="line">    y = <span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (x == y) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (siz[x] &lt; siz[y]) &#123; <span class="comment">// 按秩合并</span></span><br><span class="line">        <span class="built_in">swap</span>(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    f[y] = x;</span><br><span class="line">    siz[x] += siz[y];</span><br><span class="line">    stk.<span class="built_in">push_back</span>(&#123; x, y &#125;);</span><br><span class="line">    tag[y] -= tag[x]; <span class="comment">// 消除 x 的影响</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 回退一步</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">auto</span> [x, y] = stk.<span class="built_in">back</span>();</span><br><span class="line">    stk.<span class="built_in">pop_back</span>();</span><br><span class="line">    siz[x] -= siz[y];</span><br><span class="line">    f[y] = y;</span><br><span class="line">    tag[y] += tag[x]; <span class="comment">// 标记传递</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Fenwick"><a href="#Fenwick" class="headerlink" title="Fenwick"></a>Fenwick</h2><h3 id="Point-set-range-query"><a href="#Point-set-range-query" class="headerlink" title="Point set range query"></a>Point set range query</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Fenwick</span> &#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">vector&lt;T&gt; sum;</span><br><span class="line"><span class="built_in">Fenwick</span>(<span class="type">int</span> _n = <span class="number">0</span>) &#123;</span><br><span class="line">n = _n;</span><br><span class="line">sum.<span class="built_in">resize</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p, T k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = p; i &lt; n; i += <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">sum[i] += k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">T <span class="title">prefixsum</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">T ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = p; i &gt; <span class="number">0</span>; i -= <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">ans += sum[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">T <span class="title">rangesum</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">prefixsum</span>(r) - <span class="built_in">prefixsum</span>(l - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Jiangly</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Fenwick</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;T&gt; a;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Fenwick</span>(<span class="type">int</span> n_ = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">init</span>(n_);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n_)</span> </span>&#123;</span><br><span class="line">        n = n_;</span><br><span class="line">        a.<span class="built_in">assign</span>(n, T&#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">const</span> T &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = x + <span class="number">1</span>; i &lt;= n; i += i &amp; -i) &#123;</span><br><span class="line">            a[i - <span class="number">1</span>] = a[i - <span class="number">1</span>] + v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">T <span class="title">sum</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        T ans&#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = x; i &gt; <span class="number">0</span>; i -= i &amp; -i) &#123;</span><br><span class="line">            ans = ans + a[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">T <span class="title">rangeSum</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(r) - <span class="built_in">sum</span>(l);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">select</span><span class="params">(<span class="type">const</span> T &amp;k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">        T cur&#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span> &lt;&lt; std::__lg(n); i; i /= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x + i &lt;= n &amp;&amp; cur + a[x + i - <span class="number">1</span>] &lt;= k) &#123;</span><br><span class="line">                x += i;</span><br><span class="line">                cur = cur + a[x - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Range-set-range-query"><a href="#Range-set-range-query" class="headerlink" title="Range set range query"></a>Range set range query</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fenwick</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line">vector&lt;T&gt; S;</span><br><span class="line">vector&lt;T&gt; C;</span><br><span class="line"><span class="built_in">Fenwick</span>(<span class="type">int</span> n = <span class="number">0</span>) &#123;</span><br><span class="line">N = n;</span><br><span class="line">S.<span class="built_in">resize</span>(N);</span><br><span class="line">C.<span class="built_in">resize</span>(N);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowerbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, T k)</span> </span>&#123;</span><br><span class="line"><span class="built_in">Add</span>(l, k);</span><br><span class="line"><span class="built_in">Add</span>(r + <span class="number">1</span>, -k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">T <span class="title">query</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Sum</span>(r) - <span class="built_in">Sum</span>(l - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> p, T k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = p; i &lt; N; i += <span class="built_in">lowerbit</span>(i)) &#123;</span><br><span class="line">S[i] += k;</span><br><span class="line">C[i] += k * p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">T <span class="title">Sum</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">T Ssum = <span class="number">0</span>;</span><br><span class="line">T Csum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = p; i &gt; <span class="number">0</span>; i -= <span class="built_in">lowerbit</span>(i)) &#123;</span><br><span class="line">Ssum += S[i] * (p + <span class="number">1</span>);</span><br><span class="line">Csum += C[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Ssum - Csum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="二维树状数组"><a href="#二维树状数组" class="headerlink" title="二维树状数组"></a>二维树状数组</h2><h3 id="point-set-range-query"><a href="#point-set-range-query" class="headerlink" title="point set range query"></a>point set range query</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Fenwick</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    vector&lt;vector&lt;T&gt;&gt; val;</span><br><span class="line">    <span class="built_in">Fenwick</span>(<span class="type">int</span> _n, <span class="type">int</span> _m) &#123;</span><br><span class="line">        n = _n;</span><br><span class="line">        m = _m;</span><br><span class="line">        val.<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            val[i].<span class="built_in">resize</span>(m);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单点修改</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, T k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = x; i &lt; n; i += <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = y; j &lt; m; j += <span class="built_in">lowbit</span>(j)) &#123;</span><br><span class="line">                val[i][j] += k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">prefix</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        T sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = x; i &gt; <span class="number">0</span>; i -= <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = y; j &gt; <span class="number">0</span>; j -= <span class="built_in">lowbit</span>(j)) &#123;</span><br><span class="line">                sum += val[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">sum</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">prefix</span>(x2, y2) - <span class="built_in">prefix</span>(x2, y1 - <span class="number">1</span>) - <span class="built_in">prefix</span>(x1 - <span class="number">1</span>, y2) + <span class="built_in">prefix</span>(x1 - <span class="number">1</span>, y1 - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="range-set-range-query"><a href="#range-set-range-query" class="headerlink" title="range set range query"></a>range set range query</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Fenwick</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    vector&lt;vector&lt;T&gt;&gt; a, b, c, d;</span><br><span class="line">    <span class="built_in">Fenwick</span>(<span class="type">int</span> _n, <span class="type">int</span> _m) &#123;</span><br><span class="line">        n = _n;</span><br><span class="line">        m = _m;</span><br><span class="line">        a.<span class="built_in">resize</span>(n);</span><br><span class="line">        b.<span class="built_in">resize</span>(n);</span><br><span class="line">        c.<span class="built_in">resize</span>(n);</span><br><span class="line">        d.<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            a[i].<span class="built_in">resize</span>(m);</span><br><span class="line">            b[i].<span class="built_in">resize</span>(m);</span><br><span class="line">            c[i].<span class="built_in">resize</span>(m);</span><br><span class="line">            d[i].<span class="built_in">resize</span>(m);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2, T k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">update</span>(x1, y1, k);</span><br><span class="line">        <span class="built_in">update</span>(x1, y2 + <span class="number">1</span>, -k);</span><br><span class="line">        <span class="built_in">update</span>(x2 + <span class="number">1</span>, y1, -k);</span><br><span class="line">        <span class="built_in">update</span>(x2 + <span class="number">1</span>, y2 + <span class="number">1</span>, k);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, T k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = x; i &lt; n; i += <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = y; j &lt; m; j += <span class="built_in">lowbit</span>(j)) &#123;</span><br><span class="line">                a[i][j] += k;</span><br><span class="line">                b[i][j] += k * x;</span><br><span class="line">                c[i][j] += k * y;</span><br><span class="line">                d[i][j] += k * x * y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">prefix</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        T sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = x; i &gt; <span class="number">0</span>; i -= <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = y; j &gt; <span class="number">0</span>; j -= <span class="built_in">lowbit</span>(j)) &#123;</span><br><span class="line">                sum += a[i][j] * (x + <span class="number">1</span>) * (y + <span class="number">1</span>);</span><br><span class="line">                sum -= b[i][j] * (y + <span class="number">1</span>);</span><br><span class="line">                sum -= c[i][j] * (x + <span class="number">1</span>);</span><br><span class="line">                sum += d[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">sum</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">prefix</span>(x2, y2) - <span class="built_in">prefix</span>(x2, y1 - <span class="number">1</span>) - <span class="built_in">prefix</span>(x1 - <span class="number">1</span>, y2) + <span class="built_in">prefix</span>(x1 - <span class="number">1</span>, y1 - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Segment-Tree"><a href="#Segment-Tree" class="headerlink" title="Segment Tree"></a>Segment Tree</h2><h3 id="Point-set-range-query-1"><a href="#Point-set-range-query-1" class="headerlink" title="Point set range query"></a>Point set range query</h3><p>time:2024&#x2F;3&#x2F;22</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> lpos, rpos;</span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    <span class="built_in">Node</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update</span></span><br><span class="line">    Node&amp; <span class="keyword">operator</span>+=(<span class="type">const</span> Node&amp; n) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// push_up</span></span><br><span class="line">    <span class="function">Node <span class="title">push_up</span><span class="params">(<span class="type">const</span> Node&amp; ln, <span class="type">const</span> Node&amp; rn)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span> &#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> lp (p &lt;&lt; 1)</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> rp (p &lt;&lt; 1 | 1)</span></span><br><span class="line">    vector&lt;Node&gt; val;</span><br><span class="line">    <span class="built_in">SegmentTree</span>(<span class="type">int</span> n = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">resize</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">resize</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        val.<span class="built_in">resize</span>((n + <span class="number">1</span>) * <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> p = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">        val[p].lpos = l;</span><br><span class="line">        val[p].rpos = r;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(l, mid, lp);</span><br><span class="line">        <span class="built_in">build</span>(mid + <span class="number">1</span>, r, rp);</span><br><span class="line">        val[p].<span class="built_in">push_up</span>(val[lp], val[rp]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> pos, <span class="type">const</span> Node&amp; k, <span class="type">int</span> p = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (val[p].lpos == pos &amp;&amp; pos == val[p].rpos) &#123;</span><br><span class="line">            val[p] += k;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> mid = (val[p].lpos + val[p].rpos) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos &lt;= mid) &#123;</span><br><span class="line">            <span class="built_in">update</span>(pos, k, lp);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">update</span>(pos, k, rp);</span><br><span class="line">        &#125;</span><br><span class="line">        val[p].<span class="built_in">push_up</span>(val[lp], val[rp]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Node <span class="title">query</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; l, <span class="type">const</span> <span class="type">int</span>&amp; r, <span class="type">int</span> p = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= val[p].lpos &amp;&amp; val[p].rpos &lt;= r) &#123;</span><br><span class="line">            <span class="keyword">return</span> val[p];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> mid = (val[p].lpos + val[p].rpos) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (r &lt;= mid) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">query</span>(l, r, lp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mid &lt; l) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">query</span>(l, r ,rp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Node</span>().<span class="built_in">push_up</span>(<span class="built_in">query</span>(l, r, lp), <span class="built_in">query</span>(l, r, rp));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Range-set-range-query-1"><a href="#Range-set-range-query-1" class="headerlink" title="Range set range query"></a>Range set range query</h3><p>update:2024&#x2F;3&#x2F;14</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> lpos, rpos;</span><br><span class="line">    <span class="built_in">Node</span>() &#123;</span><br><span class="line"></span><br><span class="line">        lpos = <span class="number">0</span>;</span><br><span class="line">        rpos = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update</span></span><br><span class="line">    <span class="type">void</span> <span class="keyword">operator</span>+=(<span class="type">const</span> Node&amp; n) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node <span class="built_in">push_up</span>(<span class="type">const</span> Node&amp; ln, <span class="type">const</span> Node&amp; rn) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(Node&amp; ln, Node&amp; rn)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span> &#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> lp (p &lt;&lt; 1)</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> rp (p &lt;&lt; 1 | 1)</span></span><br><span class="line">    vector&lt;Node&gt; val;</span><br><span class="line">    <span class="built_in">SegmentTree</span>(<span class="type">int</span> n = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">resize</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">resize</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        val.<span class="built_in">resize</span>((n + <span class="number">1</span>) * <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> p = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">        val[p].lpos = l;</span><br><span class="line">        val[p].rpos = r;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;<span class="comment">// init</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = (val[p].lpos + val[p].rpos) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(l, mid, lp);</span><br><span class="line">        <span class="built_in">build</span>(mid + <span class="number">1</span>, r, rp);</span><br><span class="line">        val[p].<span class="built_in">push_up</span>(val[lp], val[rp]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; l, <span class="type">const</span> <span class="type">int</span>&amp; r, <span class="type">const</span> Node&amp; k, <span class="type">int</span> p = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= val[p].lpos &amp;&amp; val[p].rpos &lt;= r) &#123;<span class="comment">// update</span></span><br><span class="line">            val[p] += k;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        val[p].<span class="built_in">push_down</span>(val[lp], val[rp]);</span><br><span class="line">        <span class="type">int</span> mid = (val[p].lpos + val[p].rpos) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid) &#123;</span><br><span class="line">            <span class="built_in">update</span>(l, r, k, lp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mid &lt; r) &#123;</span><br><span class="line">            <span class="built_in">update</span>(l, r, k, rp);</span><br><span class="line">        &#125;</span><br><span class="line">        val[p].<span class="built_in">push_up</span>(val[lp], val[rp]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Node <span class="title">query</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; l, <span class="type">const</span> <span class="type">int</span>&amp; r, <span class="type">int</span> p = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= val[p].lpos &amp;&amp; val[p].rpos &lt;= r) &#123;</span><br><span class="line">            <span class="keyword">return</span> val[p];</span><br><span class="line">        &#125;</span><br><span class="line">        val[p].<span class="built_in">push_down</span>(val[lp], val[rp]);</span><br><span class="line">        <span class="type">int</span> mid = (val[p].lpos + val[p].rpos) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (r &lt;= mid) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">query</span>(l, r, lp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mid &lt; l) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">query</span>(l, r, rp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Node</span>().<span class="built_in">push_up</span>(<span class="built_in">query</span>(l, r, lp), <span class="built_in">query</span>(l, r, rp));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="LazySegmentTree"><a href="#LazySegmentTree" class="headerlink" title="LazySegmentTree"></a>LazySegmentTree</h3><p>update:2024&#x2F;6&#x2F;21</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> begin;</span><br><span class="line">    <span class="type">int</span> end;</span><br><span class="line">    <span class="built_in">Node</span>() : <span class="built_in">info</span>(<span class="keyword">this</span>) &#123;&#125;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Tag</span> &#123;</span><br><span class="line">        <span class="built_in">Tag</span>() &#123;&#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(<span class="type">const</span> Tag&amp; t)</span> </span>&#123;&#125;</span><br><span class="line">    &#125; tag;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">        Node* node;</span><br><span class="line">        <span class="built_in">Info</span>(Node* node = <span class="literal">nullptr</span>) : <span class="built_in">node</span>(node) &#123;&#125;</span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span> = Info&gt;</span><br><span class="line">        Info <span class="keyword">operator</span>=(<span class="type">const</span> T&amp; info) &#123; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(<span class="type">const</span> Tag&amp; t)</span> </span>&#123;&#125;</span><br><span class="line">        <span class="function">Info <span class="title">push</span><span class="params">(<span class="type">const</span> Info&amp; a, <span class="type">const</span> Info&amp; b)</span> </span>&#123; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">    &#125; info;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LazySegmentTree</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;Node&gt; node;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T </span>= Node::Info&gt;</span><br><span class="line">    <span class="built_in">LazySegmentTree</span>(<span class="type">const</span> vector&lt;T&gt;&amp; val) &#123;</span><br><span class="line">        <span class="built_in">init</span>(val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T </span>= Node::Info&gt;</span><br><span class="line">    <span class="built_in">LazySegmentTree</span>(<span class="type">int</span> n, T v) &#123;</span><br><span class="line">        <span class="built_in">init</span>(<span class="built_in">vector</span>(n, v));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T </span>= Node::Info&gt;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">const</span> vector&lt;T&gt;&amp; val)</span> </span>&#123;</span><br><span class="line">        n = val.<span class="built_in">size</span>();</span><br><span class="line">        node.<span class="built_in">resize</span>(<span class="number">4</span> &lt;&lt; __lg(n));</span><br><span class="line">        function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; build = [&amp;](<span class="type">int</span> begin, <span class="type">int</span> end, <span class="type">int</span> p) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;<span class="built_in">begin</span>(p) = begin;</span><br><span class="line">            <span class="keyword">this</span>-&gt;<span class="built_in">end</span>(p) = end;</span><br><span class="line">            <span class="keyword">if</span> (end - begin == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">info</span>(p) = val[begin];</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> middle = (begin + end) / <span class="number">2</span>;</span><br><span class="line">            <span class="built_in">build</span>(begin, middle, <span class="built_in">left</span>(p));</span><br><span class="line">            <span class="built_in">build</span>(middle, end, <span class="built_in">right</span>(p));</span><br><span class="line">            <span class="built_in">push_up</span>(p);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">0</span>, n, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span>&amp; <span class="title">begin</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node[p].begin;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span>&amp; <span class="title">end</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node[p].end;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Node::Tag&amp; <span class="title">tag</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node[p].tag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Node::Info&amp; <span class="title">info</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node[p].info;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">left</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; p)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">right</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; p)</span> <span class="type">const</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; p)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">info</span>(p).<span class="built_in">push</span>(<span class="built_in">info</span>(<span class="built_in">left</span>(p)), <span class="built_in">info</span>(<span class="built_in">right</span>(p)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; p, <span class="type">const</span> Node::Tag&amp; t)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">info</span>(p).<span class="built_in">apply</span>(t);</span><br><span class="line">        <span class="built_in">tag</span>(p).<span class="built_in">apply</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; p)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">apply</span>(<span class="built_in">left</span>(p), <span class="built_in">tag</span>(p));</span><br><span class="line">        <span class="built_in">apply</span>(<span class="built_in">right</span>(p), <span class="built_in">tag</span>(p));</span><br><span class="line">        <span class="built_in">tag</span>(p) = Node::<span class="built_in">Tag</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; pos, <span class="type">const</span> Node::Info&amp; i, <span class="type">const</span> <span class="type">int</span>&amp; p = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">end</span>(p) - <span class="built_in">begin</span>(p) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">info</span>(p) = i;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> middle = (<span class="built_in">begin</span>(p) + <span class="built_in">end</span>(p)) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">push_down</span>(p);</span><br><span class="line">        <span class="keyword">if</span> (pos &lt; middle) &#123;</span><br><span class="line">            <span class="built_in">modify</span>(pos, i, <span class="built_in">left</span>(p));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">modify</span>(pos, i, <span class="built_in">right</span>(p));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">push_up</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rangeApply</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; l, <span class="type">const</span> <span class="type">int</span>&amp; r, <span class="type">const</span> Node::Tag&amp; t, <span class="type">const</span> <span class="type">int</span>&amp; p = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">end</span>(p) &lt;= l || r &lt;= <span class="built_in">begin</span>(p)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= <span class="built_in">begin</span>(p) &amp;&amp; <span class="built_in">end</span>(p) &lt;= r) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">apply</span>(p, t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">push_down</span>(p);</span><br><span class="line">        <span class="built_in">rangeApply</span>(l, r, t, <span class="built_in">left</span>(p));</span><br><span class="line">        <span class="built_in">rangeApply</span>(l, r, t, <span class="built_in">right</span>(p));</span><br><span class="line">        <span class="built_in">push_up</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> Error, <span class="keyword">class</span> Ok&gt;</span></span><br><span class="line"><span class="function">    <span class="type">void</span> <span class="title">rangeApply</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; l, <span class="type">const</span> <span class="type">int</span>&amp; r, <span class="type">const</span> Node::Tag&amp; t, <span class="type">const</span> Error&amp; error, <span class="type">const</span> Ok&amp; ok, <span class="type">const</span> <span class="type">int</span>&amp; p = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">error</span>(node[p], l, r, t)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">ok</span>(node[p], l, r, t)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">apply</span>(p, t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">push_down</span>(p);</span><br><span class="line">        <span class="built_in">rangeApply</span>(l, r, t, error, ok, <span class="built_in">left</span>(p));</span><br><span class="line">        <span class="built_in">rangeApply</span>(l, r, t, error, ok, <span class="built_in">right</span>(p));</span><br><span class="line">        <span class="built_in">push_up</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Node::Info <span class="title">rangeQuery</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; l, <span class="type">const</span> <span class="type">int</span>&amp; r, <span class="type">const</span> <span class="type">int</span>&amp; p = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">end</span>(p) &lt;= l || r &lt;= <span class="built_in">begin</span>(p)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Node::<span class="built_in">Info</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= <span class="built_in">begin</span>(p) &amp;&amp; <span class="built_in">end</span>(p) &lt;= r) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">info</span>(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">push_down</span>(p);</span><br><span class="line">        <span class="keyword">return</span> Node::<span class="built_in">Info</span>().<span class="built_in">push</span>(<span class="built_in">rangeQuery</span>(l, r, <span class="built_in">left</span>(p)), <span class="built_in">rangeQuery</span>(l, r, <span class="built_in">right</span>(p)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="range-add-range-multiply"><a href="#range-add-range-multiply" class="headerlink" title="range add range multiply"></a>range add range multiply</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> Mod;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> begin;</span><br><span class="line">    <span class="type">int</span> end;</span><br><span class="line">    <span class="built_in">Node</span>() : <span class="built_in">info</span>(<span class="keyword">this</span>) &#123;&#125;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Tag</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> add;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> mul;</span><br><span class="line">        <span class="built_in">Tag</span>() &#123;</span><br><span class="line">            add = <span class="number">0</span>;</span><br><span class="line">            mul = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(<span class="type">const</span> Tag&amp; t)</span> </span>&#123;</span><br><span class="line">            add = (add * t.mul + t.add) % Mod;</span><br><span class="line">            mul = mul * t.mul % Mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; tag;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">        Node* node;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> val;</span><br><span class="line">        <span class="built_in">Info</span>(Node* node = <span class="literal">nullptr</span>) : <span class="built_in">node</span>(node) &#123;</span><br><span class="line">            val = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span> = Info&gt;</span><br><span class="line">        Info <span class="keyword">operator</span>=(<span class="type">const</span> T&amp; info) &#123;</span><br><span class="line">            val = info;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(<span class="type">const</span> Tag&amp; t)</span> </span>&#123;</span><br><span class="line">            val = (val * t.mul + t.add * (node-&gt;end - node-&gt;begin)) % Mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">Info <span class="title">push</span><span class="params">(<span class="type">const</span> Info&amp; a, <span class="type">const</span> Info&amp; b)</span> </span>&#123;</span><br><span class="line">            val = (a.val + b.val) % Mod;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; info;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="range-add-range-min-range-max"><a href="#range-add-range-min-range-max" class="headerlink" title="range add range min range max"></a>range add range min range max</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="type">long</span> <span class="type">long</span> inf = <span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> begin;</span><br><span class="line">    <span class="type">int</span> end;</span><br><span class="line">    <span class="built_in">Node</span>() : <span class="built_in">info</span>(<span class="keyword">this</span>) &#123;&#125;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Tag</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> add;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> max;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> min;</span><br><span class="line">        <span class="built_in">Tag</span>() &#123;</span><br><span class="line">            add = <span class="number">0</span>;</span><br><span class="line">            max = -inf;</span><br><span class="line">            min = inf;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(<span class="type">const</span> Tag&amp; t)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (t.add != <span class="number">0</span>) &#123; <span class="comment">// add</span></span><br><span class="line">                add += t.add;</span><br><span class="line">                <span class="keyword">if</span> (max != -inf) max += t.add;</span><br><span class="line">                <span class="keyword">if</span> (min != inf)  min += t.add;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (t.max != -inf) &#123; <span class="comment">// max</span></span><br><span class="line">                min = std::<span class="built_in">max</span>(min, t.max);</span><br><span class="line">                max = std::<span class="built_in">max</span>(max, t.max);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (t.min != inf) &#123; <span class="comment">// min</span></span><br><span class="line">                max = std::<span class="built_in">min</span>(max, t.min);</span><br><span class="line">                min = std::<span class="built_in">min</span>(min, t.min);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; tag;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">        Node* node;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> max;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> maxCnt;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> secMax;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> min;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> minCnt;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> secMin;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> sum;</span><br><span class="line">        <span class="built_in">Info</span>(Node* node = <span class="literal">nullptr</span>) : <span class="built_in">node</span>(node) &#123;</span><br><span class="line">            max = -inf;</span><br><span class="line">            maxCnt = <span class="number">0</span>;</span><br><span class="line">            secMax = -inf;</span><br><span class="line">            min = inf;</span><br><span class="line">            minCnt = <span class="number">0</span>;</span><br><span class="line">            secMin = inf;</span><br><span class="line">            sum = <span class="number">0</span>;         </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span> = Info&gt;</span><br><span class="line">        Info <span class="keyword">operator</span>=(<span class="type">const</span> T&amp; info) &#123;</span><br><span class="line">            max = info;</span><br><span class="line">            maxCnt = <span class="number">1</span>;</span><br><span class="line">            min = info;</span><br><span class="line">            minCnt = <span class="number">1</span>;</span><br><span class="line">            sum = info;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(<span class="type">const</span> Tag&amp; t)</span> </span>&#123;</span><br><span class="line">            <span class="type">const</span> <span class="type">int</span>&amp; begin = node-&gt;begin;</span><br><span class="line">            <span class="type">const</span> <span class="type">int</span>&amp; end = node-&gt;end;</span><br><span class="line">            <span class="keyword">if</span> (t.add != <span class="number">0</span>) &#123; <span class="comment">// add</span></span><br><span class="line">                max += t.add;</span><br><span class="line">                <span class="keyword">if</span> (secMax != -inf) secMax += t.add;</span><br><span class="line">                min += t.add;</span><br><span class="line">                <span class="keyword">if</span> (secMin != inf) secMin += t.add;</span><br><span class="line">                sum += t.add * (end - begin);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (t.max &gt; min) &#123; <span class="comment">// max</span></span><br><span class="line">                sum += (t.max - min) * minCnt;</span><br><span class="line">                <span class="keyword">if</span> (secMax == min)  secMax = t.max;</span><br><span class="line">                <span class="keyword">if</span> (max == min) max = t.max;</span><br><span class="line">                min = t.max;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (t.min &lt; max) &#123; <span class="comment">// min</span></span><br><span class="line">                sum += (t.min - max) * maxCnt;</span><br><span class="line">                <span class="keyword">if</span> (secMin == max) secMin = t.min;</span><br><span class="line">                <span class="keyword">if</span> (min == max) min = t.min;</span><br><span class="line">                max = t.min;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">Info <span class="title">push</span><span class="params">(<span class="type">const</span> Info&amp; a, <span class="type">const</span> Info&amp; b)</span> </span>&#123;</span><br><span class="line">            max = std::<span class="built_in">max</span>(a.max, b.max);</span><br><span class="line">            <span class="keyword">if</span> (a.max == b.max) &#123;</span><br><span class="line">                maxCnt = a.maxCnt + b.maxCnt;</span><br><span class="line">                secMax = std::<span class="built_in">max</span>(a.secMax, b.secMax);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (a.max &gt; b.max) &#123;</span><br><span class="line">                    maxCnt = a.maxCnt;</span><br><span class="line">                    secMax = std::<span class="built_in">max</span>(a.secMax, b.max);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    maxCnt = b.maxCnt;</span><br><span class="line">                    secMax = std::<span class="built_in">max</span>(a.max, b.secMax);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            min = std::<span class="built_in">min</span>(a.min, b.min);</span><br><span class="line">            <span class="keyword">if</span> (a.min == b.min) &#123;</span><br><span class="line">                minCnt = a.minCnt + b.minCnt;</span><br><span class="line">                secMin = std::<span class="built_in">min</span>(a.secMin, b.secMin);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (a.min &lt; b.min) &#123;</span><br><span class="line">                    minCnt = a.minCnt;</span><br><span class="line">                    secMin = std::<span class="built_in">min</span>(a.secMin, b.min);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    minCnt = b.minCnt;</span><br><span class="line">                    secMin = std::<span class="built_in">min</span>(a.min, b.secMin);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sum = a.sum + b.sum;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; info;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> maxError = [](<span class="type">const</span> Node&amp; node, <span class="type">const</span> <span class="type">int</span>&amp; l, <span class="type">const</span> <span class="type">int</span>&amp; r, <span class="type">const</span> Node::Tag&amp; t) -&gt; <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> node.end &lt;= l || r &lt;= node.begin || node.info.min &gt;= t.max;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">auto</span> maxOk = [](<span class="type">const</span> Node&amp; node, <span class="type">const</span> <span class="type">int</span>&amp; l, <span class="type">const</span> <span class="type">int</span>&amp; r, <span class="type">const</span> Node::Tag&amp; t) -&gt; <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> l &lt;= node.begin &amp;&amp; node.end &lt;= r &amp;&amp; node.info.secMin &gt; t.max;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">auto</span> minError = [](<span class="type">const</span> Node&amp; node, <span class="type">const</span> <span class="type">int</span>&amp; l, <span class="type">const</span> <span class="type">int</span>&amp; r, <span class="type">const</span> Node::Tag&amp; t) -&gt; <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> node.end &lt;= l || r &lt;= node.begin || node.info.max &lt;= t.min;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">auto</span> minOk = [](<span class="type">const</span> Node&amp; node, <span class="type">const</span> <span class="type">int</span>&amp; l, <span class="type">const</span> <span class="type">int</span>&amp; r, <span class="type">const</span> Node::Tag&amp; t) -&gt; <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> l &lt;= node.begin &amp;&amp; node.end &lt;= r &amp;&amp; node.info.secMax &lt; t.min;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="President-Tree"><a href="#President-Tree" class="headerlink" title="President Tree"></a>President Tree</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="LiChaoSegmentTree"><a href="#LiChaoSegmentTree" class="headerlink" title="LiChaoSegmentTree"></a>LiChaoSegmentTree</h3><p>维护从 $x$ 处往下看最高的点，以及它的最小 $id$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="type">double</span> eps = <span class="number">1e-9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x - y &gt; eps) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (y - x &gt; eps) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">double</span> inf = <span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Line</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">double</span> k, b;</span><br><span class="line">    <span class="built_in">Line</span>() &#123;</span><br><span class="line">        id = <span class="number">0</span>;</span><br><span class="line">        k = <span class="number">0</span>;</span><br><span class="line">        b = -inf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Line</span>(<span class="type">double</span> x1, <span class="type">double</span> y1, <span class="type">double</span> x2, <span class="type">double</span> y2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">cmp</span>(x1, x2) == <span class="number">0</span>) &#123; <span class="comment">// 斜率不存在</span></span><br><span class="line">            k = <span class="number">0</span>;</span><br><span class="line">            b = <span class="built_in">max</span>(y1, y2);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            k = (y2 - y1) / (x2 - x1);</span><br><span class="line">            b = y1 - k * x1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">get</span><span class="params">(<span class="type">double</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> k * x + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    Line line; <span class="comment">// 该区间最优线段</span></span><br><span class="line">    <span class="type">int</span> lpos, rpos;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LiChaoSegmentTree</span> &#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> lp (p &lt;&lt; 1)</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> rp (p &lt;&lt; 1 | 1)</span></span><br><span class="line">    vector&lt;Node&gt; node;</span><br><span class="line">    <span class="built_in">LiChaoSegmentTree</span>(<span class="type">int</span> left, <span class="type">int</span> right) &#123;</span><br><span class="line">        <span class="type">int</span> n = right - left + <span class="number">1</span>;</span><br><span class="line">        node.<span class="built_in">resize</span>(n * <span class="number">4</span>);</span><br><span class="line">        function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; build = [&amp;](<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> p) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">            node[p].lpos = l;</span><br><span class="line">            node[p].rpos = r;</span><br><span class="line">            <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">build</span>(l, m, lp);</span><br><span class="line">            <span class="built_in">build</span>(m + <span class="number">1</span>, r, rp);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">build</span>(left, right, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, Line line, <span class="type">int</span> p = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> mid = (node[p].lpos + node[p].rpos) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= node[p].lpos &amp;&amp; node[p].rpos &lt;= r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">cmp</span>(line.<span class="built_in">get</span>(mid), node[p].line.<span class="built_in">get</span>(mid)) == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(line, node[p].line);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">cmp</span>(line.<span class="built_in">get</span>(node[p].lpos), node[p].line.<span class="built_in">get</span>(node[p].lpos)) == <span class="number">1</span> || </span><br><span class="line">                (<span class="built_in">cmp</span>(line.<span class="built_in">get</span>(node[p].lpos), node[p].line.<span class="built_in">get</span>(node[p].lpos)) == <span class="number">0</span> &amp;&amp; line.id &lt; node[p].line.id)) &#123;</span><br><span class="line">                <span class="built_in">update</span>(l, r, line, lp);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">cmp</span>(line.<span class="built_in">get</span>(node[p].rpos), node[p].line.<span class="built_in">get</span>(node[p].rpos)) == <span class="number">1</span> || </span><br><span class="line">                (<span class="built_in">cmp</span>(line.<span class="built_in">get</span>(node[p].rpos), node[p].line.<span class="built_in">get</span>(node[p].rpos)) == <span class="number">0</span> &amp;&amp; line.id &lt; node[p].line.id)) &#123;</span><br><span class="line">                <span class="built_in">update</span>(l, r, line, rp);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid) &#123;</span><br><span class="line">            <span class="built_in">update</span>(l, r, line, lp);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span> (mid &lt; r) &#123;</span><br><span class="line">            <span class="built_in">update</span>(l, r, line, rp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Line <span class="title">query</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> p = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node[p].lpos == node[p].rpos) &#123;</span><br><span class="line">            <span class="keyword">return</span> node[p].line;</span><br><span class="line">        &#125;</span><br><span class="line">        Line res = node[p].line;</span><br><span class="line">        <span class="type">int</span> mid = (node[p].lpos + node[p].rpos) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        Line temp = x &lt;= mid ? <span class="built_in">query</span>(x, lp) : <span class="built_in">query</span>(x, rp);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">cmp</span>(res.<span class="built_in">get</span>(x), temp.<span class="built_in">get</span>(x)) == <span class="number">-1</span> || </span><br><span class="line">            (<span class="built_in">cmp</span>(res.<span class="built_in">get</span>(x), temp.<span class="built_in">get</span>(x)) == <span class="number">0</span> &amp;&amp; res.id &gt; temp.id)) &#123;</span><br><span class="line">            res = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>维护从 $x$ 处往下看最高的点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="type">double</span> eps = <span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">double</span> inf = <span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x - y &gt; eps) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (y - x &gt; eps) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Line</span> &#123;</span><br><span class="line">    <span class="type">double</span> k, b;</span><br><span class="line">    <span class="built_in">Line</span>() : <span class="built_in">k</span>(<span class="number">0</span>), <span class="built_in">b</span>(-inf) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">get</span><span class="params">(<span class="type">double</span> x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> k * x + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">bool</span> <span class="title">better</span><span class="params">(<span class="type">const</span> Line&amp; left, <span class="type">const</span> Line&amp; right, <span class="type">double</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">cmp</span>(left.<span class="built_in">get</span>(x), right.<span class="built_in">get</span>(x)) == <span class="number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    Line line;</span><br><span class="line">    <span class="type">int</span> lpos, rpos;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LiChaoSegmentTree</span> &#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> lp (p &lt;&lt; 1)</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> rp (p &lt;&lt; 1 | 1)</span></span><br><span class="line">    vector&lt;Node&gt; node;</span><br><span class="line">    <span class="built_in">LiChaoSegmentTree</span>(<span class="type">int</span> left, <span class="type">int</span> right) &#123;</span><br><span class="line">        <span class="type">int</span> n = right - left + <span class="number">1</span>;</span><br><span class="line">        node.<span class="built_in">resize</span>(n * <span class="number">4</span>);</span><br><span class="line">        function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; build = [&amp;](<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> p) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">            node[p].lpos = l;</span><br><span class="line">            node[p].rpos = r;</span><br><span class="line">            <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">build</span>(l, m, lp);</span><br><span class="line">            <span class="built_in">build</span>(m + <span class="number">1</span>, r, rp);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">build</span>(left, right, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, Line line, <span class="type">int</span> p = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> mid = (node[p].lpos + node[p].rpos) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= node[p].lpos &amp;&amp; node[p].rpos &lt;= r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">better</span>(line, node[p].line, mid)) <span class="built_in">swap</span>(line, node[p].line);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">better</span>(line, node[p].line, node[p].lpos)) <span class="built_in">update</span>(l, r, line, lp);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">better</span>(line, node[p].line, node[p].rpos)) <span class="built_in">update</span>(l, r, line, rp);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid) <span class="built_in">update</span>(l, r, line, lp);</span><br><span class="line">        <span class="keyword">if</span> (mid &lt; r) <span class="built_in">update</span>(l, r, line, rp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Line <span class="title">query</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> p = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node[p].lpos == node[p].rpos) &#123;</span><br><span class="line">            <span class="keyword">return</span> node[p].line;</span><br><span class="line">        &#125;</span><br><span class="line">        Line res = node[p].line;</span><br><span class="line">        <span class="type">int</span> mid = (node[p].lpos + node[p].rpos) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        Line ans = x &lt;= mid ? <span class="built_in">query</span>(x, lp) : <span class="built_in">query</span>(x, rp);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> <span class="built_in">better</span>(res, ans, x)) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(res, ans);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="SegmentTree-Divide"><a href="#SegmentTree-Divide" class="headerlink" title="SegmentTree-Divide"></a>SegmentTree-Divide</h3><p>线段树分治 + DSU</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    vector&lt;Info&gt; info; <span class="comment">// 在 [lpos, rpos] 时间点存在边 x, y</span></span><br><span class="line">    <span class="type">int</span> lpos, rpos;</span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    <span class="built_in">Node</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">Node</span>(Info i) &#123;</span><br><span class="line">        info.<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// insert</span></span><br><span class="line">    Node&amp; <span class="keyword">operator</span>+=(<span class="type">const</span> Info&amp; i) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;info.<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span> &#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> lp (p &lt;&lt; 1)</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> rp (p &lt;&lt; 1 | 1)</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    DSU dsu;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">    vector&lt;Node&gt; node;</span><br><span class="line">    <span class="built_in">SegmentTree</span>(<span class="type">int</span> n = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">resize</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">resize</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        dsu.<span class="built_in">init</span>((n + <span class="number">1</span>) * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        ans.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">        node.<span class="built_in">resize</span>((n + <span class="number">1</span>) * <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> p = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">        node[p].lpos = l;</span><br><span class="line">        node[p].rpos = r;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(l, mid, lp);</span><br><span class="line">        <span class="built_in">build</span>(mid + <span class="number">1</span>, r, rp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">const</span> Info&amp; info, <span class="type">int</span> p = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= node[p].lpos &amp;&amp; node[p].rpos &lt;= r) &#123;</span><br><span class="line">            node[p] += info;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = (node[p].lpos + node[p].rpos) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid) <span class="built_in">insert</span>(l, r, info, lp);</span><br><span class="line">        <span class="keyword">if</span> (mid &lt; r)  <span class="built_in">insert</span>(l, r, info, rp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> p = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 计算</span></span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> top = dsu.stk.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; [x, y] : node[p].info) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dsu.<span class="built_in">same</span>(x, y)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = node[p].lpos; i &lt;= node[p].rpos; i++) &#123;</span><br><span class="line">                    ans[i] = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            dsu.<span class="built_in">merge</span>(x, y + n);</span><br><span class="line">            dsu.<span class="built_in">merge</span>(x + n, y);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node[p].lpos == node[p].rpos) &#123;</span><br><span class="line">                ans[node[p].lpos] = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">solve</span>(lp);</span><br><span class="line">                <span class="built_in">solve</span>(rp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 撤销回溯</span></span><br><span class="line">        <span class="keyword">while</span> (dsu.stk.<span class="built_in">size</span>() &gt; top) &#123;</span><br><span class="line">            dsu.<span class="built_in">undo</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a>Merge</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> lpos, <span class="type">int</span> rpos)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == <span class="number">0</span> || v == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> u | v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lpos == rpos) &#123;</span><br><span class="line">        sum[u] += sum[v];</span><br><span class="line">        type[u] = lpos;</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (lpos + rpos) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    ls[u] = <span class="built_in">merge</span>(ls[u], ls[v], lpos, mid); <span class="comment">// 可持久化要动态开点</span></span><br><span class="line">    rs[u] = <span class="built_in">merge</span>(rs[u], rs[v], mid + <span class="number">1</span>, rpos);</span><br><span class="line">    <span class="built_in">push_up</span>(u);</span><br><span class="line">    <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Split"><a href="#Split" class="headerlink" title="Split"></a>Split</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// u -&gt; v;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">spilt</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span>&amp; v, <span class="type">long</span> <span class="type">long</span> k, <span class="type">int</span> lpos = <span class="number">1</span>, <span class="type">int</span> rpos = n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!v) &#123;</span><br><span class="line">        v = ++tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (u == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lpos == rpos) &#123;</span><br><span class="line">        sum[v] = sum[u] - k;</span><br><span class="line">        sum[u] = k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> s = sum[ls[u]];</span><br><span class="line">    <span class="type">int</span> mid = (lpos + rpos) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (k &lt;= s) &#123;</span><br><span class="line">        <span class="built_in">spilt</span>(ls[u], ls[v], k, lpos, mid);</span><br><span class="line">        <span class="built_in">swap</span>(rs[u], rs[v]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="built_in">spilt</span>(rs[u], rs[v], k - s, mid + <span class="number">1</span>, rpos);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">push_up</span>(u);</span><br><span class="line">    <span class="built_in">push_up</span>(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Linear-basis"><a href="#Linear-basis" class="headerlink" title="Linear basis"></a>Linear basis</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> N&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">linear_basis</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> cnt;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> basis[N];</span><br><span class="line">    <span class="built_in">linear_basis</span>() &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            basis[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = N - <span class="number">1</span>; ~i; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((x &gt;&gt; i) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (basis[i]) &#123;</span><br><span class="line">                    x ^= basis[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    basis[i] = x;</span><br><span class="line">                    cnt++;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">max_val</span><span class="params">(<span class="type">long</span> <span class="type">long</span> k = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = N - <span class="number">1</span>; ~i; i--) &#123;</span><br><span class="line">            res = <span class="built_in">max</span>(res, res ^ basis[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">const</span> linear_basis&lt;N&gt;&amp; other)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="built_in">insert</span>(other.basis[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            basis[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">orthogonalize</span><span class="params">()</span> </span>&#123;<span class="comment">//正交化</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = N - <span class="number">1</span>; ~i; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i - <span class="number">1</span>; ~j; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((basis[i] &gt;&gt; j) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                    basis[i] ^= basis[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">kth</span><span class="params">(<span class="type">long</span> <span class="type">long</span> k)</span> </span>&#123;<span class="comment">//第k小</span></span><br><span class="line">        vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; tep;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (basis[i]) &#123;</span><br><span class="line">                tep.<span class="built_in">push_back</span>(basis[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; tep.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((k &gt;&gt; i) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                res ^= tep[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">rk</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span> </span>&#123;<span class="comment">//查数排名</span></span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> l = <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> r = (<span class="number">1ll</span> &lt;&lt; <span class="built_in">size</span>()) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> Mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> val = <span class="built_in">kth</span>(Mid);</span><br><span class="line">            <span class="keyword">if</span> (val == x) &#123;</span><br><span class="line">                <span class="keyword">return</span> Mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (val &gt; x) &#123;</span><br><span class="line">                r = Mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                l = Mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> Template </category>
          
          <category> Data Structures </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String</title>
      <link href="/2024/06/14/ACM/Template/String/"/>
      <url>/2024/06/14/ACM/Template/String/</url>
      
        <content type="html"><![CDATA[<h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><h3 id="Primes-table"><a href="#Primes-table" class="headerlink" title="Primes table"></a>Primes table</h3><table><thead><tr><th align="center">1E3</th><th align="center">1E6</th><th align="center">1E9</th><th align="center">1E18</th></tr></thead><tbody><tr><td align="center">1009</td><td align="center">1000003</td><td align="center">1000000021</td><td align="center">1000000000000000003</td></tr><tr><td align="center">1013</td><td align="center">1000033</td><td align="center">1000000033</td><td align="center">1000000000000000009</td></tr><tr><td align="center">1019</td><td align="center">1000037</td><td align="center">1000000933</td><td align="center">1000000000000000031</td></tr><tr><td align="center">1021</td><td align="center">1000039</td><td align="center">1000000993</td><td align="center">1000000000000000079</td></tr></tbody></table><h3 id="Random-Hash"><a href="#Random-Hash" class="headerlink" title="Random Hash"></a>Random Hash</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 随机 hash</span></span><br><span class="line"><span class="function">std::mt19937 <span class="title">rng</span><span class="params">(std::chrono::steady_clock::now().time_since_epoch().count())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> vector&lt;<span class="type">int</span>&gt; MOD = &#123;</span><br><span class="line">    <span class="number">1000000021</span>, </span><br><span class="line">    <span class="number">1000000033</span>,</span><br><span class="line">    <span class="number">1000000087</span>,</span><br><span class="line">    <span class="number">1000000093</span>,</span><br><span class="line">    <span class="number">1000000097</span>,</span><br><span class="line">    <span class="number">1000000933</span>,</span><br><span class="line">    <span class="number">1000000993</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> vector&lt;<span class="type">int</span>&gt; BASE = &#123;</span><br><span class="line">    <span class="number">10007</span>,</span><br><span class="line">    <span class="number">10009</span>,</span><br><span class="line">    <span class="number">10037</span>,</span><br><span class="line">    <span class="number">10039</span>,</span><br><span class="line">    <span class="number">10061</span>,</span><br><span class="line">    <span class="number">10067</span>,</span><br><span class="line">    <span class="number">10069</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetMod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> MOD[<span class="built_in">rng</span>() % MOD.<span class="built_in">size</span>()];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetBase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BASE[<span class="built_in">rng</span>() % BASE.<span class="built_in">size</span>()];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Mod = <span class="built_in">GetMod</span>();</span><br><span class="line"><span class="type">int</span> Base = <span class="built_in">GetBase</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// [1, n] 直接传 s</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span> = std::string&gt;</span><br><span class="line"><span class="keyword">struct</span> Hash &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> mod, base;</span><br><span class="line">    std::vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; power, key;</span><br><span class="line">    <span class="built_in">Hash</span>(<span class="type">const</span> T&amp; s, <span class="type">int</span> _mod, <span class="type">int</span> _base) : <span class="built_in">mod</span>(_mod), <span class="built_in">base</span>(_base) &#123;</span><br><span class="line">        n = s.<span class="built_in">size</span>();</span><br><span class="line">        power.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">        key.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">        power[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            power[i] = power[i - <span class="number">1</span>] * base % mod;</span><br><span class="line">            key[i] = (key[i - <span class="number">1</span>] * base + s[i - <span class="number">1</span>]) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;<span class="comment">// 下标从 1 开始</span></span><br><span class="line">        <span class="keyword">return</span> ((key[r] - key[l - <span class="number">1</span>] * power[r - l + <span class="number">1</span>]) % mod + mod) % mod; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Sequence-Hash"><a href="#Sequence-Hash" class="headerlink" title="Sequence Hash"></a>Sequence Hash</h3><p>2024&#x2F;1&#x2F;18 版本</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [1, n] 直接传 s</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> mod = <span class="number">1000000993</span>, <span class="type">int</span> base = <span class="number">10333</span>, <span class="keyword">class</span> T = std::string&gt;</span><br><span class="line"><span class="keyword">struct</span> Hash &#123;</span><br><span class="line">    std::vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; power, key;</span><br><span class="line">    <span class="built_in">Hash</span>(<span class="type">const</span> T&amp; s)&#123;<span class="comment">// 直接传 s</span></span><br><span class="line">        power.<span class="built_in">resize</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        key.<span class="built_in">resize</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">extend</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">extend</span><span class="params">(<span class="type">const</span> T&amp; s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            power.<span class="built_in">push_back</span>(power.<span class="built_in">back</span>() * base % mod);</span><br><span class="line">            key.<span class="built_in">push_back</span>((key.<span class="built_in">back</span>() * base + s[i]) % mod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        power.<span class="built_in">pop_back</span>();</span><br><span class="line">        key.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> <span class="type">const</span> </span>&#123;<span class="comment">// 下标从 1 开始</span></span><br><span class="line">        <span class="keyword">return</span> ((key[r] - key[l - <span class="number">1</span>] * power[r - l + <span class="number">1</span>]) % mod + mod) % mod; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Set-Hash"><a href="#Set-Hash" class="headerlink" title="Set Hash"></a>Set Hash</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 集合 Hash 只关心元素种类，个数 （顺序无关）</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> mod = <span class="number">1000000993</span>, <span class="type">int</span> base = <span class="number">10333</span>, <span class="keyword">class</span> T = <span class="type">int</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> Hash &#123;</span><br><span class="line">    <span class="type">int</span> key;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; power;</span><br><span class="line">    <span class="built_in">Hash</span>(<span class="type">int</span> n)&#123; <span class="comment">// 集合最大元素</span></span><br><span class="line">        power.<span class="built_in">resize</span>(n + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            power[i] = (<span class="type">long</span> <span class="type">long</span>) power[i - <span class="number">1</span>] * base % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        key = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> T&amp; val)</span></span>&#123;</span><br><span class="line">        key += power[val];</span><br><span class="line">        <span class="keyword">if</span>(key &gt; mod)&#123;</span><br><span class="line">            key -= mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">(<span class="type">const</span> T&amp; val)</span></span>&#123;</span><br><span class="line">        key -= power[val];</span><br><span class="line">        <span class="keyword">if</span>(key &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            key += mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 集合 Hash 只关心元素种类，个数 （顺序无关）</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> mod = <span class="number">1000000993</span>, <span class="type">int</span> base = <span class="number">10333</span>, <span class="keyword">class</span> T = <span class="type">int</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> Hash &#123;</span><br><span class="line">    <span class="type">int</span> key;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; power;</span><br><span class="line">    <span class="comment">// n -&gt; 集合最大元素</span></span><br><span class="line">    <span class="built_in">Hash</span>(<span class="type">int</span> n)&#123; </span><br><span class="line">        power.<span class="built_in">resize</span>(n + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            power[i] = (<span class="type">long</span> <span class="type">long</span>) power[i - <span class="number">1</span>] * base % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        key = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 增加元素 val</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> T&amp; val)</span></span>&#123;</span><br><span class="line">        key += power[val];</span><br><span class="line">        <span class="keyword">if</span>(key &gt;= mod)&#123;</span><br><span class="line">            key -= mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 删除元素 val</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">(<span class="type">const</span> T&amp; val)</span></span>&#123;</span><br><span class="line">        key -= power[val];</span><br><span class="line">        <span class="keyword">if</span>(key &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            key += mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Hash key</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">// 集合合并</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">const</span> Hash&lt;mod, base, T&gt;&amp; h)</span></span>&#123;</span><br><span class="line">        key += h.key;</span><br><span class="line">        <span class="keyword">if</span>(key &gt;= mod)&#123;</span><br><span class="line">            key -= mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 集合相减</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">const</span> Hash&lt;mod, base, T&gt;&amp; h)</span></span>&#123;</span><br><span class="line">        key -= h.key;</span><br><span class="line">        <span class="keyword">if</span>(key &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            key += mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 集合清空</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">        key = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 集合相等</span></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> Hash&lt;mod, base, T&gt;&amp; h) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> key == h.key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h2><h3 id="Prefix-Trie"><a href="#Prefix-Trie" class="headerlink" title="Prefix Trie"></a>Prefix Trie</h3><p>2024&#x2F;1&#x2F;20</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> N = <span class="number">26</span>, <span class="type">int</span> offset = -<span class="string">&#x27;a&#x27;</span>, <span class="keyword">class</span> T = std::string&gt;</span><br><span class="line"><span class="keyword">struct</span> Trie &#123;</span><br><span class="line">    <span class="type">int</span> cnt;</span><br><span class="line">    Trie&lt;N, offset, T&gt;* next[N];</span><br><span class="line">    <span class="built_in">Trie</span>()&#123;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">            next[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">const</span> T&amp; s)</span></span>&#123;</span><br><span class="line">        Trie&lt;N, offset, T&gt;* cur = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;next[s[i] + offset] == <span class="number">0</span>)&#123;</span><br><span class="line">                cur-&gt;next[s[i] + offset] = <span class="keyword">new</span> <span class="built_in">Trie</span>&lt;N, offset, T&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur-&gt;next[s[i] + offset];</span><br><span class="line">            cur-&gt;cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(<span class="type">const</span> T&amp; s)</span></span>&#123;</span><br><span class="line">        Trie&lt;N, offset, T&gt;* cur = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;next[s[i] + offset] == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur-&gt;next[s[i] + offset];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur-&gt;cnt;     </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">exist</span><span class="params">(<span class="type">const</span> T&amp; s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">count</span>(s) != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Xor-Trie"><a href="#Xor-Trie" class="headerlink" title="Xor Trie"></a>Xor Trie</h3><p>2024&#x2F;1&#x2F;20</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> N&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">XorTrie</span> &#123;</span><br><span class="line">    XorTrie* next[<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">XorTrie</span>()&#123;</span><br><span class="line">        next[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        next[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span></span>&#123;</span><br><span class="line">        XorTrie* cur = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = N - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;next[(x &gt;&gt; i) &amp; <span class="number">1</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">                cur-&gt;next[(x &gt;&gt; i) &amp; <span class="number">1</span>] = <span class="keyword">new</span> <span class="built_in">XorTrie</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur-&gt;next[(x &gt;&gt; i) &amp; <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">query</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span></span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        XorTrie* cur = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = N - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;next[((x &gt;&gt; i) &amp; <span class="number">1</span>) ^ <span class="number">1LL</span>] != <span class="number">0</span>)&#123;</span><br><span class="line">                cur = cur-&gt;next[((x &gt;&gt; i) &amp; <span class="number">1</span>) ^ <span class="number">1LL</span>];</span><br><span class="line">                ans |= <span class="number">1LL</span> &lt;&lt; i;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cur = cur-&gt;next[(x &gt;&gt; i) &amp; <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><p>2024&#x2F;1&#x2F;27</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [1, n]  直接传 s</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">get_next</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">    s = <span class="string">&quot;#&quot;</span> + s;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">next</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= n; i++)&#123;<span class="comment">// 真前缀</span></span><br><span class="line">        <span class="keyword">while</span>(j != <span class="number">0</span> &amp;&amp; s[i] != s[j + <span class="number">1</span>])&#123;</span><br><span class="line">            j = next[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == s[j + <span class="number">1</span>])&#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        next[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [1, n]  直接传 text, pattern</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">kmp</span><span class="params">(string text, string pattern)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = text.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> m = pattern.<span class="built_in">size</span>();</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; next = <span class="built_in">get_next</span>(pattern);</span><br><span class="line">    text = <span class="string">&quot;#&quot;</span> + text;</span><br><span class="line">    pattern = <span class="string">&quot;#&quot;</span> + pattern + <span class="string">&quot;#&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j != <span class="number">0</span> &amp;&amp; text[i] != pattern[j + <span class="number">1</span>])&#123;</span><br><span class="line">            j = next[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(text[i] == pattern[j + <span class="number">1</span>])&#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j == m)&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(i - m + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>trick</strong></p><p>设 $f(str)$ 表示 $str$ 最长前后缀长度</p><p>给定字符串 $s$ ，在 $s$ 前后各增加一个字符变为新串 $t$ ，则 $f(t) \le f(s) + 2$ ，暴力从大到小枚举 $f(t)$ 看是否合法，假设操作 $n$ 次，复杂度 $O(n)$<br>$$<br>f(t) &#x3D; f(s) + 2<br>$$</p><p>$$<br>while (t_{1, f(t)} \neq t_{n - f(t) + 1, n}) \quad f(t) –<br>$$</p><h2 id="EXKMP"><a href="#EXKMP" class="headerlink" title="EXKMP"></a>EXKMP</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [1, n] 直接传 s</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">exkmp</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">    s = <span class="string">&quot;#&quot;</span> + s;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">z</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    z[<span class="number">1</span>] = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>, l = <span class="number">1</span>, r = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt;= r) &#123;</span><br><span class="line">            z[i] = <span class="built_in">min</span>(z[i - l + <span class="number">1</span>], r - i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i + z[i] &lt;= n &amp;&amp; s[<span class="number">1</span> + z[i]] == s[i + z[i]]) &#123;</span><br><span class="line">            z[i]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i + z[i] - <span class="number">1</span> &gt; r) &#123;</span><br><span class="line">            l = i;</span><br><span class="line">            r = i + z[i] - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Manacher"><a href="#Manacher" class="headerlink" title="Manacher"></a>Manacher</h2><p>time:2024&#x2F;1&#x2F;31</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// i % 2 == 1 -&gt; d[i] / 2 * 2 - 1</span></span><br><span class="line"><span class="comment">// i % 2 == 0 -&gt; d[i] / 2 * 2</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">manacher</span><span class="params">(<span class="type">const</span> string&amp; s, <span class="type">char</span> obstacle = <span class="string">&#x27;#&#x27;</span>)</span> </span>&#123;</span><br><span class="line">    string t;</span><br><span class="line">    t += obstacle;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        t += s[i];</span><br><span class="line">        t += obstacle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n = t.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">d</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, l = <span class="number">0</span>, r = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt;= r) &#123;</span><br><span class="line">            d[i] = <span class="built_in">min</span>(d[r - i + l], r - i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">0</span> &lt;= i - d[i] &amp;&amp; i + d[i] &lt; n &amp;&amp; t[i - d[i]] == t[i + d[i]]) &#123;</span><br><span class="line">            d[i]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i + d[i] - <span class="number">1</span> &gt; r)&#123;</span><br><span class="line">            l = i - d[i] + <span class="number">1</span>;</span><br><span class="line">            r = i + d[i] - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Suffix-Array"><a href="#Suffix-Array" class="headerlink" title="Suffix_Array"></a>Suffix_Array</h2><p>$author$ : $Heltion$</p><p>$range$ : $[0, n - 1]$</p><p>$p$ ： 排序后 $suffix$ 在原 $s$ 中的开头位置</p><p>$rank$ ： 排序后以 $s[i]$ 开头的 $suffix$ 的排名</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Suffix_Array</span> &#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; p, rank;</span><br><span class="line">    <span class="built_in">Suffix_Array</span>(string s) &#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>(), k = <span class="number">0</span>;</span><br><span class="line">        p.<span class="built_in">resize</span>(n);</span><br><span class="line">        rank.<span class="built_in">resize</span>(n);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; q, count;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) p[i] = i;</span><br><span class="line">        ranges::<span class="built_in">sort</span>(p, &#123;&#125;, [&amp;](<span class="type">int</span> i) &#123; <span class="keyword">return</span> s[i]; &#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) rank[p[i]] = i <span class="keyword">and</span> s[p[i]] == s[p[i - <span class="number">1</span>]] ? rank[p[i - <span class="number">1</span>]] : k++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> m = <span class="number">1</span>; m &lt; n; m *= <span class="number">2</span>) &#123;</span><br><span class="line">            q.<span class="built_in">resize</span>(m);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i += <span class="number">1</span>) q[i] = n - m + i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i : p)</span><br><span class="line">                <span class="keyword">if</span> (i &gt;= m) q.<span class="built_in">push_back</span>(i - m);</span><br><span class="line">            count.<span class="built_in">assign</span>(k, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i : rank) count[i] += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; k; i += <span class="number">1</span>) count[i] += count[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -= <span class="number">1</span>) p[count[rank[q[i]]] -= <span class="number">1</span>] = q[i];</span><br><span class="line">            <span class="keyword">auto</span> cur = rank;</span><br><span class="line">            cur.<span class="built_in">resize</span>(<span class="number">2</span> * n, <span class="number">-1</span>);</span><br><span class="line">            k = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) rank[p[i]] = i <span class="keyword">and</span> cur[p[i]] == cur[p[i - <span class="number">1</span>]] <span class="keyword">and</span> cur[p[i] + m] == cur[p[i - <span class="number">1</span>] + m] ? rank[p[i - <span class="number">1</span>]] : k++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>$$<br>引理 \quad height[rank[i]] \ge height[rank[i - 1]] - 1<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Suffix_Array</span> &#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; p, rank, height;</span><br><span class="line">    <span class="built_in">Suffix_Array</span>(string s) &#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>(), k = <span class="number">0</span>;</span><br><span class="line">        p.<span class="built_in">resize</span>(n);</span><br><span class="line">        rank.<span class="built_in">resize</span>(n);</span><br><span class="line">        height.<span class="built_in">resize</span>(n);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; q, count;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) p[i] = i;</span><br><span class="line">        ranges::<span class="built_in">sort</span>(p, &#123;&#125;, [&amp;](<span class="type">int</span> i) &#123; <span class="keyword">return</span> s[i]; &#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) rank[p[i]] = i <span class="keyword">and</span> s[p[i]] == s[p[i - <span class="number">1</span>]] ? rank[p[i - <span class="number">1</span>]] : k++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> m = <span class="number">1</span>; m &lt; n; m &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            q.<span class="built_in">resize</span>(m);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) q[i] = n - m + i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i : p)</span><br><span class="line">                <span class="keyword">if</span> (i &gt;= m) q.<span class="built_in">push_back</span>(i - m);</span><br><span class="line">            count.<span class="built_in">assign</span>(k, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i : rank) count[i] += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; k; i++) count[i] += count[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) p[count[rank[q[i]]] -= <span class="number">1</span>] = q[i];</span><br><span class="line">            <span class="keyword">auto</span> cur = rank;</span><br><span class="line">            cur.<span class="built_in">resize</span>(<span class="number">2</span> * n, <span class="number">-1</span>);</span><br><span class="line">            k = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) rank[p[i]] = i <span class="keyword">and</span> cur[p[i]] == cur[p[i - <span class="number">1</span>]] <span class="keyword">and</span> cur[p[i] + m] == cur[p[i - <span class="number">1</span>] + m] ? rank[p[i - <span class="number">1</span>]] : k++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, c = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (rank[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (c) c--;</span><br><span class="line">                <span class="type">int</span> j = p[rank[i] - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">while</span> (i + c &lt; n &amp;&amp; j + c &lt; n &amp;&amp; s[i + c] == s[j + c]) c++;</span><br><span class="line">                height[rank[i]] = c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>$$<br>lcp(suf_{i}, suf_{j}) &#x3D; \min\limits_{k &#x3D; rank_{i} + 1}^{rank_{j}} (height_{k})<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Sparse_Table</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> logn;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; log;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; val;</span><br><span class="line">    <span class="built_in">Sparse_Table</span>(vector&lt;<span class="type">int</span>&gt; v) &#123;</span><br><span class="line">        n = v.<span class="built_in">size</span>();</span><br><span class="line">        logn = <span class="built_in">log2</span>(n);</span><br><span class="line">        log.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">        val.<span class="built_in">resize</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(logn + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            log[i] = log[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            val[i][<span class="number">0</span>] = v[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= logn; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt; n; i++) &#123;</span><br><span class="line">                val[i][j] = <span class="built_in">min</span>(val[i][j - <span class="number">1</span>], val[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &lt; <span class="number">0</span> || r &gt;= n) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> k = log[r - l + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(val[l][k], val[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="AcAutomaton"><a href="#AcAutomaton" class="headerlink" title="AcAutomaton"></a>AcAutomaton</h2><p>指针版</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> N = <span class="number">26</span>, <span class="type">int</span> OFFSET = -<span class="string">&#x27;a&#x27;</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> AcAutomaton &#123;</span><br><span class="line">    <span class="keyword">struct</span> Node &#123;</span><br><span class="line">        <span class="type">int</span> cnt;</span><br><span class="line">        Node* prev;</span><br><span class="line">        Node* next[N];</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; info;<span class="comment">// 记录字符串 id</span></span><br><span class="line">        vector&lt;Node*&gt; tree;<span class="comment">// 记录 prev 来源，建树</span></span><br><span class="line">        <span class="built_in">Node</span>() &#123;</span><br><span class="line">            cnt = <span class="number">0</span>;</span><br><span class="line">            prev = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">                next[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    Node* root;</span><br><span class="line">    <span class="built_in">AcAutomaton</span>(<span class="type">const</span> vector&lt;string&gt;&amp; vs) &#123;</span><br><span class="line">        n = vs.<span class="built_in">size</span>();</span><br><span class="line">        root = <span class="keyword">new</span> <span class="built_in">Node</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; vs.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="built_in">insert</span>(vs[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">build</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">const</span> string&amp; s, <span class="type">int</span> id)</span> </span>&#123;</span><br><span class="line">        Node* cur = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x : s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;next[x + OFFSET] == <span class="number">0</span>) &#123;</span><br><span class="line">                cur-&gt;next[x + OFFSET] = <span class="keyword">new</span> <span class="built_in">Node</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur-&gt;next[x + OFFSET];</span><br><span class="line">        &#125;</span><br><span class="line">        cur-&gt;info.<span class="built_in">push_back</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        queue&lt;Node*&gt; q;</span><br><span class="line">        root-&gt;prev = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root-&gt;next[i] != <span class="number">0</span>) &#123;</span><br><span class="line">                root-&gt;tree.<span class="built_in">push_back</span>(root-&gt;next[i]);<span class="comment">// build fail tree</span></span><br><span class="line">                root-&gt;next[i]-&gt;prev = root;</span><br><span class="line">                q.<span class="built_in">push</span>(root-&gt;next[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                root-&gt;next[i] = root;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> cur = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cur-&gt;next[i] != <span class="number">0</span>) &#123;</span><br><span class="line">                    cur-&gt;prev-&gt;next[i]-&gt;tree.<span class="built_in">push_back</span>(cur-&gt;next[i]);<span class="comment">// build fail tree</span></span><br><span class="line">                    cur-&gt;next[i]-&gt;prev = cur-&gt;prev-&gt;next[i];</span><br><span class="line">                    q.<span class="built_in">push</span>(cur-&gt;next[i]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    cur-&gt;next[i] = cur-&gt;prev-&gt;next[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">count</span><span class="params">(<span class="type">const</span> string&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">res</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">auto</span> cur = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            cur = cur-&gt;next[s[i] + OFFSET];</span><br><span class="line">            cur-&gt;cnt += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> dfs = [&amp;](<span class="keyword">auto</span> self, <span class="keyword">auto</span> cur) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; v : cur-&gt;tree) &#123;</span><br><span class="line">                <span class="built_in">self</span>(self, v);</span><br><span class="line">                cur-&gt;cnt += v-&gt;cnt;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; id : cur-&gt;info) &#123;</span><br><span class="line">                res[id] = cur-&gt;cnt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">dfs</span>(dfs, root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>数组版</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">AcAutomaton</span> &#123;</span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line">    <span class="type">int</span> OFFSET;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> all;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; fail, cnt;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ch;</span><br><span class="line">    <span class="built_in">AcAutomaton</span>(<span class="type">const</span> vector&lt;string&gt;&amp; vs, <span class="type">int</span> _N = <span class="number">26</span>, <span class="type">int</span> _OFFSET = -<span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">        N = _N;</span><br><span class="line">        OFFSET = _OFFSET;</span><br><span class="line"></span><br><span class="line">        n = <span class="number">0</span>;</span><br><span class="line">        all = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x : vs) &#123;</span><br><span class="line">            n += x.<span class="built_in">size</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fail.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">        cnt.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">        ch.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            ch[i].<span class="built_in">resize</span>(N);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x : vs) &#123;</span><br><span class="line">            <span class="built_in">insert</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">build</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">const</span> string&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x : s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch[p][x + OFFSET] == <span class="number">0</span>) &#123;</span><br><span class="line">                ch[p][x + OFFSET] = ++all;</span><br><span class="line">            &#125;</span><br><span class="line">            p = ch[p][x + OFFSET];</span><br><span class="line">        &#125;</span><br><span class="line">        cnt[p] += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;<span class="comment">// #</span></span><br><span class="line">            <span class="keyword">if</span> (ch[<span class="number">0</span>][i]) &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(ch[<span class="number">0</span>][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> p = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ch[p][i] == <span class="number">0</span>) &#123;</span><br><span class="line">                    ch[p][i] = ch[fail[p]][i];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    fail[ch[p][i]] = ch[fail[p]][i];</span><br><span class="line">                    cnt[ch[p][i]] += cnt[ch[fail[p]][i]];</span><br><span class="line">                    q.<span class="built_in">push</span>(ch[p][i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>update: 2024&#x2F;2&#x2F;29</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">AcAutomaton</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> N;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> OFFSET;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> all;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; fail, cnt;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ch;</span><br><span class="line">    <span class="built_in">AcAutomaton</span>(<span class="type">const</span> vector&lt;string&gt;&amp; vs, <span class="type">int</span> _N = <span class="number">26</span>, <span class="type">int</span> _OFFSET = -<span class="string">&#x27;a&#x27;</span>) : <span class="built_in">N</span>(_N), <span class="built_in">OFFSET</span>(_OFFSET) &#123;</span><br><span class="line">        n = <span class="number">0</span>;</span><br><span class="line">        all = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x : vs) &#123;</span><br><span class="line">            n += x.<span class="built_in">size</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fail.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">        cnt.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">        ch.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            ch[i].<span class="built_in">resize</span>(N);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x : vs) &#123;</span><br><span class="line">            <span class="built_in">insert</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">build</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">const</span> string&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x : s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch[p][x + OFFSET] == <span class="number">0</span>) &#123;</span><br><span class="line">                ch[p][x + OFFSET] = ++all;</span><br><span class="line">            &#125;</span><br><span class="line">            p = ch[p][x + OFFSET];</span><br><span class="line">        &#125;</span><br><span class="line">        cnt[p] += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch[<span class="number">0</span>][i]) &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(ch[<span class="number">0</span>][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> p = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">0</span>; c &lt; N; c++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ch[p][c]) &#123;</span><br><span class="line">                    fail[ch[p][c]] = ch[fail[p]][c];</span><br><span class="line">                    cnt[ch[p][c]] += cnt[ch[fail[p]][c]];</span><br><span class="line">                    q.<span class="built_in">push</span>(ch[p][c]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ch[p][c] = ch[fail[p]][c];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>AcAutomaton + Fenwick 维护 fail tree</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Fenwick</span> &#123;</span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line">    vector&lt;T&gt; C, S;</span><br><span class="line">    <span class="built_in">Fenwick</span>(<span class="type">int</span> n = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">resize</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">resize</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        N = n;</span><br><span class="line">        C.<span class="built_in">resize</span>(N);</span><br><span class="line">        S.<span class="built_in">resize</span>(N);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> p, T k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = p; i &lt; N; i += <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">            C[i] += k;</span><br><span class="line">            S[i] += k * p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, T k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">add</span>(l, + k);</span><br><span class="line">        <span class="built_in">add</span>(r + <span class="number">1</span>, -k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">prefixsum</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        T Csum = <span class="number">0</span>;</span><br><span class="line">        T Ssum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = p; i &gt; <span class="number">0</span>; i -= <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">            Csum += C[i] * (p + <span class="number">1</span>);</span><br><span class="line">            Ssum += S[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Csum - Ssum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">rangesum</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">prefixsum</span>(r) - <span class="built_in">prefixsum</span>(l - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">AcAutomaton</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> N;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> OFFSET;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> all;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; cnt;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; fail;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ch;</span><br><span class="line">    <span class="comment">// other func</span></span><br><span class="line">    <span class="type">int</span> m; <span class="comment">// vs size</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; id;<span class="comment">// ith string -&gt; the id of trie node</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; tree; <span class="comment">// fail tree</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; dfn;<span class="comment">// the dfn of fail tree node</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; siz;<span class="comment">// ths size of subtree</span></span><br><span class="line">    Fenwick&lt;<span class="type">long</span> <span class="type">long</span>&gt; f;<span class="comment">// the cnt of fail tree node</span></span><br><span class="line">    <span class="built_in">AcAutomaton</span>(<span class="type">const</span> vector&lt;string&gt;&amp; vs, <span class="type">int</span> _N = <span class="number">26</span>, <span class="type">int</span> _OFFSET = -<span class="string">&#x27;a&#x27;</span>) : <span class="built_in">N</span>(_N), <span class="built_in">OFFSET</span>(_OFFSET) &#123;</span><br><span class="line">        n = <span class="number">0</span>;</span><br><span class="line">        all = <span class="number">0</span>;</span><br><span class="line">        m = vs.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x : vs) &#123;</span><br><span class="line">            n += x.<span class="built_in">size</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cnt.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">        fail.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">        ch.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            ch[i].<span class="built_in">resize</span>(N);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        id.<span class="built_in">resize</span>(m);<span class="comment">// m</span></span><br><span class="line">        tree.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">        dfn.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">        siz.<span class="built_in">resize</span>(n + <span class="number">1</span>, <span class="number">1</span>);<span class="comment">// init with 1</span></span><br><span class="line">        f.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; vs.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="built_in">insert</span>(vs[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">build</span>();</span><br><span class="line">        all = <span class="number">0</span>;<span class="comment">// reset all to 0</span></span><br><span class="line">        <span class="built_in">dfs</span>();</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">const</span> string&amp; s, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x : s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch[p][x + OFFSET] == <span class="number">0</span>) &#123;</span><br><span class="line">                ch[p][x + OFFSET] = ++all;</span><br><span class="line">            &#125;</span><br><span class="line">            p = ch[p][x + OFFSET];</span><br><span class="line">        &#125;</span><br><span class="line">        cnt[p] += <span class="number">1</span>;</span><br><span class="line">        id[i] = p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch[<span class="number">0</span>][i]) &#123;</span><br><span class="line">                tree[<span class="number">0</span>].<span class="built_in">push_back</span>(ch[<span class="number">0</span>][i]);</span><br><span class="line">                q.<span class="built_in">push</span>(ch[<span class="number">0</span>][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> p = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ch[p][i]) &#123;</span><br><span class="line">                    fail[ch[p][i]] = ch[fail[p]][i];</span><br><span class="line">                    q.<span class="built_in">push</span>(ch[p][i]);</span><br><span class="line">                    cnt[ch[p][i]] += cnt[ch[fail[p]][i]];</span><br><span class="line">                    tree[ch[fail[p]][i]].<span class="built_in">push_back</span>(ch[p][i]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ch[p][i] = ch[fail[p]][i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        dfn[u] = all++;<span class="comment">// all++</span></span><br><span class="line">        <span class="keyword">if</span> (dfn[u]) &#123;</span><br><span class="line">            f.<span class="built_in">update</span>(dfn[u], dfn[u], cnt[u]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; v : tree[u]) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(v);</span><br><span class="line">            siz[u] += siz[v];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l = dfn[id[i]];</span><br><span class="line">        <span class="type">int</span> r = dfn[id[i]] + siz[id[i]] - <span class="number">1</span>;</span><br><span class="line">        f.<span class="built_in">update</span>(l, r, + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dn</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l = dfn[id[i]];</span><br><span class="line">        <span class="type">int</span> r = dfn[id[i]] + siz[id[i]] - <span class="number">1</span>;</span><br><span class="line">        f.<span class="built_in">update</span>(l, r, - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">get</span><span class="params">(<span class="type">const</span> string&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, p = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            p = ch[p][s[i] + OFFSET];</span><br><span class="line">            ans += f.<span class="built_in">rangesum</span>(dfn[p], dfn[p]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Suffix-Automaton"><a href="#Suffix-Automaton" class="headerlink" title="Suffix Automaton"></a>Suffix Automaton</h2><p>$Tips$ </p><ol><li>本质不同的子串 $\sum (len(u) - len(link(u)))$  </li><li>$endpos$ 不是 $len$ ，分裂出的点有 $len$ 无 $endpos$ </li><li>$link \ tree$ 对子树求和可以得到 $endpos(s)$ 的大小，可以线段树合并计算子树的 $endpos$ （<strong>若在线计算， merge 需要可持久化开点</strong>）</li><li>以状态 $u$ 开始的子串数 $c_{u} &#x3D; 1 + \sum c_{v}$ （在 $parent \ tree$ 上计算 ） 可用于求 $kth$ 子串，若要求本质不同 $|endpos(s)|$ 设置为 $1$ 即可</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SAM</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> ALPHABET_SIZE = <span class="number">26</span>;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> cnt;</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">int</span> link;</span><br><span class="line">        <span class="type">int</span> endpos;</span><br><span class="line">        <span class="type">int</span> next[ALPHABET_SIZE];</span><br><span class="line">        <span class="built_in">Node</span>() : cnt&#123;&#125;, len&#123;&#125;, link&#123;&#125;, endpos&#123;&#125;, next&#123;&#125; &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> cur;</span><br><span class="line">    <span class="type">int</span> all;</span><br><span class="line">    Node node[N &lt;&lt; <span class="number">1</span>];<span class="comment">// 两倍 |S| </span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; tree[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">SAM</span>() &#123;</span><br><span class="line">        cur = <span class="number">1</span>;</span><br><span class="line">        all = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">newNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">extend</span><span class="params">(<span class="type">int</span> c, <span class="type">int</span> offset = -<span class="string">&#x27;a&#x27;</span>)</span> </span>&#123;</span><br><span class="line">        c += offset;</span><br><span class="line">        <span class="type">int</span> pre = cur;</span><br><span class="line">        cur = <span class="built_in">newNode</span>();</span><br><span class="line">        node[cur].cnt = <span class="number">1</span>;</span><br><span class="line">        node[cur].len = node[pre].len + <span class="number">1</span>;</span><br><span class="line">        node[cur].endpos = node[pre].endpos + <span class="number">1</span>;<span class="comment">// endpos</span></span><br><span class="line">        <span class="keyword">while</span> (pre &amp;&amp; !node[pre].next[c]) &#123;</span><br><span class="line">            node[pre].next[c] = cur;</span><br><span class="line">            pre = node[pre].link;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pre == <span class="number">0</span>) &#123;</span><br><span class="line">            node[cur].link = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> pos = node[pre].next[c];</span><br><span class="line">            <span class="keyword">if</span> (node[pos].len == node[pre].len + <span class="number">1</span>) &#123;</span><br><span class="line">                node[cur].link = pos;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;    </span><br><span class="line">                <span class="type">int</span> newpos = <span class="built_in">newNode</span>();</span><br><span class="line">                node[newpos].len = node[pre].len + <span class="number">1</span>;<span class="comment">// 无 endpos</span></span><br><span class="line">                node[newpos].link = node[pos].link;</span><br><span class="line">                node[pos].link = newpos;</span><br><span class="line">                node[cur].link = newpos;</span><br><span class="line">                <span class="keyword">while</span> (pre &amp;&amp; node[pre].next[c] == pos) &#123;</span><br><span class="line">                    node[pre].next[c] = newpos;</span><br><span class="line">                    pre = node[pre].link;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ALPHABET_SIZE; i++) &#123;</span><br><span class="line">                    node[newpos].next[i] = node[pos].next[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Extend-Suffix-Automaton"><a href="#Extend-Suffix-Automaton" class="headerlink" title="Extend Suffix Automaton"></a>Extend Suffix Automaton</h2><h3 id="Off-line"><a href="#Off-line" class="headerlink" title="Off-line"></a>Off-line</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 离线 ExSAM</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ExSAM</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> ALPHABET_SIZE = <span class="number">26</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">int</span> link;</span><br><span class="line">        <span class="type">int</span> next[ALPHABET_SIZE];</span><br><span class="line">        <span class="built_in">Node</span>() : len&#123;&#125;, link&#123;&#125;, next&#123;&#125; &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> all;</span><br><span class="line">    Node node[N &lt;&lt; <span class="number">1</span>]; <span class="comment">// |S| * 2</span></span><br><span class="line">    <span class="built_in">ExSAM</span>() : <span class="built_in">all</span>(<span class="number">1</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">newNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> lst, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> cur = node[lst].next[c]; <span class="comment">// </span></span><br><span class="line">        <span class="keyword">if</span> (node[cur].len) <span class="keyword">return</span> cur;</span><br><span class="line">        node[cur].len = node[lst].len + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> pre = node[lst].link; <span class="comment">// 和SAM 不一样</span></span><br><span class="line">        <span class="keyword">while</span> (pre &amp;&amp; !node[pre].next[c]) &#123;</span><br><span class="line">            node[pre].next[c] = cur;</span><br><span class="line">            pre = node[pre].link;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pre == <span class="number">0</span>) &#123;</span><br><span class="line">            node[cur].link = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> pos = node[pre].next[c];</span><br><span class="line">            <span class="keyword">if</span> (node[pos].len == node[pre].len + <span class="number">1</span>) &#123;</span><br><span class="line">                node[cur].link = pos;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> newpos = <span class="built_in">newNode</span>();</span><br><span class="line">                node[newpos].len = node[pre].len + <span class="number">1</span>;</span><br><span class="line">                node[newpos].link = node[pos].link;</span><br><span class="line">                node[pos].link = newpos;</span><br><span class="line">                node[cur].link = newpos;</span><br><span class="line">                <span class="keyword">while</span> (pre &amp;&amp; node[pre].next[c] == pos) &#123;</span><br><span class="line">                    node[pre].next[c] = newpos;</span><br><span class="line">                    pre = node[pre].link;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ALPHABET_SIZE; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (node[node[pos].next[i]].len) &#123; <span class="comment">// 不会指向空</span></span><br><span class="line">                        node[newpos].next[i] = node[pos].next[i];</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        node[newpos].next[i] = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一、建立字典树</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">const</span> string&amp; s, <span class="type">int</span> offset = -<span class="string">&#x27;a&#x27;</span>)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> p = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x : s) &#123;</span><br><span class="line">            <span class="type">int</span> c = x + offset;</span><br><span class="line">            <span class="keyword">if</span> (node[p].next[c] == <span class="number">0</span>) &#123;</span><br><span class="line">                node[p].next[c] = <span class="built_in">newNode</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            p = node[p].next[c];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 二、字典树上拓扑建立SAM</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ALPHABET_SIZE; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node[<span class="number">1</span>].next[i]) &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(&#123; i, <span class="number">1</span> &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> [c, lst] = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> cur = <span class="built_in">insert</span>(lst, c);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ALPHABET_SIZE; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node[cur].next[i]) &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(&#123; i, cur &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="On-line"><a href="#On-line" class="headerlink" title="On-line"></a>On-line</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在线 ExSAM</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ExSAM</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> ALPHABET_SIZE = <span class="number">26</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">int</span> link;</span><br><span class="line">        <span class="type">int</span> next[ALPHABET_SIZE];</span><br><span class="line">        <span class="built_in">Node</span>() : len&#123;&#125;, link&#123;&#125;, next&#123;&#125; &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> all;</span><br><span class="line">    Node node[N &lt;&lt; <span class="number">1</span>]; <span class="comment">// |S| * 2</span></span><br><span class="line">    <span class="built_in">ExSAM</span>() : <span class="built_in">all</span>(<span class="number">1</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">newNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> cur, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node[cur].next[c]) &#123;</span><br><span class="line">            <span class="type">int</span> pre = cur;</span><br><span class="line">            <span class="type">int</span> pos = node[pre].next[c];</span><br><span class="line">            <span class="keyword">if</span> (node[pos].len == node[pre].len + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> pos;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> newpos = <span class="built_in">newNode</span>();</span><br><span class="line">            node[newpos].len = node[pre].len + <span class="number">1</span>;</span><br><span class="line">            node[newpos].link = node[pos].link;</span><br><span class="line">            node[pos].link = newpos;</span><br><span class="line">            <span class="keyword">while</span> (pre &amp;&amp; node[pre].next[c] == pos) &#123;</span><br><span class="line">                node[pre].next[c] = newpos;</span><br><span class="line">                pre = node[pre].link;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ALPHABET_SIZE; i++) &#123;</span><br><span class="line">                node[newpos].next[i] = node[pos].next[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> newpos;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 下面和SAM一样</span></span><br><span class="line">        <span class="type">int</span> pre = cur;</span><br><span class="line">        cur = <span class="built_in">newNode</span>();</span><br><span class="line">        node[cur].len = node[pre].len + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (pre &amp;&amp; !node[pre].next[c]) &#123;</span><br><span class="line">            node[pre].next[c] = cur;</span><br><span class="line">            pre = node[pre].link;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pre == <span class="number">0</span>) &#123;</span><br><span class="line">            node[cur].link = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> pos = node[pre].next[c];</span><br><span class="line">            <span class="keyword">if</span> (node[pos].len == node[pre].len + <span class="number">1</span>) &#123;</span><br><span class="line">                node[cur].link = pos;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;    </span><br><span class="line">                <span class="type">int</span> newpos = <span class="built_in">newNode</span>();</span><br><span class="line">                node[newpos].len = node[pre].len + <span class="number">1</span>;</span><br><span class="line">                node[newpos].link = node[pos].link;</span><br><span class="line">                node[pos].link = newpos;</span><br><span class="line">                node[cur].link = newpos;</span><br><span class="line">                <span class="keyword">while</span> (pre &amp;&amp; node[pre].next[c] == pos) &#123;</span><br><span class="line">                    node[pre].next[c] = newpos;</span><br><span class="line">                    pre = node[pre].link;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ALPHABET_SIZE; i++) &#123;</span><br><span class="line">                    node[newpos].next[i] = node[pos].next[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">const</span> string&amp; s, <span class="type">int</span> offset = -<span class="string">&#x27;a&#x27;</span>)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> p = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x : s) &#123;</span><br><span class="line">            <span class="type">int</span> c = x + offset;</span><br><span class="line">            p = <span class="built_in">insert</span>(p, c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>$insert$ 中有一部分一样，递归算版本</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在线 ExSAM</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ExSAM</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> ALPHABET_SIZE = <span class="number">26</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">int</span> link;</span><br><span class="line">        <span class="type">int</span> next[ALPHABET_SIZE];</span><br><span class="line">        <span class="built_in">Node</span>() : len&#123;&#125;, link&#123;&#125;, next&#123;&#125; &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> all;</span><br><span class="line">    Node node[N &lt;&lt; <span class="number">1</span>]; <span class="comment">// |S| * 2</span></span><br><span class="line">    <span class="built_in">ExSAM</span>() : <span class="built_in">all</span>(<span class="number">1</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">newNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> cur, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> pre = cur;</span><br><span class="line">        <span class="keyword">if</span> (node[cur].next[c]) &#123;</span><br><span class="line">            <span class="type">int</span> pos = node[pre].next[c];</span><br><span class="line">            <span class="keyword">if</span> (node[pos].len == node[pre].len + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> pos;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> newpos = <span class="built_in">newNode</span>();</span><br><span class="line">            node[newpos].len = node[pre].len + <span class="number">1</span>;</span><br><span class="line">            node[newpos].link = node[pos].link;</span><br><span class="line">            node[pos].link = newpos;</span><br><span class="line">            <span class="keyword">while</span> (pre &amp;&amp; node[pre].next[c] == pos) &#123;</span><br><span class="line">                node[pre].next[c] = newpos;</span><br><span class="line">                pre = node[pre].link;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ALPHABET_SIZE; i++) &#123;</span><br><span class="line">                node[newpos].next[i] = node[pos].next[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> newpos;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = <span class="built_in">newNode</span>();</span><br><span class="line">        node[cur].len = node[pre].len + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (pre &amp;&amp; !node[pre].next[c]) &#123;</span><br><span class="line">            node[pre].next[c] = cur;</span><br><span class="line">            pre = node[pre].link;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pre == <span class="number">0</span>) &#123;</span><br><span class="line">            node[cur].link = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node[cur].link = <span class="built_in">insert</span>(pre, c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">const</span> string&amp; s, <span class="type">int</span> offset = -<span class="string">&#x27;a&#x27;</span>)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> p = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x : s) &#123;</span><br><span class="line">            <span class="type">int</span> c = x + offset;</span><br><span class="line">            p = <span class="built_in">insert</span>(p, c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Palindromic-Tree"><a href="#Palindromic-Tree" class="headerlink" title="Palindromic Tree"></a>Palindromic Tree</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">PAM</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> ALPHABET_SIZE = <span class="number">26</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> cnt;</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">int</span> link;</span><br><span class="line">        <span class="type">int</span> next[ALPHABET_SIZE];</span><br><span class="line">        <span class="built_in">Node</span>() : len&#123;&#125;, link&#123;&#125;, cnt&#123;&#125;, next&#123;&#125; &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">int</span> all;</span><br><span class="line">    <span class="type">int</span> svc;</span><br><span class="line">    <span class="type">int</span> suff;</span><br><span class="line">    <span class="type">int</span> vc[N];</span><br><span class="line">    Node node[N];</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; tree[N];</span><br><span class="line">    <span class="built_in">PAM</span>() : <span class="built_in">all</span>(<span class="number">-1</span>), <span class="built_in">svc</span>(<span class="number">-1</span>), <span class="built_in">suff</span>(<span class="number">0</span>) &#123; <span class="comment">// root -&gt; 1</span></span><br><span class="line">        <span class="type">int</span> pre = <span class="built_in">newNode</span>();</span><br><span class="line">        <span class="type">int</span> cur = <span class="built_in">newNode</span>();</span><br><span class="line">        node[pre].len = <span class="number">0</span>;</span><br><span class="line">        node[cur].len = <span class="number">-1</span>;</span><br><span class="line">        node[pre].link = cur;</span><br><span class="line">        node[cur].link = pre;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">newNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getLink</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (svc - node[x].len - <span class="number">1</span> &lt; <span class="number">0</span> <span class="keyword">or</span> vc[svc - node[x].len - <span class="number">1</span>] != vc[svc]) &#123;</span><br><span class="line">            x = node[x].link;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">extend</span><span class="params">(<span class="type">int</span> c, <span class="type">int</span> offset = -<span class="string">&#x27;a&#x27;</span>)</span> </span>&#123;</span><br><span class="line">        c += offset;</span><br><span class="line">        vc[++svc] = c;</span><br><span class="line">        <span class="type">int</span> pre = <span class="built_in">getLink</span>(suff);</span><br><span class="line">        <span class="type">int</span> cur = node[pre].next[c];</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="number">0</span>) &#123;</span><br><span class="line">            cur = <span class="built_in">newNode</span>();</span><br><span class="line">            node[cur].len = node[pre].len + <span class="number">2</span>;</span><br><span class="line">            node[cur].link = node[<span class="built_in">getLink</span>(node[pre].link)].next[c];</span><br><span class="line">            node[pre].next[c] = cur; <span class="comment">// next 要在 link 后 ！！！</span></span><br><span class="line">        &#125;</span><br><span class="line">        node[cur].cnt += <span class="number">1</span>;</span><br><span class="line">        suff = cur;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; v : tree[u]) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(v);</span><br><span class="line">            node[u].cnt += node[v].cnt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">0</span>; v &lt;= all; v++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v != <span class="number">1</span>) &#123; <span class="comment">// root = 1</span></span><br><span class="line">                tree[node[v].link].<span class="built_in">push_back</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Extend-Palindromic-Tree"><a href="#Extend-Palindromic-Tree" class="headerlink" title="Extend Palindromic Tree"></a>Extend Palindromic Tree</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Pam</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> ALPHABET_SIZE = <span class="number">26</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> cnt;</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">int</span> link;</span><br><span class="line">        <span class="type">int</span> diff; <span class="comment">// len(u) - len(link(u))</span></span><br><span class="line">        <span class="type">int</span> slink; <span class="comment">// 跳 link 第一个 diff(u) != diff(v)</span></span><br><span class="line">        <span class="type">int</span> border;</span><br><span class="line">        <span class="type">int</span> next[ALPHABET_SIZE];</span><br><span class="line">        <span class="built_in">Node</span>() : cnt&#123;&#125;, len&#123;&#125;, link&#123;&#125;, diff&#123;&#125;, slink&#123;&#125;, border&#123;&#125;, next&#123;&#125; &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> suff;</span><br><span class="line">    string vc;</span><br><span class="line">    vector&lt;Node&gt; node;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Pam</span>() &#123;</span><br><span class="line">        <span class="type">int</span> pre = <span class="built_in">newNode</span>();</span><br><span class="line">        <span class="type">int</span> cur = <span class="built_in">newNode</span>();</span><br><span class="line">        node[pre].len = <span class="number">0</span>;</span><br><span class="line">        node[cur].len = <span class="number">-1</span>;</span><br><span class="line">        node[pre].link = cur;</span><br><span class="line">        node[cur].link = pre;</span><br><span class="line">        suff = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">newNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        node.<span class="built_in">emplace_back</span>();</span><br><span class="line">        <span class="keyword">return</span> node.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span>&amp; <span class="title">len</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node[p].len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span>&amp; <span class="title">link</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node[p].link;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span>&amp; <span class="title">diff</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node[p].diff;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span>&amp; <span class="title">slink</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node[p].slink;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span>&amp; <span class="title">border</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node[p].border;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span>&amp; <span class="title">next</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node[p].next[c];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">extend</span><span class="params">(<span class="type">const</span> string&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="built_in">extend</span>(i, s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reset</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        suff = <span class="number">0</span>;</span><br><span class="line">        vc.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">extend</span><span class="params">(<span class="type">int</span> p, <span class="type">char</span> x, <span class="type">char</span> offset = <span class="string">&#x27;a&#x27;</span>)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> c = x - offset;</span><br><span class="line">        vc += c;</span><br><span class="line">        <span class="type">int</span> pre = <span class="built_in">getLink</span>(p, suff);</span><br><span class="line">        <span class="type">int</span> cur = <span class="built_in">next</span>(pre, c);</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="number">0</span>) &#123;</span><br><span class="line">            cur = <span class="built_in">newNode</span>();</span><br><span class="line">            <span class="built_in">len</span>(cur) = <span class="built_in">len</span>(pre) + <span class="number">2</span>;</span><br><span class="line">            <span class="built_in">link</span>(cur) = <span class="built_in">next</span>(<span class="built_in">getLink</span>(p, <span class="built_in">link</span>(pre)), c);</span><br><span class="line">            <span class="built_in">next</span>(pre, c) = cur;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">diff</span>(cur) = <span class="built_in">len</span>(cur) - <span class="built_in">len</span>(<span class="built_in">link</span>(cur));</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">diff</span>(cur) == <span class="built_in">diff</span>(<span class="built_in">link</span>(cur))) &#123;</span><br><span class="line">                <span class="built_in">slink</span>(cur) = <span class="built_in">slink</span>(<span class="built_in">link</span>(cur));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">slink</span>(cur) = <span class="built_in">link</span>(cur);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">len</span>(cur) - <span class="built_in">len</span>(<span class="built_in">link</span>(cur)) == <span class="built_in">len</span>(<span class="built_in">border</span>(<span class="built_in">link</span>(cur)))) &#123;</span><br><span class="line">                <span class="built_in">border</span>(cur) = <span class="built_in">border</span>(<span class="built_in">link</span>(cur));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">border</span>(cur) = cur;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        suff = cur;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getLink</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (p - <span class="built_in">len</span>(u) - <span class="number">1</span> &lt; <span class="number">0</span> <span class="keyword">or</span> vc[p - <span class="built_in">len</span>(u) - <span class="number">1</span>] != vc[p]) &#123;</span><br><span class="line">            u = <span class="built_in">link</span>(u);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="trick"><a href="#trick" class="headerlink" title="trick"></a>trick</h3><p>以第 $x$ 个字符结尾的回文串（后缀回文串）的长度会形成 $log(|S|)$ 段等差数列，如果要枚举所有后缀回文串，可考虑以下优化<br>$$<br>f_i &#x3D; \sum f_j \quad if \quad (s[j + 1, i] 是回文)<br>$$<br><strong>前置知识：</strong></p><p>$diff[x] &#x3D; len[x] &#x3D; len[link[u]]$</p><p>$slink[u]$ 表示 $u$ 一直沿着 $link$ 向上跳到的第一个节点，使得 $diff[v] \neq diff[u]$ </p><p><strong>优化操作：</strong></p><p>考虑每次算一个等差数列，这样只要算 $log|S|$ 次</p><p>设 $g[v]$ 表示其所在等差数列的 $f$ 和，且 $v$ 是等差数列中长度最长的节点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = v;</span><br><span class="line"><span class="keyword">while</span> (x != slink[v]) &#123;</span><br><span class="line">g[v] += f[i - len[x]]; <span class="comment">// i 表示此时枚举的下标</span></span><br><span class="line">    x = link[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面考虑如何更新 $g, f$ </p><p>如下图， $g[x]$ 为橙色三个位置 $f$ 的和， $g[link[x]]$ 为蓝色两个位置的 $f$ 和，发现多了最后一个橙色 $f$ 的值，故 $g[x] &#x3D; g[link[x]] + f[i - diff[x] - len[slink[x]]]$</p><p>当 $x$ 为其等差数列的最大长度时，不能加 $g[link[x]]$ </p><p><img src="/../../../images/ACM/pam_border.png" alt="pam_border"></p><p>由此的 $g$ 的更新方式<br>$$<br>g[x] &#x3D;<br>\begin{cases}<br>g[link[x]] + f[i - diff[x] - len[slink[x]]] &amp; \text{if diff[x] $&#x3D;$ diff[link[x]]} \<br>f[i - diff[x] - len[slink[x]]] &amp; \text{if diff[x] $\neq$ diff[link[x]]}<br>\end{cases}<br>$$<br>然后跳 $log|S|$ 次 $slink$ 可得 $f$<br>$$<br>f_i &#x3D; \sum\limits_{p &#x3D; x}^{x &gt; 1} g[p] \quad \text{$x$ 表示此时 $i$ 的节点位置, 每次更新 $x &#x3D; slink[x]$}<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">f</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">g</span><span class="params">(n + <span class="number">2</span>)</span></span>;</span><br><span class="line">f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    pam.<span class="built_in">extend</span>(i - <span class="number">1</span>, s[i - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> p = pam.suff; p &gt; <span class="number">1</span>; p = pam.<span class="built_in">slink</span>(p)) &#123;</span><br><span class="line">        g[p] = f[i - pam.<span class="built_in">diff</span>(p) - pam.<span class="built_in">len</span>(pam.<span class="built_in">slink</span>(p))]; <span class="comment">// 必须是 = 覆盖之前的</span></span><br><span class="line">        <span class="keyword">if</span> (pam.<span class="built_in">diff</span>(p) == pam.<span class="built_in">diff</span>(pam.<span class="built_in">link</span>(p))) &#123;</span><br><span class="line">            g[p] += g[pam.<span class="built_in">link</span>(p)];</span><br><span class="line">        &#125;</span><br><span class="line">        f[i] += g[p];</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>另一个例子</p><p>最小回文分割</p><p>$f_{i} &#x3D; min(f_{j} + 1) \quad \text{if $s_{j + 1, i}$ 是回文串}$</p><p>把 $+&#x3D; \rightarrow min()$</p><p>若要回文长度为偶数，则再 $i$ 为偶数时计算 $f$  </p><h2 id="Sequence-Automaton"><a href="#Sequence-Automaton" class="headerlink" title="Sequence Automaton"></a>Sequence Automaton</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SequenceAutomaton</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> ALPHABET_SIZE = <span class="number">26</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> next[ALPHABET_SIZE];</span><br><span class="line">        <span class="built_in">Node</span>() : next&#123;&#125; &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    vector&lt;Node&gt; node;</span><br><span class="line">    <span class="built_in">SequenceAutomaton</span>(<span class="type">const</span> string&amp; s, <span class="type">int</span> offset = -<span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        node.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; ALPHABET_SIZE; j++) &#123;</span><br><span class="line">                node[i].next[j] = node[i + <span class="number">1</span>].next[j];</span><br><span class="line">            &#125;</span><br><span class="line">            node[i].next[s[i] + offset] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">count</span><span class="params">(<span class="type">const</span> string&amp; t, <span class="type">int</span> offset = -<span class="string">&#x27;a&#x27;</span>)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; t.<span class="built_in">size</span>() &amp;&amp; node[p].next[t[i] + offset] != <span class="number">0</span>) &#123;</span><br><span class="line">            p = node[p].next[t[i] + offset];</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i == t.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>unordered_map 版</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SequenceAutomaton</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; next;</span><br><span class="line">        <span class="built_in">Node</span>() : next&#123;&#125; &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    vector&lt;Node&gt; node;</span><br><span class="line">    <span class="built_in">SequenceAutomaton</span>(<span class="type">const</span> string&amp; s) &#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        node.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            node[i].next = node[i + <span class="number">1</span>].next;</span><br><span class="line">            node[i].next[s[i]] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">count</span><span class="params">(<span class="type">const</span> string&amp; t)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; t.<span class="built_in">size</span>() &amp;&amp; node[p].next.<span class="built_in">count</span>(t[i])) &#123;</span><br><span class="line">            p = node[p].next.<span class="built_in">at</span>(t[i]);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i == t.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Minimal"><a href="#Minimal" class="headerlink" title="Minimal"></a>Minimal</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [0, n)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">minimal</span><span class="params">(<span class="keyword">auto</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; n &amp;&amp; i &lt; n &amp;&amp; j &lt; n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[(i + k) % n] == s[(j + k) % n]) &#123;</span><br><span class="line">            k++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            s[(i + k) % n] &gt; s[(j + k) % n] ? i += k + <span class="number">1</span> : j += k + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i == j) j++;</span><br><span class="line">            k = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(i, j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> Template </category>
          
          <category> String </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022 Hangzhou M. Please Save Pigeland</title>
      <link href="/2024/04/25/ACM/ICPC/2022%20Hangzhou%20M/"/>
      <url>/2024/04/25/ACM/ICPC/2022%20Hangzhou%20M/</url>
      
        <content type="html"><![CDATA[<h1 id="M-Please-Save-Pigeland"><a href="#M-Please-Save-Pigeland" class="headerlink" title="M. Please Save Pigeland"></a>M. Please Save Pigeland</h1><p>$$<br>求 Min(\frac{\sum dis_{x, c_{i}}}{gcd \lbrace dis_{x, c_{i}} \rbrace } )<br>$$</p><p>$$<br>gcd(a_{1}, a_{2}, …, a_{n}) &#x3D; gcd(a_{1}, a_{2} - a_{1}, …, a_{n} - a_{1})<br>$$</p><p>分子&#x2F;母两部分可用换根 DP 计算</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> g;</span><br><span class="line">    <span class="type">int</span> lpos, rpos;</span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    <span class="built_in">Node</span>() &#123;</span><br><span class="line">        g = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Node</span>(<span class="type">long</span> <span class="type">long</span> _g) &#123;</span><br><span class="line">        g = _g;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update</span></span><br><span class="line">    Node&amp; <span class="keyword">operator</span>+=(<span class="type">const</span> Node&amp; n) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;g += n.g;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// push_up</span></span><br><span class="line">    <span class="function">Node <span class="title">push_up</span><span class="params">(<span class="type">const</span> Node&amp; ln, <span class="type">const</span> Node&amp; rn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;g = <span class="built_in">gcd</span>(ln.g, rn.g);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span> &#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> lp (p &lt;&lt; 1)</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> rp (p &lt;&lt; 1 | 1)</span></span><br><span class="line">    vector&lt;Node&gt; val;</span><br><span class="line">    <span class="built_in">SegmentTree</span>(<span class="type">int</span> n = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">resize</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">resize</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        val.<span class="built_in">resize</span>((n + <span class="number">1</span>) * <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> p = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">        val[p].lpos = l;</span><br><span class="line">        val[p].rpos = r;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(l, mid, lp);</span><br><span class="line">        <span class="built_in">build</span>(mid + <span class="number">1</span>, r, rp);</span><br><span class="line">        val[p].<span class="built_in">push_up</span>(val[lp], val[rp]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> pos, <span class="type">const</span> Node&amp; k, <span class="type">int</span> p = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (val[p].lpos == pos &amp;&amp; pos == val[p].rpos) &#123;</span><br><span class="line">            val[p] += k;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> mid = (val[p].lpos + val[p].rpos) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos &lt;= mid) &#123;</span><br><span class="line">            <span class="built_in">update</span>(pos, k, lp);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">update</span>(pos, k, rp);</span><br><span class="line">        &#125;</span><br><span class="line">        val[p].<span class="built_in">push_up</span>(val[lp], val[rp]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Node <span class="title">query</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; l, <span class="type">const</span> <span class="type">int</span>&amp; r, <span class="type">int</span> p = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= val[p].lpos &amp;&amp; val[p].rpos &lt;= r) &#123;</span><br><span class="line">            <span class="keyword">return</span> val[p];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> mid = (val[p].lpos + val[p].rpos) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (r &lt;= mid) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">query</span>(l, r, lp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mid &lt; l) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">query</span>(l, r ,rp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Node</span>().<span class="built_in">push_up</span>(<span class="built_in">query</span>(l, r, lp), <span class="built_in">query</span>(l, r, rp));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Tecy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">long</span> <span class="type">long</span> inf = <span class="number">1e18</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> n, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">c</span><span class="params">(k)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ok</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x : c) &#123;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        ok[x] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;pair&lt;<span class="type">int</span>, <span class="type">long</span> <span class="type">long</span>&gt;&gt;&gt; <span class="built_in">tree</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> w;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        tree[u].<span class="built_in">push_back</span>(&#123; v, w &#125;);</span><br><span class="line">        tree[v].<span class="built_in">push_back</span>(&#123; u, w &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (k &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">dfn</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">siz</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">l</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">r</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> last = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">auto</span> get = [&amp;](<span class="keyword">auto</span> get, <span class="type">int</span> u, <span class="type">int</span> f) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">        l[u] = last + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (ok[u]) &#123;</span><br><span class="line">            dfn[u] = ++tot;</span><br><span class="line">            siz[u] = <span class="number">1</span>;</span><br><span class="line">            last = tot;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; [v, w] : tree[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v != f) &#123;</span><br><span class="line">                <span class="built_in">get</span>(get, v, u);</span><br><span class="line">                siz[u] += siz[v];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        r[u] = l[u] + siz[u];</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">get</span>(get, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">sum</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">SegmentTree <span class="title">sgt</span><span class="params">(k)</span></span>;</span><br><span class="line">    sgt.<span class="built_in">build</span>(<span class="number">1</span>, k);</span><br><span class="line">    <span class="keyword">auto</span> dfs = [&amp;](<span class="keyword">auto</span> dfs, <span class="type">int</span> u, <span class="type">int</span> f) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; [v, w] : tree[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v != f) &#123;</span><br><span class="line">                <span class="built_in">dfs</span>(dfs, v, u);</span><br><span class="line">                sum[u] += sum[v] + siz[v] * w;</span><br><span class="line">                <span class="keyword">if</span> (siz[v]) &#123;</span><br><span class="line">                    sgt.<span class="built_in">update</span>(l[v], &#123; w &#125;);</span><br><span class="line">                    <span class="keyword">if</span> (r[v] &lt;= k) &#123;</span><br><span class="line">                        sgt.<span class="built_in">update</span>(r[v], &#123; -w &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">dfs</span>(dfs, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">g</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">auto</span> dp = [&amp;](<span class="keyword">auto</span> dp, <span class="type">int</span> u, <span class="type">int</span> f) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">        g[u] = <span class="built_in">abs</span>(<span class="built_in">gcd</span>(sgt.val[<span class="number">1</span>].g, sgt.<span class="built_in">query</span>(<span class="number">2</span>, k).g));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; [v, w] : tree[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v != f) &#123;</span><br><span class="line">                sum[v] += sum[u] - sum[v] + (k - siz[v] * <span class="number">2</span>) * w;</span><br><span class="line">                sgt.<span class="built_in">update</span>(<span class="number">1</span>, &#123; w &#125;);</span><br><span class="line">                <span class="keyword">if</span> (siz[v]) &#123;</span><br><span class="line">                    sgt.<span class="built_in">update</span>(l[v], &#123; -w * <span class="number">2</span> &#125;);</span><br><span class="line">                    <span class="keyword">if</span> (r[v] &lt;= k) &#123;</span><br><span class="line">                        sgt.<span class="built_in">update</span>(r[v], &#123; w * <span class="number">2</span> &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">dp</span>(dp, v, u);</span><br><span class="line">                sgt.<span class="built_in">update</span>(<span class="number">1</span>, &#123; -w &#125;);</span><br><span class="line">                <span class="keyword">if</span> (siz[v]) &#123;</span><br><span class="line">                    sgt.<span class="built_in">update</span>(l[v], &#123; w * <span class="number">2</span> &#125;);</span><br><span class="line">                    <span class="keyword">if</span> (r[v] &lt;= k) &#123;</span><br><span class="line">                        sgt.<span class="built_in">update</span>(r[v], &#123; -w * <span class="number">2</span> &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">dp</span>(dp, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = inf;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, sum[i] * <span class="number">2</span> / g[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// cin &gt;&gt; T;</span></span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">Tecy</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> ICPC </category>
          
          <category> Hangzhou </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> SegmentTree </tag>
            
            <tag> gcd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022 Hangzhou A.Modulo Ruins the Legend</title>
      <link href="/2024/04/22/ACM/ICPC/2022%20Hangzhou%20A/"/>
      <url>/2024/04/22/ACM/ICPC/2022%20Hangzhou%20A/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Modulo-Ruins-the-Legend"><a href="#A-Modulo-Ruins-the-Legend" class="headerlink" title="A. Modulo Ruins the Legend"></a><a href="https://codeforces.com/gym/104090/problem/A">A. Modulo Ruins the Legend</a></h1><p>$$<br>求 \quad (\sum\limits_{i &#x3D; 1}^{n} a_{i} + ns + \frac{n(n + 1)}{2}d) \quad % \quad m \quad 最小<br>$$</p><p>$$<br>由裴蜀定理知 \quad ax + by &#x3D; k \times gcd(a, b)<br>$$</p><p>$$<br>令 \quad sum &#x3D; \sum\limits_{i &#x3D; 1}^{n} a_{i}  \quad \Rightarrow \quad 原式 &#x3D;  sum + k \times gcd(a, b)<br>$$</p><p>$$<br>(sum + k \times gcd(a, b)) \quad % \quad m \quad &#x3D; \quad (sum + k \times gcd(a, b) + pm) \quad % \quad m<br>$$</p><p>$$<br>再一次裴蜀定理 \quad k \times gcd(a, b) + pm &#x3D; t \times gcd(a, b, m)<br>$$</p><p>$$<br>即 \quad (sum + t \times gcd(a, b, m)) \quad % \quad m \quad 最小<br>$$</p><p>$$<br>解得 \quad t &#x3D; \lceil \frac{m - sum}{gcd(a, b, m)} \rceil \quad 其中 \quad a &#x3D; n, \quad b &#x3D; \frac{n(n + 1)}{2}<br>$$</p><p>$$<br>带回使用Exgcd求解 k, s, d<br>$$</p><p>$$<br>Exgcd 通解<br>$$</p><p>$$<br>x &#x3D; x_{0} + k \times \frac{b}{gcd(a, b)}<br>$$</p><p>$$<br>y &#x3D; y_{0} - k \times \frac{a}{gcd(a, b)}<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">Exgcd</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span>&amp; x, <span class="type">long</span> <span class="type">long</span>&amp; y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!b) &#123;</span><br><span class="line">x = <span class="number">1</span>;</span><br><span class="line">y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> c = <span class="built_in">Exgcd</span>(b, a % b, y, x);</span><br><span class="line">y -= (a / b) * x;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">v</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x : v) &#123;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        sum += x;</span><br><span class="line">    &#125;</span><br><span class="line">    sum %= m;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> x1, y1;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> a = n;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> b = n * (n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> g1 = <span class="built_in">Exgcd</span>(a, b, x1, y1);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> x2, y2;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> g2 = <span class="built_in">Exgcd</span>(g1, m, x2, y2);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> t = (m - sum + g2 - <span class="number">1</span>) / g2;</span><br><span class="line">    cout &lt;&lt; (sum + g2 * t) % m &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> k = x2 * t % m;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> s = (x1 * k % m + m) % m;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> d = (y1 * k % m + m) % m;</span><br><span class="line">    cout &lt;&lt; s &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; d &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// cin &gt;&gt; T;</span></span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> ICPC </category>
          
          <category> Hangzhou </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Exgcd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Functional Language Features Iterators and Closures</title>
      <link href="/2024/02/16/Learning/Languages/Rust/%E2%92%91.Functional%20Language%20Features%20Iterators%20and%20Closures/"/>
      <url>/2024/02/16/Learning/Languages/Rust/%E2%92%91.Functional%20Language%20Features%20Iterators%20and%20Closures/</url>
      
        <content type="html"><![CDATA[<h1 id="Functional-Language-Features-Iterators-and-Closures"><a href="#Functional-Language-Features-Iterators-and-Closures" class="headerlink" title="Functional Language Features Iterators and Closures"></a>Functional Language Features Iterators and Closures</h1><h2 id="Closures-Anonymous-Functions-that-Capture-Their-Environment"><a href="#Closures-Anonymous-Functions-that-Capture-Their-Environment" class="headerlink" title="Closures: Anonymous Functions that Capture Their  Environment"></a>Closures: Anonymous Functions that Capture Their  Environment</h2><p>闭包：可以捕获其所在环境的匿名函数</p><p>闭包的定义 </p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|parameters: <span class="keyword">type</span>, ...| <span class="punctuation">-&gt;</span> <span class="keyword">type</span> &#123;</span><br><span class="line">    code</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数和返回值的类型可以不用显示标注，编译器会自动推断</p><p>可以将闭包赋值给变量调用</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">f</span> = |num: <span class="type">i32</span>| &#123;</span><br><span class="line">    num</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如何让 struct 持有闭包</p><p>需要泛型和 Fn Trait</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Cacher</span>&lt;T&gt; </span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    T: <span class="title function_ invoke__">Fn</span>(<span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span>,<span class="comment">// 参数和返回值</span></span><br><span class="line">&#123;</span><br><span class="line">    cal: T,</span><br><span class="line">    value: <span class="type">Option</span>&lt;<span class="type">i32</span>&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;T&gt; Cacher&lt;T&gt;</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    T: <span class="title function_ invoke__">Fn</span>(<span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span>,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new</span>(x: T) <span class="punctuation">-&gt;</span> Cacher&lt;T&gt; &#123;</span><br><span class="line">        Cacher &#123;</span><br><span class="line">            cal: x,</span><br><span class="line">            value: <span class="literal">None</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">value</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, arg: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">match</span> <span class="keyword">self</span>.value &#123;</span><br><span class="line">            <span class="title function_ invoke__">Some</span>(x) =&gt; x,</span><br><span class="line">            <span class="literal">None</span> =&gt; &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">v</span> = (<span class="keyword">self</span>.cal)(arg);</span><br><span class="line">                <span class="keyword">self</span>.value = <span class="title function_ invoke__">Some</span>(v);</span><br><span class="line">                v</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用闭包捕获环境</p><p>直接使用函数不能捕获外界的变量</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// can&#x27;t capture dynamic environment in a fn item</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">f</span>(y: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">    x</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, <span class="title function_ invoke__">f</span>(x));</span><br></pre></td></tr></table></figure><p>使用闭包捕获外界的值</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">f</span> = |num: <span class="type">i32</span>| <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">    x</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, <span class="title function_ invoke__">f</span>(x));</span><br></pre></td></tr></table></figure><p>闭包从所在环境捕获值的方式</p><ul><li>FnOnce 取得所有权</li><li>FnMut 可变借用</li><li>Fn 不可变借用</li></ul><p><code>move</code> 关键字，强制闭包获得它使用环境值的所有权</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;2024&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">f</span> = <span class="keyword">move</span> || &#123; <span class="comment">// move</span></span><br><span class="line">    x == <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;2024&quot;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, x);</span><br><span class="line"><span class="comment">// value borrowed here after move</span></span><br></pre></td></tr></table></figure><h2 id="Processing-a-Series-of-Items-with-Iterators"><a href="#Processing-a-Series-of-Items-with-Iterators" class="headerlink" title="Processing a Series of Items with Iterators"></a>Processing a Series of Items with Iterators</h2><p>迭代器模式：对一系列项执行某些任务</p><p>迭代器负责：遍历每个项，确定序列（遍历）何时完成</p><p>rust 的迭代器</p><p>懒惰的： 除非调用消费迭代器的方法，否则迭代器本身没有任何效果</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">v</span> = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">v_iter</span> = v.<span class="title function_ invoke__">iter</span>();</span><br><span class="line"><span class="keyword">for</span> <span class="variable">x</span> <span class="keyword">in</span> v_iter &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>iterator trait </p><p>所有 迭代器都实现了 iterator trait</p><p>iterator trait 仅要求实现一个方法 next</p><p>next 每次返回迭代器中的一项，返回结果包裹在 Some， 结束返回 None</p><p>迭代器使用</p><ul><li>iter ： 在不可变引用上创建迭代器</li><li>into_iter ： 创建的迭代器会获得所有权</li><li>iter_mut ： 迭代可变的引用</li></ul><p><code>map</code> 接受一个闭包，闭包作用于每个元素，产生一个新的迭代器</p><p><code>collect</code> 消耗型适配器，把结果收集到一个集合类型中</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">v</span> = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">v_iter</span> = v.<span class="title function_ invoke__">iter</span>();</span><br><span class="line"><span class="keyword">let</span> <span class="variable">v1</span>: <span class="type">Vec</span>&lt;_&gt; = v_iter.<span class="title function_ invoke__">map</span>(|x| x + <span class="number">1</span>).<span class="title function_ invoke__">collect</span>();</span><br><span class="line"><span class="built_in">assert_eq!</span>(<span class="built_in">vec!</span>[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], v1);</span><br></pre></td></tr></table></figure><p><code>filter</code> 接受闭包，闭包返回 bool 类型，当返回 true 时，产生的迭代器就会包含该元素</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">v</span> = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">v_iter</span> = v.<span class="title function_ invoke__">into_iter</span>(); <span class="comment">// 获取所有权</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">v1</span>: <span class="type">Vec</span>&lt;_&gt; = v_iter.<span class="title function_ invoke__">filter</span>(|x| x % <span class="number">3</span> == <span class="number">0</span>).<span class="title function_ invoke__">collect</span>();</span><br><span class="line"><span class="built_in">assert_eq!</span>(<span class="built_in">vec!</span>[<span class="number">3</span>, <span class="number">6</span>], v1);</span><br></pre></td></tr></table></figure><p>自定义迭代器，实现 next</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">    count: <span class="type">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Iterator</span> <span class="keyword">for</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">    <span class="keyword">type</span> <span class="title class_">Item</span> = <span class="type">u32</span>;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">next</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;<span class="keyword">Self</span>::Item&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.count &lt; <span class="number">5</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.count += <span class="number">1</span>;</span><br><span class="line">            <span class="title function_ invoke__">Some</span>(<span class="keyword">self</span>.count)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="literal">None</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Comparing-Performance-Loops-vs-Iterators"><a href="#Comparing-Performance-Loops-vs-Iterators" class="headerlink" title="Comparing Performance: Loops vs. Iterators"></a>Comparing Performance: Loops vs. Iterators</h2><p>迭代器与循环效率比较</p><p>迭代器效率更高</p><p>迭代器是 Rust 的 零成本抽象（zero-cost abstractions）之一，它意味着抽象并不会引入运行时开销</p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
          <category> Languages </category>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>An IO Project Building a Command Line Program</title>
      <link href="/2024/02/15/Learning/Languages/Rust/%E2%92%90.An%20IO%20Project%20Building%20a%20Command%20Line%20%20Program/"/>
      <url>/2024/02/15/Learning/Languages/Rust/%E2%92%90.An%20IO%20Project%20Building%20a%20Command%20Line%20%20Program/</url>
      
        <content type="html"><![CDATA[<h1 id="An-IO-Project-Building-a-Command-Line-Program"><a href="#An-IO-Project-Building-a-Command-Line-Program" class="headerlink" title="An IO Project Building a Command Line Program"></a>An IO Project Building a Command Line Program</h1><h2 id="Accepting-Command-Line-Arguments"><a href="#Accepting-Command-Line-Arguments" class="headerlink" title="Accepting Command Line Arguments"></a>Accepting Command Line Arguments</h2><p>使用 <code>std::env::args()</code> 获得命令行参数迭代器</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::env;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">args</span>: <span class="type">Vec</span>&lt;<span class="type">String</span>&gt; = env::<span class="title function_ invoke__">args</span>().<span class="title function_ invoke__">collect</span>();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:#?&#125;&quot;</span>, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line">[</span><br><span class="line">    <span class="string">&quot;target\\debug\\rust.exe&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>添加自定义参数</p><ol><li><code>cargo build</code></li><li><code>cargo run -- command line</code></li></ol><p>例如</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cargo build</span><br><span class="line">cargo run -- <span class="number">2024</span> scut</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line">[</span><br><span class="line">    <span class="string">&quot;target\\debug\\rust.exe&quot;</span>,</span><br><span class="line">    <span class="string">&quot;2024&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scut&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="Reading-a-File"><a href="#Reading-a-File" class="headerlink" title="Reading a File"></a>Reading a File</h2><p>在项目文件夹下添加 <code>info.txt</code> 添加内容， 利用 <code>std::fs</code> 读取文件内容</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cargo build</span></span><br><span class="line"><span class="comment">// cargo run -- info.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> std::env;</span><br><span class="line"><span class="keyword">use</span> std::fs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">args</span>: <span class="type">Vec</span>&lt;<span class="type">String</span>&gt; = env::<span class="title function_ invoke__">args</span>().<span class="title function_ invoke__">collect</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">path</span> = &amp;args[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">contents</span> = fs::<span class="title function_ invoke__">read_to_string</span>(path).<span class="title function_ invoke__">expect</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:#?&#125;&quot;</span>, args);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, contents);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Refactoring-to-Improve-Modularity-and-Error-Handling"><a href="#Refactoring-to-Improve-Modularity-and-Error-Handling" class="headerlink" title="Refactoring to Improve Modularity and Error Handling"></a>Refactoring to Improve Modularity and Error Handling</h2><p>当我们在 main 不断添加内容， main 可能变得非常大， 这时候我们就要重构，改善模块</p><p>例如，将不同功能写到不同的函数， 添加更好的错误处理，对用户更好的错误提示等</p><p>例如将读取 path 改为一个函数</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">get_path</span>(args: &amp;[<span class="type">String</span>]) <span class="punctuation">-&gt;</span> &amp;<span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> args.<span class="title function_ invoke__">len</span>() &lt; <span class="number">2</span> &#123;</span><br><span class="line">        <span class="built_in">panic!</span>(<span class="string">&quot;failed to get path&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;args[<span class="number">1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Developing-the-Library’s-Functionality-with-Test-Driven-Development"><a href="#Developing-the-Library’s-Functionality-with-Test-Driven-Development" class="headerlink" title="Developing the Library’s Functionality with Test-Driven  Development"></a>Developing the Library’s Functionality with Test-Driven  Development</h2><ol><li>编写一个失败的测试，并运行它以确保它失败的原因是你所期望的。</li><li>编写或修改足够的代码来使新的测试通过。</li><li>重构刚刚增加或修改的代码，并确保测试仍然能通过。</li><li>从步骤 1 开始重复！</li></ol><h2 id="Working-with-Environment-Variables"><a href="#Working-with-Environment-Variables" class="headerlink" title="Working with Environment Variables"></a>Working with Environment Variables</h2><p>通过 <code>env::var()</code> 来设置环境变量， 返回 Result ， Ok 时表示其被设置</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">ignore_case</span> = env::<span class="title function_ invoke__">var</span>(<span class="string">&quot;IGNORE_CASE&quot;</span>).<span class="title function_ invoke__">is_ok</span>();</span><br><span class="line"><span class="comment">// IGNORE_CASE=1 cargo run 将其设置为 1</span></span><br></pre></td></tr></table></figure><h2 id="Writing-Error-Messages-to-Standard-Error-Instead-of-Standard-Output"><a href="#Writing-Error-Messages-to-Standard-Error-Instead-of-Standard-Output" class="headerlink" title="Writing Error Messages to Standard Error Instead of  Standard Output"></a>Writing Error Messages to Standard Error Instead of  Standard Output</h2><p>将输出定向到文件中</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo run &gt; file</span><br></pre></td></tr></table></figure><p>例如到 output.txt 中</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo run &gt; output.txt</span><br></pre></td></tr></table></figure><p><code>eprintln!</code>宏将错误打印到标准错误  </p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
          <category> Languages </category>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Writing Automated Tests</title>
      <link href="/2024/02/13/Learning/Languages/Rust/%E2%92%8F.Writing%20Automated%20Tests/"/>
      <url>/2024/02/13/Learning/Languages/Rust/%E2%92%8F.Writing%20Automated%20Tests/</url>
      
        <content type="html"><![CDATA[<h1 id="Writing-Automated-Tests"><a href="#Writing-Automated-Tests" class="headerlink" title="Writing Automated Tests"></a>Writing Automated Tests</h1><h2 id="How-to-Write-Tests"><a href="#How-to-Write-Tests" class="headerlink" title="How to Write Tests"></a>How to Write Tests</h2><p>cargo test 会执行所有测试，即 #[test] 下的测试</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[cfg(test)]</span></span><br><span class="line"><span class="keyword">mod</span> tests &#123;</span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">it_works</span>() &#123;</span><br><span class="line">        <span class="built_in">assert_eq!</span>(<span class="number">2</span> + <span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出信息</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">running <span class="number">1</span> test</span><br><span class="line">test tests::it_works ... ok</span><br><span class="line"></span><br><span class="line">test result: ok. <span class="number">1</span> passed; <span class="number">0</span> failed; <span class="number">0</span> ignored; <span class="number">0</span> measured; <span class="number">0</span> filtered out; finished <span class="keyword">in</span> <span class="number">0.00</span>s</span><br></pre></td></tr></table></figure><p>测试 panic 表示失败</p><p><code>assert!</code> 宏， 当为假时，会 panic</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">assert!</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">assert!</span>(<span class="number">0</span> == <span class="number">1</span>);<span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><code>assert_eq!</code> 与 <code>assert_ne!</code> 即断言相等与不相等</p><p>断言失败会打印参数的值，要求实现了 PartialEq 和 Debug Traits （基本类型都实现了）</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">assert_eq!</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line">assertion `left == right` failed</span><br><span class="line">  left: <span class="number">1</span></span><br><span class="line"> right: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>添加自定义错误信息</p><p><code>assert!</code>, <code>assert_eq!</code>, <code>assert_ne</code> 后面还有一个参数，自定义信息</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">assert!</span>(<span class="number">0</span> == <span class="number">1</span>, <span class="string">&quot;1 not eq 0&quot;</span>);<span class="comment">// false</span></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line">thread <span class="symbol">&#x27;tests</span>::it_works&#x27; panicked at src\lib.rs:<span class="number">7</span>:<span class="number">9</span>:</span><br><span class="line"><span class="number">1</span> not eq <span class="number">0</span></span><br></pre></td></tr></table></figure><p><code>#[should_panic]</code></p><p>添加这个时， panic 才会通过（pass）</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[cfg(test)]</span></span><br><span class="line"><span class="keyword">mod</span> tests &#123;</span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="meta">#[should_panic]</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">it_works</span>() &#123;</span><br><span class="line">        <span class="built_in">assert!</span>(<span class="number">0</span> == <span class="number">1</span>, <span class="string">&quot;1 not eq 0&quot;</span>);<span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line">thread <span class="symbol">&#x27;tests</span>::it_works&#x27; panicked at src\lib.rs:<span class="number">8</span>:<span class="number">9</span>:</span><br><span class="line"><span class="number">1</span> not eq <span class="number">0</span></span><br><span class="line">...</span><br><span class="line">test result: ok. <span class="number">1</span> passed; <span class="number">0</span> failed; <span class="number">0</span> ignored; <span class="number">0</span> measured; <span class="number">0</span> filtered out; finished <span class="keyword">in</span> <span class="number">0.02</span>s</span><br></pre></td></tr></table></figure><p>让 should_panic 更精确</p><p>当 panic 信息包含should_panic 的信息才会通过</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    value: <span class="type">i32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">new</span>(v: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> Node &#123;</span><br><span class="line">        <span class="keyword">if</span> v &gt; <span class="number">100</span> &#123;</span><br><span class="line">            <span class="built_in">panic!</span>(<span class="string">&quot;val &gt; 100&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">panic!</span>(<span class="string">&quot;val &lt;= 100&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Node &#123;value: v&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[cfg(test)]</span></span><br><span class="line"><span class="keyword">mod</span> tests &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">use</span> super::*;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="meta">#[should_panic(expected = <span class="string">&quot;val &gt; 100&quot;</span>)]</span><span class="comment">// </span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">it_works</span>() &#123;</span><br><span class="line">        Node::<span class="title function_ invoke__">new</span>(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line">test result: FAILED. <span class="number">0</span> passed; <span class="number">1</span> failed; <span class="number">0</span> ignored; <span class="number">0</span> measured; <span class="number">0</span> filtered out; finished <span class="keyword">in</span> <span class="number">0.03</span>s</span><br></pre></td></tr></table></figure><p>在测试中使用 <code>Result&lt;T, E&gt;</code></p><p>测试返回 Ok 通过， Err 失败</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[cfg(test)]</span></span><br><span class="line"><span class="keyword">mod</span> tests &#123;</span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">it_works</span>() <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;(),  <span class="type">String</span>&gt; &#123;</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;failed&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line">test result: FAILED. <span class="number">0</span> passed; <span class="number">1</span> failed; <span class="number">0</span> ignored; <span class="number">0</span> measured; <span class="number">0</span> filtered out; finished <span class="keyword">in</span> <span class="number">0.00</span>s</span><br></pre></td></tr></table></figure><h2 id="Controlling-How-Tests-Are-Run"><a href="#Controlling-How-Tests-Are-Run" class="headerlink" title="Controlling How Tests Are Run"></a>Controlling How Tests Are Run</h2><p>改变 cargo test 的行为：添加命令行参数</p><p>默认行为：</p><ul><li>并行运行（运行快，确保测试不相互依赖）</li><li>所有测试</li><li>捕获（不显示）所有输出</li></ul><p>命令行参数：</p><p>针对 cargo test 的参数：紧跟其后 <code>cargo test --help</code> 查看</p><p>针对 测试可执行程序：放在 – 之后 <code>cargo test -- --help</code> 查看</p><p><code>#[ignore]</code> 忽略测试</p><p><code>cargo test -- --ignored</code> 运行被忽略的测试</p><h2 id="Test-Organization"><a href="#Test-Organization" class="headerlink" title="Test Organization"></a>Test Organization</h2><p>测试分类</p><ul><li><p>单元测试 <code>#[cfg(test)]</code></p></li><li><p>集成测试 处于被测试库外  面</p><p>集成测试新建文件夹 tests，tests 目录下每个测试文件都是单独的一个 crate，需要将被测试库导入，无需标注 #[cfg(test)]，tests 目录被特殊对待</p></li></ul><p>单独测试某个文件内所有测试 <code>cargo test --test 文件名</code> </p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
          <category> Languages </category>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Generic Types, Traits, and Lifetimes</title>
      <link href="/2024/02/07/Learning/Languages/Rust/%E2%92%8E.Generic%20Types,%20Traits,%20and%20Lifetimes/"/>
      <url>/2024/02/07/Learning/Languages/Rust/%E2%92%8E.Generic%20Types,%20Traits,%20and%20Lifetimes/</url>
      
        <content type="html"><![CDATA[<h1 id="Generic-Types-Traits-and-Lifetimes"><a href="#Generic-Types-Traits-and-Lifetimes" class="headerlink" title="Generic Types, Traits, and Lifetimes"></a>Generic Types, Traits, and Lifetimes</h1><h2 id="Removing-Duplication-by-Extracting-a-Function"><a href="#Removing-Duplication-by-Extracting-a-Function" class="headerlink" title="Removing Duplication by Extracting a Function"></a>Removing Duplication by Extracting a Function</h2><p>如果代码需要重复使用，考虑封装成函数</p><h2 id="Generic-Data-Types"><a href="#Generic-Data-Types" class="headerlink" title="Generic Data Types"></a>Generic Data Types</h2><p>泛型：提高代码的复用性</p><p>函数泛型格式</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">fn_name</span>&lt;T,...&gt;(paraments...) <span class="punctuation">-&gt;</span> <span class="keyword">type</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到只需要加&lt;T..&gt; 即可</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">max_element</span>&lt;T&gt;(item: &amp;[T]) <span class="punctuation">-&gt;</span> T &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">val</span> = item[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> &amp;x <span class="keyword">in</span> item &#123;</span><br><span class="line">        <span class="keyword">if</span> x &gt; val &#123;</span><br><span class="line">            val = x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// binary operation `&gt;` cannot be applied to type `T</span></span><br><span class="line"><span class="comment">// 这个暂时不管</span></span><br></pre></td></tr></table></figure><p>结构体泛型</p><p>格式</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">name</span>&lt;T..&gt; &#123;</span><br><span class="line">    name1: T,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>&lt;T&gt; &#123;</span><br><span class="line">    x: T,</span><br><span class="line">    y: T,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举中的泛型</p><p><code>Option&lt;T&gt;</code>，<code>Result&lt;T, E&gt;</code></p><p>方法泛型</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span>&lt;T&gt; Point&lt;T&gt; &#123;<span class="comment">// T 要 impl&lt;T&gt;</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">x</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;T &#123;</span><br><span class="line">        &amp;<span class="keyword">self</span>.x</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Point</span>&lt;<span class="type">i32</span>&gt; &#123; <span class="comment">// 具体类型 无 &lt;T&gt;</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">y</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;<span class="type">i32</span> &#123;</span><br><span class="line">        &amp;<span class="keyword">self</span>.y</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>&lt;T, U&gt; &#123;</span><br><span class="line">    x: T,</span><br><span class="line">    y: U,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;T, U&gt; Point&lt;T, U&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">mixed</span>&lt;V, W&gt;(<span class="keyword">self</span>, p: Point&lt;V, W&gt;) <span class="punctuation">-&gt;</span> Point&lt;T, W&gt; &#123;</span><br><span class="line">        Point &#123;</span><br><span class="line">            x: <span class="keyword">self</span>.x,</span><br><span class="line">            y: p.y,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="Traits-Defining-Shared-Behavior"><a href="#Traits-Defining-Shared-Behavior" class="headerlink" title="Traits: Defining Shared Behavior"></a>Traits: Defining Shared Behavior</h2><p>定义trait，使用关键字 <code>trait</code> </p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">trait</span> <span class="title class_">Summary</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">summary</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只有函数签名，无具体实现，也可以默认实现</p><p>实现 trait</p><p>格式</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">trait_name</span> <span class="keyword">for</span> <span class="title class_">struct_name</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">trait</span> <span class="title class_">Summary</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">summary</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Data</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> username: <span class="type">String</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Summary</span> <span class="keyword">for</span> <span class="title class_">Data</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">summary</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">        <span class="built_in">format!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, <span class="keyword">self</span>.username)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// main</span></span><br><span class="line"><span class="keyword">use</span> rust::Data;<span class="comment">// 引入 //[package] name = &quot;rust&quot;</span></span><br><span class="line"><span class="keyword">use</span> rust::Summary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = Data &#123;</span><br><span class="line">        username: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;SCUT&quot;</span>),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, x.<span class="title function_ invoke__">summary</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现 trait 的约束</p><p>这个 类型 或 这个 trait 是本地 crate 里定义的</p><p>使用 trait 作为参数</p><p><code>impl trait</code> 语法，适用于简单情况</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">test</span>(x: <span class="keyword">impl</span> <span class="title class_">Summary</span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>泛型写法</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">test</span>&lt;T: Summary&gt;(x: T) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>+</code> 添加多个 trait</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">test</span>&lt;T: Summary + Display&gt;(x: T) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有多个量需要不同 trait</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">test</span>&lt;T: Summary + Display, U: <span class="built_in">Clone</span>&gt;(x: T, y: U) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>where</code> 语句</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">test</span>&lt;T, U&gt;(x: T, y: U) <span class="punctuation">-&gt;</span> () <span class="keyword">where</span> </span><br><span class="line">    T: Summary + Display,</span><br><span class="line">    U: <span class="built_in">Clone</span>, </span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><p>trait 作为返回类型， <strong>只能返回同一种类型</strong></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">test</span>() <span class="punctuation">-&gt;</span> <span class="keyword">impl</span> <span class="title class_">Summary</span> &#123;</span><br><span class="line">    Data &#123;</span><br><span class="line">        username: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;SCUT&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Validating-References-with-Lifetimes"><a href="#Validating-References-with-Lifetimes" class="headerlink" title="Validating References with Lifetimes"></a>Validating References with Lifetimes</h2><p>看一个例子</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">r</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line">        r = &amp;x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// borrowed value does not live long enough</span></span><br></pre></td></tr></table></figure><p>x 的生命周期小于 r，引用的对象生命周期必须大于等于引用者</p><p> 生命周期参数名：以 <code>’</code> 开头，通常全小写，一般用 <code>’a</code></p><p>生命周期标注位置：在引用的 <code>&amp;</code> 后面，使用空格将标注和引用类型分开</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&amp;<span class="type">i32</span> <span class="comment">// 引用</span></span><br><span class="line">&amp; <span class="symbol">&#x27;a</span> <span class="type">i32</span> <span class="comment">// 带有显示生命周期的引用</span></span><br><span class="line">&amp; <span class="symbol">&#x27;a</span> <span class="keyword">mut</span> <span class="type">i32</span> <span class="comment">// 带有显示生命周期的可变引用</span></span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">longest</span>(str1: &amp;<span class="type">String</span>, str2: &amp;<span class="type">String</span>) <span class="punctuation">-&gt;</span> &amp;<span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> str1.<span class="title function_ invoke__">len</span>() &gt; str2.<span class="title function_ invoke__">len</span>() &#123;</span><br><span class="line">        str1</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        str2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">t</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;2024&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, <span class="title function_ invoke__">longest</span>(&amp;s, &amp;t));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// expected named lifetime parameter</span></span><br></pre></td></tr></table></figure><p>无法判断 str1 和 str2 的生命周期长度</p><p>更改为</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">longest</span>&lt;<span class="symbol">&#x27;a</span>&gt;(str1: &amp;<span class="symbol">&#x27;a</span> <span class="type">String</span>, str2: &amp;<span class="symbol">&#x27;a</span> <span class="type">String</span>) <span class="punctuation">-&gt;</span> &amp;<span class="symbol">&#x27;a</span> <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> str1.<span class="title function_ invoke__">len</span>() &gt; str2.<span class="title function_ invoke__">len</span>() &#123;</span><br><span class="line">        str1</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        str2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">t</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;2024&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, <span class="title function_ invoke__">longest</span>(&amp;s, &amp;t));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样生命周期会取较小的那个，<strong>实际的生命周期未改变</strong></p><p>结构体与生命周期</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Ie</span>&lt;<span class="symbol">&#x27;a</span>&gt; &#123;</span><br><span class="line">    part: &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="string">&quot;2024&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">i</span> = Ie &#123;</span><br><span class="line">        part: s,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字段的生命周期要大于等于对象本身的生命周期</span></span><br></pre></td></tr></table></figure><p>生命周期的省略规则</p><p>所有引用都有生命周期，需要为使用生命周期的函数或 struct 指定生命周期参数</p><p>如果应用规则后，引用的生命周期仍模糊不清 -&gt; 编译错误，解决办法：添加生命周期标注，表明引用间的相互关系</p><p>输入、输出生命周期</p><p>函数&#x2F;方法的参数：输入生命周期</p><p>函数&#x2F;方法的返回值：输出生命周期</p><p><strong>三个规则</strong></p><ol><li>每个引用类型的参数都有自己的生命周期</li><li>如果只有一个输入生命周期参数，那么该生命周期会被赋给所有输出生命周期</li><li>如果有多个输入生命周期，但其中一个是 &amp;self 或 &amp;mut self （方法），那么 self 的生命周期会被赋给所有输出生命周期参数、</li></ol><p>在应用三个规则后，输出生命周期还不清楚，编译错误</p><p>方法中的生命周期标注</p><p>和泛型类似</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Ie</span>&lt;<span class="symbol">&#x27;a</span>&gt; &#123;</span><br><span class="line">    part: &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;<span class="symbol">&#x27;a</span>&gt; Ie&lt;<span class="symbol">&#x27;a</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">lv</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">rt</span>(&amp;<span class="keyword">self</span>, s: &amp; <span class="type">str</span>) <span class="punctuation">-&gt;</span>&amp;<span class="type">str</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.part</span><br><span class="line">    &#125;<span class="comment">// 应用规则三</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态生命周期</p><p><code>&#39;static</code> </p><p>所有字符串字面值都拥有 static 生命周期</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span>:&amp;<span class="symbol">&#x27;static</span> <span class="type">str</span> = <span class="string">&quot;2024&quot;</span>;</span><br></pre></td></tr></table></figure><p>生命周期与 trait bound</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">test</span>&lt;<span class="symbol">&#x27;a</span>, T&gt;(s: &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>, t: &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>, z: T) <span class="punctuation">-&gt;</span> &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span> </span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    T: Display,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, z);</span><br><span class="line">    <span class="keyword">if</span> s.<span class="title function_ invoke__">len</span>() &lt; t.<span class="title function_ invoke__">len</span>() &#123;</span><br><span class="line">        t</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        s</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
          <category> Languages </category>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Error Handling</title>
      <link href="/2024/02/03/Learning/Languages/Rust/%E2%92%8D.Error%20Handling/"/>
      <url>/2024/02/03/Learning/Languages/Rust/%E2%92%8D.Error%20Handling/</url>
      
        <content type="html"><![CDATA[<h1 id="Error-Handling"><a href="#Error-Handling" class="headerlink" title="Error Handling"></a>Error Handling</h1><h2 id="Unrecoverable-Errors-with-panic"><a href="#Unrecoverable-Errors-with-panic" class="headerlink" title="Unrecoverable Errors with panic!"></a>Unrecoverable Errors with panic!</h2><p>Rust 的 可靠性：错误处理，大部分情况下：在编译时提示错误并处理</p><p>错误分类：</p><p>可恢复：例如文件未找到，可再次尝试</p><p>不可恢复：例如访问索引超出范围</p><p>默认情况下，当 panic 发生：</p><ul><li>程序展开调用栈 （工作量大）</li><li>Rust 沿着调用栈回走</li><li>清理每个遇到的函数中的数据</li><li>或 立即终止调用栈</li><li>不清理内存，直接停止程序，内存需要 OS 进行清理</li></ul><p><code>panic!</code> 宏</p><p>产生 panic 打印路径，行等信息</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">panic!</span>(<span class="string">&quot;crash&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// thread &#x27;main&#x27; panicked at src\main.rs:3:5:crash</span></span><br></pre></td></tr></table></figure><p>panic！可能出现在我们写的代码中，我们所依赖的代码中</p><p>通过设置环境变量 RUST_BACKTRACE 可以得到回溯信息</p><h2 id="Recoverable-Errors-with-Result"><a href="#Recoverable-Errors-with-Result" class="headerlink" title="Recoverable Errors with Result"></a>Recoverable Errors with Result</h2><p>Result 枚举</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">enum</span> <span class="title class_">Result</span>&lt;T, E&gt; &#123;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(T),</span><br><span class="line">    <span class="title function_ invoke__">Err</span>(E),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>操作成功返回 Ok(T) 中的数据</p><p>操作失败返回 Err(E) 中的数据</p><p>例如打开一个文件， 返回 Result 类型</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fs::File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">frs</span> = File::<span class="title function_ invoke__">open</span>(<span class="string">&quot;some.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="keyword">match</span> frs &#123;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(file) =&gt; file,</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(error) =&gt; &#123;</span><br><span class="line">            <span class="built_in">panic!</span>(<span class="string">&quot;Not find file &#123;:#?&#125;&quot;</span>, error);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出信息</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">thread <span class="symbol">&#x27;main</span>&#x27; panicked at src\main.rs:<span class="number">9</span>:<span class="number">13</span>:</span><br><span class="line">Not find file Os &#123;</span><br><span class="line">    code: <span class="number">2</span>,</span><br><span class="line">    kind: NotFound,</span><br><span class="line">    message: <span class="string">&quot;系统找不到指定的文件。&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传播错误，将错误返回，让调用者决定如何处理</p><p>例如</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">read_username_from_file</span>(path: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">String</span>, io::Error&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">frs</span> = File::<span class="title function_ invoke__">open</span>(path);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">f</span> = <span class="keyword">match</span> frs &#123;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(file) =&gt; file,</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(err) =&gt; <span class="keyword">return</span> <span class="title function_ invoke__">Err</span>(err),</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    <span class="keyword">match</span> f.<span class="title function_ invoke__">read_to_string</span>(&amp;<span class="keyword">mut</span> s) &#123;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(_) =&gt; <span class="title function_ invoke__">Ok</span>(s),</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="title function_ invoke__">Err</span>(e),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>?</code> 运算符 传播错误的一种快捷方式</p><p>例如，与上面功能一样</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">read_username_from_file</span>(path: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">String</span>, io::Error&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">f</span> = File::<span class="title function_ invoke__">open</span>(path)?;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    f.<span class="title function_ invoke__">read_to_string</span>(&amp;<span class="keyword">mut</span> s)?;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let mut f = File::open(path)?;</span></span><br><span class="line"><span class="comment">// 等于</span></span><br><span class="line"><span class="comment">// let mut f = match frs &#123;</span></span><br><span class="line"><span class="comment">// Ok(file) =&gt; file,</span></span><br><span class="line"><span class="comment">//     Err(err) =&gt; return Err(err),</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br></pre></td></tr></table></figure><p>即 <code>?</code> 作用于 Result ，成功即 Ok(T) 中的 T， 失败即 return Err</p><p>链式调用的方式</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">read_username_from_file</span>(path: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">String</span>, io::Error&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    File::<span class="title function_ invoke__">open</span>(path)?.<span class="title function_ invoke__">read_to_string</span>(&amp;<span class="keyword">mut</span> s)?;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="To-panic-or-Not-to-panic"><a href="#To-panic-or-Not-to-panic" class="headerlink" title="To panic! or Not to panic!"></a>To panic! or Not to panic!</h2><p>示例、 代码原型和测试都非常适合 panic  </p><p>当我们比编译器知道更多的情况，当你有一些其他的逻辑来确保 Result 会是 Ok 值时，调用 unwrap 或者 expect 也是合适的  </p><p>错误处理指导原则：在当有可能会导致有害状态的情况下建议使用 panic!</p><p>当错误预期会出现时，返回 Result 仍要比调用 panic! 更为合适 </p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
          <category> Languages </category>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Common Collections</title>
      <link href="/2024/02/01/Learning/Languages/Rust/%E2%92%8C.Common%20Collections/"/>
      <url>/2024/02/01/Learning/Languages/Rust/%E2%92%8C.Common%20Collections/</url>
      
        <content type="html"><![CDATA[<h1 id="Common-Collections"><a href="#Common-Collections" class="headerlink" title="Common Collections"></a>Common Collections</h1><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><h3 id="创建Vector"><a href="#创建Vector" class="headerlink" title="创建Vector"></a>创建Vector</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span>: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt; = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();<span class="comment">// 创建Vector</span></span><br><span class="line"><span class="comment">// Vector&lt;T&gt; 中类型一样</span></span><br><span class="line"><span class="comment">// 可以显示声明 T 类型， 也可以编译器推断出 type</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用宏 vec! 来创建初始Vec&lt;T&gt;</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">v</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">v.<span class="title function_ invoke__">push</span>(<span class="number">1</span>);</span><br><span class="line">v.<span class="title function_ invoke__">push</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="variable">x</span> <span class="keyword">in</span> v.<span class="title function_ invoke__">iter</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除Vector"><a href="#删除Vector" class="headerlink" title="删除Vector"></a>删除Vector</h3><p>  当 Vector 离开作用域时会被删除</p><h3 id="访问-Vector-中的元素"><a href="#访问-Vector-中的元素" class="headerlink" title="访问 Vector 中的元素"></a>访问 Vector 中的元素</h3><p>1.索引 data_name[index]</p><p>2.get  data_name.get(index)</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, x[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// v.get(index) 返回 Option&lt;T&gt;</span></span><br><span class="line"><span class="keyword">match</span> x.<span class="title function_ invoke__">get</span>(<span class="number">3</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">Some</span>(val) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, val),</span><br><span class="line">    <span class="literal">None</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;index out of bound&quot;</span>),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>当 index 超出范围时</strong><br><strong>data_name[index] 会造成 panic</strong><br><strong>data_name.get(index) 会返回 None</strong></p><h3 id="Ownership"><a href="#Ownership" class="headerlink" title="Ownership"></a>Ownership</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">v</span> = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">first</span> = &amp;v[<span class="number">0</span>];</span><br><span class="line">v.<span class="title function_ invoke__">push</span>(<span class="number">6</span>);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, first);</span><br><span class="line"><span class="comment">// cannot borrow `v` as mutable because it is also borrowed as immutable</span></span><br></pre></td></tr></table></figure><p>   记得Ownership 的特性吗？  不能同时有可变引用，和不可变引用</p><p>  first 已经对 v 不可变引用， push 就不能操作了</p><p>可变引用的示例</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">v</span> = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> &amp;<span class="keyword">mut</span> v &#123;</span><br><span class="line">    *i += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> v.<span class="title function_ invoke__">iter</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vector-enum"><a href="#Vector-enum" class="headerlink" title="Vector + enum"></a>Vector + enum</h3><p>Vector + enum 可以实现 Vector 存不同类型</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Kind</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">int</span>(<span class="type">i32</span>),</span><br><span class="line">    <span class="title function_ invoke__">double</span>(<span class="type">f64</span>),</span><br><span class="line">    <span class="title function_ invoke__">string</span>(<span class="type">String</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="built_in">vec!</span>[Kind::<span class="title function_ invoke__">int</span>(<span class="number">1</span>), Kind::<span class="title function_ invoke__">double</span>(<span class="number">1.0</span>), Kind::<span class="title function_ invoke__">string</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;2024&quot;</span>))];</span><br><span class="line"><span class="comment">// enum 中的所有类型必须明确，这样编译器才可以确定大小</span></span><br><span class="line"><span class="comment">// 也可用 trait 超出本节范围，暂时不提</span></span><br></pre></td></tr></table></figure><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="创建-String"><a href="#创建-String" class="headerlink" title="创建 String"></a>创建 String</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">x</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line"><span class="keyword">let</span> <span class="variable">y</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;ABC&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="添加元素-1"><a href="#添加元素-1" class="headerlink" title="添加元素"></a>添加元素</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x.<span class="title function_ invoke__">push</span>(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">x.<span class="title function_ invoke__">push_str</span>(<span class="string">&quot;ABC&quot;</span>);</span><br><span class="line">x += <span class="string">&quot;A&quot;</span>;<span class="comment">// str 类型</span></span><br><span class="line">x += &amp;y;<span class="comment">// 采用&amp;String</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, x);<span class="comment">// AABCA</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, y);<span class="comment">// OwnerShip 不变</span></span><br></pre></td></tr></table></figure><h3 id="to-String"><a href="#to-String" class="headerlink" title="to String"></a>to String</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// type -&gt; String</span></span><br><span class="line"><span class="comment">// String::from();</span></span><br><span class="line"><span class="comment">// str_data_name.to_string();</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;2024&quot;</span>);<span class="comment">// str -&gt; String</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">y</span> = <span class="string">&quot;2024&quot;</span>.<span class="title function_ invoke__">to_string</span>();<span class="comment">// str -&gt; String</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">z</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = z.<span class="title function_ invoke__">to_string</span>();<span class="comment">// i32 -&gt; String</span></span><br></pre></td></tr></table></figure><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接 +"></a>字符串拼接 +</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;20&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">s2</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;24&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">s3</span> = s1 + &amp;s2;<span class="comment">// 注意只有第一个不用&amp; 等价于把&amp;String -&gt; &amp;str</span></span><br><span class="line"><span class="comment">// println!(&quot;&#123;&#125;&quot;, s1);// Error! borrow of moved value: `s1`</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s2);<span class="comment">// right </span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s3);<span class="comment">// right</span></span><br></pre></td></tr></table></figure><h3 id="format"><a href="#format" class="headerlink" title="format!"></a>format!</h3><p>format! 拼接字符串 不会获得String的所有权</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;20&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">s2</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;24&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">s3</span> = <span class="built_in">format!</span>(<span class="string">&quot;&#123;&#125;&#123;&#125;&quot;</span>, s1, s2);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s1);<span class="comment">// right</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s2);<span class="comment">// right </span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s3);<span class="comment">// right</span></span><br></pre></td></tr></table></figure><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>String 不支持 [index] 访问元素</p><p>String len() 方法返回的是字节数，一般一个字母是一个字节</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;SCUT&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">y</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;华工&quot;</span>);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; &#123;&#125;&quot;</span>, x.<span class="title function_ invoke__">len</span>(), y.<span class="title function_ invoke__">len</span>());<span class="comment">// 输出 4 6 // 汉字有些占 2 字节， 有些占 3 字节</span></span><br></pre></td></tr></table></figure><p>回到字符串切片</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串切片只能沿着 char 边界切</span></span><br><span class="line"><span class="comment">// 比如 华 占两个字节，对中间切会造成 panic</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = &amp;y[<span class="number">0</span>..<span class="number">1</span>];</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s);</span><br><span class="line"><span class="comment">// byte index 1 is not a char boundary; it is inside &#x27;华&#x27; (bytes 0..3) of `华工`</span></span><br></pre></td></tr></table></figure><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>遍历 String<br>chars() 从字符角度<br>bytes() 从字节角度</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">x</span> <span class="keyword">in</span> y.<span class="title function_ invoke__">chars</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    华</span></span><br><span class="line"><span class="comment">    工</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">x</span> <span class="keyword">in</span> y.<span class="title function_ invoke__">bytes</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    229</span></span><br><span class="line"><span class="comment">    141</span></span><br><span class="line"><span class="comment">    142</span></span><br><span class="line"><span class="comment">    229</span></span><br><span class="line"><span class="comment">    183</span></span><br><span class="line"><span class="comment">    165</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Error!</span></span><br><span class="line"><span class="keyword">for</span> <span class="variable">x</span> <span class="keyword">in</span> y &#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">// 没有 iter</span></span><br></pre></td></tr></table></figure><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><p>数据在 heap 上</p><p>不在 Prelude 中</p><p>同一个 HashMap 中 K 类型必须一样</p><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">x</span>: HashMap&lt;<span class="type">String</span>, <span class="type">i32</span>&gt; = HashMap::<span class="title function_ invoke__">new</span>();</span><br></pre></td></tr></table></figure><p>可以显示指明也可以编译器推断</p><h3 id="添加元素-2"><a href="#添加元素-2" class="headerlink" title="添加元素"></a>添加元素</h3><p><code>insert</code> 方法，其返回 <code>Option&lt;T&gt;</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.<span class="title function_ invoke__">insert</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;SCUT&quot;</span>), <span class="number">2024</span>);</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// If the map did not have this key present, None is returned.</span></span><br><span class="line"><span class="comment">// If the map did have this key present, the value is updated, and the old value is returned. </span></span><br></pre></td></tr></table></figure><h3 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h3><p><code>get</code> 方法， 返回 <code>Option&lt;T&gt;</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">map</span> = HashMap::<span class="title function_ invoke__">new</span>();</span><br><span class="line"><span class="keyword">let</span> <span class="variable">k</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;SCUT&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> map.<span class="title function_ invoke__">get</span>(&amp;k) &#123;</span><br><span class="line">        <span class="title function_ invoke__">Some</span>(x) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, x),</span><br><span class="line">        <span class="literal">None</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;None&quot;</span>),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="更新-HashMap"><a href="#更新-HashMap" class="headerlink" title="更新 HashMap"></a>更新 HashMap</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// insert 插入时，如果对应的 key 存在，将替换对应的 val</span></span><br></pre></td></tr></table></figure><h3 id="检查-key"><a href="#检查-key" class="headerlink" title="检查 key"></a>检查 key</h3><p><code>contains_key</code> 方法 返回 bool</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> map.<span class="title function_ invoke__">contains_key</span>(&amp;k) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>entry</code> 方法 返回 enum Entry : 代表值是否存在</p><p><code>or_insert()</code> </p><p>如果 key 存在 返回 val 的可变引用</p><p>如果 key 不存在 插入后返回其可变引用</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">e</span> = map.<span class="title function_ invoke__">entry</span>(&amp;k);</span><br><span class="line">e.<span class="title function_ invoke__">or_insert</span>(&amp;v);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链式调用</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">e</span> = map.<span class="title function_ invoke__">entry</span>(&amp;k).<span class="title function_ invoke__">or_insert</span>(&amp;v);</span><br></pre></td></tr></table></figure><h3 id="遍历-1"><a href="#遍历-1" class="headerlink" title="遍历"></a>遍历</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (k, v) <span class="keyword">in</span> &amp;map &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; &#123;&#125;&quot;</span>, k, v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Ownership-1"><a href="#Ownership-1" class="headerlink" title="Ownership"></a>Ownership</h3><p>对于实现了 copy trait 的类型，值会被复制到 HahaMap</p><p>对于未实现 copy trait 的类型，其所有权会交给 HashMap</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">map</span> = HashMap::<span class="title function_ invoke__">new</span>();</span><br><span class="line"><span class="keyword">let</span> <span class="variable">k</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;SCUT&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">v</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;2024&quot;</span>);</span><br><span class="line">map.<span class="title function_ invoke__">insert</span>(k, v);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; &#123;&#125;&quot;</span>, k, v);<span class="comment">// Error!</span></span><br><span class="line"><span class="comment">// move occurs because `v` has type `String`, which does not implement the `Copy` trait</span></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">map</span>: HashMap&lt;&amp;<span class="type">String</span>, &amp;<span class="type">String</span>&gt; = HashMap::<span class="title function_ invoke__">new</span>();</span><br><span class="line"><span class="keyword">let</span> <span class="variable">k</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;SCUT&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">v</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;2024&quot;</span>);</span><br><span class="line">map.<span class="title function_ invoke__">insert</span>(&amp;k, &amp;v);<span class="comment">// &amp;String 形式</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; &#123;&#125;&quot;</span>, k, v);<span class="comment">// correct</span></span><br><span class="line"><span class="comment">// 在 HashMap 有效期间， 被引用的值必须保持有效</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
          <category> Languages </category>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Managing Growing Projects with Packages, Crates, and Modules</title>
      <link href="/2024/02/01/Learning/Languages/Rust/%E2%92%8B.Managing%20Growing%20Projects%20with%20Packages,%20Crates,%20and%20Modules/"/>
      <url>/2024/02/01/Learning/Languages/Rust/%E2%92%8B.Managing%20Growing%20Projects%20with%20Packages,%20Crates,%20and%20Modules/</url>
      
        <content type="html"><![CDATA[<h1 id="Managing-Growing-Projects-with-Packages-Crates-and-Modules"><a href="#Managing-Growing-Projects-with-Packages-Crates-and-Modules" class="headerlink" title="Managing Growing Projects with Packages, Crates, and Modules"></a>Managing Growing Projects with Packages, Crates, and Modules</h1><h2 id="Packages-and-Crates"><a href="#Packages-and-Crates" class="headerlink" title="Packages and Crates"></a>Packages and Crates</h2><h3 id="Package"><a href="#Package" class="headerlink" title="Package"></a>Package</h3><p>Package(包)    : Cargo 的特性，让你构建、测试、共享 crate</p><p>Crate(单元包)    : 模块树，它可产生一个 library 或可执行文件</p><p>Module(模块), use : 让你控制代码的组织、作用域、私有路径</p><p>Path(路径)     : 为 struct、function 或 module 等项命名的方式</p><p>Cargo 的惯例</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">src/main.rs:</span><br><span class="line">- binary <span class="keyword">crate</span> 的 <span class="keyword">crate</span> root</span><br><span class="line">- <span class="keyword">crate</span> 名与 package 名相同</span><br><span class="line"></span><br><span class="line">src/lib.rs：</span><br><span class="line">- package 包含一个 library <span class="keyword">crate</span></span><br><span class="line">- library <span class="keyword">crate</span> 的 <span class="keyword">crate</span> root</span><br><span class="line">- <span class="keyword">crate</span> 名与 package 名相同</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">一个 package 可以同时包含 src/main.rs 和 src/lib.rs</span><br><span class="line">- 名称与 package 名相同</span><br><span class="line"></span><br><span class="line">一个 package 可以有多个 binary <span class="keyword">crate</span>：</span><br><span class="line">- 文件放在 src/bin</span><br><span class="line">- 每个文件是单独的 binary <span class="keyword">crate</span></span><br><span class="line"></span><br><span class="line">一个 package 最多有一个个 library <span class="keyword">crate</span>：</span><br></pre></td></tr></table></figure><h2 id="Defining-Modules-to-Control-Scope-and-Privacy"><a href="#Defining-Modules-to-Control-Scope-and-Privacy" class="headerlink" title="Defining Modules to Control Scope and Privacy"></a>Defining Modules to Control Scope and Privacy</h2><h3 id="module"><a href="#module" class="headerlink" title="module"></a>module</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Module:</span><br><span class="line">- 在一个 <span class="keyword">crate</span> 内，将代码进行分组</span><br><span class="line">- 增加可读性，易于复用</span><br><span class="line">- 控制项目（item）的私有性。public、private</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">建立 module：</span><br><span class="line">- 使用 <span class="keyword">mod</span> 关键字</span><br><span class="line">- 可以嵌套</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mod</span> front_of_house &#123;</span><br><span class="line">    <span class="keyword">mod</span> hosting &#123;</span><br><span class="line">        <span class="keyword">fn</span> <span class="title function_">add_to_waiting</span>() &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>pub</code> 关键字</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span>:</span><br><span class="line">- <span class="keyword">struct</span> 是公共的</span><br><span class="line">- <span class="keyword">struct</span> 的字段默认私有</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mod</span> front_of_house &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Breakfast</span> &#123;</span><br><span class="line">        <span class="keyword">pub</span> toast: <span class="type">String</span>,<span class="comment">// public</span></span><br><span class="line">        seasonal_fruit: <span class="type">String</span>,<span class="comment">// private</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">impl</span> <span class="title class_">Breakfast</span> &#123;</span><br><span class="line">        <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">summer</span>(toast: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> Breakfast &#123;</span><br><span class="line">            Breakfast &#123;</span><br><span class="line">                toast: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(toast),</span><br><span class="line">                seasonal_fruit: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;peaches&quot;</span>),</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">eat_at_restaurant</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">meal</span> = front_of_house::Breakfast::<span class="title function_ invoke__">summer</span>(<span class="string">&quot;Rye&quot;</span>);</span><br><span class="line">    meal.toast = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Wheat&quot;</span>);</span><br><span class="line">    meal.seasonal_fruit = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;blue&quot;</span>);<span class="comment">// Error! private field</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Paths-for-Referring-to-an-Item-in-the-Module-Tree"><a href="#Paths-for-Referring-to-an-Item-in-the-Module-Tree" class="headerlink" title="Paths for Referring to an Item in the Module Tree"></a>Paths for Referring to an Item in the Module Tree</h2><h3 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h3><p>绝对路径：从 crate root 开始，使用 crate 名 或 字面值 crate</p><p>相对路径：从 当前模块开始，使用 self，super 或当前模块的标识符</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mod</span> front_of_house &#123;</span><br><span class="line">    <span class="keyword">mod</span> hosting &#123;</span><br><span class="line">        <span class="keyword">fn</span> <span class="title function_">add_to_waiting</span>() &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">eat_at_restaurant</span>() &#123;</span><br><span class="line"><span class="comment">// 绝对路径</span></span><br><span class="line">    crate::front_of_house::hosting::<span class="title function_ invoke__">add_to_waiting</span>();</span><br><span class="line"><span class="comment">//相对路径</span></span><br><span class="line">    front_of_house::hosting::<span class="title function_ invoke__">add_to_waiting</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cargo run 会发现错误</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">house::hosting::add_to_waiting();</span></span><br><span class="line"><span class="comment">   |           ^^^^^^^  -------------- function `add_to_waiting` is not publicly re-exported</span></span><br><span class="line"><span class="comment">   |           |</span></span><br><span class="line"><span class="comment">   |           private module</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>这就是因为默认私有，使用 <code>pub</code> 关键字将条目标记为公共的</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mod</span> front_of_house &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">mod</span> hosting &#123;</span><br><span class="line">        <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">add_to_waiting</span>() &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>父级模块无法访问子模块中的私有条目</p><p>子模块可以访问所有祖先模块中的条目</p><p><code>super</code> 关键字，表示上一级</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mod</span> front_of_house &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">mod</span> hosting &#123;</span><br><span class="line">        <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">add_to_waiting</span>() &#123;</span><br><span class="line">            super::<span class="title function_ invoke__">get</span>();<span class="comment">// 调用上一级的 get            </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">get</span>() <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;2024&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Bringing-Paths-into-Scope-with-the-use-Keyword"><a href="#Bringing-Paths-into-Scope-with-the-use-Keyword" class="headerlink" title="Bringing Paths into Scope with the use Keyword"></a>Bringing Paths into Scope with the <code>use</code> Keyword</h2><p>遵守私有性原则</p><p>一般将函数的的父级引入模块</p><p>struct，enum，其他：指定完整路径（指定到本身）</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mod</span> front_of_house &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Breakfast</span> &#123;</span><br><span class="line">        <span class="keyword">pub</span> toast: <span class="type">String</span>,</span><br><span class="line">        seasonal_fruit: <span class="type">String</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">impl</span> <span class="title class_">Breakfast</span> &#123;</span><br><span class="line">        <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">summer</span>(toast: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> Breakfast &#123;</span><br><span class="line">            Breakfast &#123;</span><br><span class="line">                toast: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(toast),</span><br><span class="line">                seasonal_fruit: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;peaches&quot;</span>),</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> crate::front_of_house::Breakfast;<span class="comment">// 绝对路径</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">eat_at_restaurant</span>() &#123;</span><br><span class="line">    Breakfast::<span class="title function_ invoke__">summer</span>(<span class="string">&quot;abc&quot;</span>);<span class="comment">//这时候就可直接用 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同名条目：指定到父级</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fmt;</span><br><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"></span><br><span class="line">fmt::<span class="type">Result</span>;</span><br><span class="line">io::<span class="type">Result</span>;</span><br></pre></td></tr></table></figure><p><code>as</code> 关键字</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fmt::<span class="type">Result</span> <span class="keyword">as</span> FmtResult;</span><br><span class="line"><span class="keyword">use</span> std::io::<span class="type">Result</span> <span class="keyword">as</span> IoResult;</span><br></pre></td></tr></table></figure><p>这时候就可以直接用 as 后的东西代替前面的东西</p><p><code>use</code> 引入默认私有，外部代码看不到</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">eat_at_restaurant</span>() &#123;</span><br><span class="line">    <span class="keyword">use</span> crate::front_of_house::Breakfast; <span class="comment">// 外部看不到</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = Breakfast::<span class="title function_ invoke__">summer</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:#?&#125;&quot;</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">eat_at_restaurant</span>() &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">use</span> crate::front_of_house::Breakfast;<span class="comment">// 外部看得到</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = Breakfast::<span class="title function_ invoke__">summer</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:#?&#125;&quot;</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用外部包 package</p><p>Cargo.toml 下添加 package</p><p>package 下载 <a href="https://crates.io/">https://crates.io/</a></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Cargo.toml 下</span></span><br><span class="line">[dependencies]</span><br><span class="line">rand = <span class="string">&quot;0.7.3&quot;</span></span><br><span class="line"><span class="comment">// package</span></span><br></pre></td></tr></table></figure><p>需要 cargo build， 下载慢可以换国内镜像源</p><p>使用 use 将特定条目引入作用域</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> rand::Rng;</span><br></pre></td></tr></table></figure><p>std 默认内置（即不需要在 dependencies 放 package），但需要用 use 来引入作用域</p><p>例如引入 HashMap</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br></pre></td></tr></table></figure><p>使用嵌套路径清理大量 use 语句</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"><span class="keyword">use</span> std::collections::HashSet;</span><br><span class="line"><span class="keyword">use</span> std::collections::BTreeMap;</span><br></pre></td></tr></table></figure><p>我们发现前面都是一样的</p><p>使用语法 <code>相同部分::&#123;不同部分,...&#125;</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::&#123;HashMap, HashSet, BTreeMap&#125;;</span><br></pre></td></tr></table></figure><p>当我们需要本身和它下面的条目时，使用 self</p><p>例如：引入 std::collections 和 std::collections::HashMap</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::&#123;<span class="keyword">self</span>, HashMap&#125;;<span class="comment">// self</span></span><br></pre></td></tr></table></figure><p>当我们需要一个模块下所有条目时，我们可以使用通配符 <code>*</code> 来引入</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::*;</span><br></pre></td></tr></table></figure><p>一般测试时才会用</p><h2 id="Separating-Modules-into-Different-Files"><a href="#Separating-Modules-into-Different-Files" class="headerlink" title="Separating Modules into Different Files"></a>Separating Modules into Different Files</h2><p>将模块内容移动到其他文件</p><p>模块定义时，如果模块名后面是<code>;</code>，而不是代码块<code>&#123;code&#125;</code>，rust 会从与模块同名的文件中加载内容，<strong>模块树结构不会变化</strong></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib.rs 内</span></span><br><span class="line"><span class="keyword">mod</span> hosting;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hosting.rs 内</span></span><br><span class="line"><span class="keyword">mod</span> hosting &#123;</span><br><span class="line"><span class="comment">// code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是嵌套模块，需要放到对应文件夹下</p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
          <category> Languages </category>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Using Structs to Structure Related Data</title>
      <link href="/2024/02/01/Learning/Languages/Rust/%E2%92%8A.Using%20Structs%20to%20Structure%20Related%20Data/"/>
      <url>/2024/02/01/Learning/Languages/Rust/%E2%92%8A.Using%20Structs%20to%20Structure%20Related%20Data/</url>
      
        <content type="html"><![CDATA[<h1 id="Using-Structs-to-Structure-Related-Data"><a href="#Using-Structs-to-Structure-Related-Data" class="headerlink" title="Using Structs to Structure Related Data"></a>Using Structs to Structure Related Data</h1><h2 id="Defining-and-Instantiating-Structs"><a href="#Defining-and-Instantiating-Structs" class="headerlink" title="Defining and Instantiating Structs"></a>Defining and Instantiating Structs</h2><p>格式</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Data_name</span> &#123;</span><br><span class="line">    data1: type1,</span><br><span class="line">    data2: type2,</span><br><span class="line">&#125;<span class="comment">// 注意无;</span></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Data</span> &#123;</span><br><span class="line">    name: <span class="type">String</span>,</span><br><span class="line">    age: <span class="type">u32</span>,</span><br><span class="line">    gender: <span class="type">bool</span>,</span><br><span class="line">    balance: <span class="type">f32</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化一个 struct 对象</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">user</span> = Data &#123;</span><br><span class="line">    name: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;SCUT&quot;</span>),</span><br><span class="line">    age: <span class="number">1900</span>,</span><br><span class="line">    gender: <span class="literal">true</span>,</span><br><span class="line">    balance: <span class="number">0.0</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>访问对象中的元素</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125;&quot;</span>, user.name, user.age, user.gender, user.balance);</span><br></pre></td></tr></table></figure><p><code>..</code> 语句</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">user1</span> = Data &#123;</span><br><span class="line">    name: <span class="type">String</span>:: <span class="title function_ invoke__">from</span>(<span class="string">&quot;SCUT&quot;</span>),</span><br><span class="line">    gender: <span class="literal">false</span>,</span><br><span class="line">    ..user <span class="comment">// # 末尾无,</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样创建出来的 user1 ，未指出的变量会复制 user 中的，注意会有 move 语句，所有权可能会变化</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">user1</span> = Data &#123;</span><br><span class="line">    name: <span class="type">String</span>:: <span class="title function_ invoke__">from</span>(<span class="string">&quot;SCUT&quot;</span>),</span><br><span class="line">    gender: <span class="literal">false</span>,</span><br><span class="line">    ..user <span class="comment">// # 末尾无,</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125;&quot;</span>, user1.name, user1.age, user1.gender, user1.balance);</span><br><span class="line"></span><br><span class="line"><span class="comment">// value borrowed here after move !! !! !!</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">user2</span> = Data &#123;</span><br><span class="line">    ..user</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125;&quot;</span>, user2.name, user2.age, user2.gender, user2.balance);</span><br><span class="line"><span class="comment">// println!(&quot;&#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125;&quot;, user.name, user.age, user.gender, user.balance);// Error! value borrowed here after move</span></span><br></pre></td></tr></table></figure><p>tuple struct</p><p>格式</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Data_name</span>(type1, type2,...); <span class="comment">// 有;</span></span><br></pre></td></tr></table></figure><p>创建对象</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tuple struct</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>(<span class="type">f32</span>, <span class="type">f32</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">p</span> = <span class="title function_ invoke__">Point</span>(<span class="number">0.0</span>, <span class="number">0.0</span>);</span><br></pre></td></tr></table></figure><p>访问元素</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; &#123;&#125;&quot;</span>, p.<span class="number">0</span>, p.<span class="number">1</span>);<span class="comment">// 看成元组访问</span></span><br></pre></td></tr></table></figure><h2 id="An-Example-Program-Using-Structs"><a href="#An-Example-Program-Using-Structs" class="headerlink" title="An Example Program Using Structs"></a>An Example Program Using Structs</h2><p>debug</p><p>在类前面加 <code>#[derive(Debug)]</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Data</span> &#123;</span><br><span class="line">    name: <span class="type">String</span>,</span><br><span class="line">    age: <span class="type">u32</span>,</span><br><span class="line">    gender: <span class="type">bool</span>,</span><br><span class="line">    balance: <span class="type">f32</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出 类</p><p><code>&#123;:?&#125;</code> 语法</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, user);</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// Data &#123; name: &quot;SCUT&quot;, age: 1900, gender: true, balance: 0.0 &#125;</span></span><br></pre></td></tr></table></figure><p><code>&#123;:#?&#125;</code> 语法</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;:#?&#125;&quot;</span>, user);</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Data &#123;</span></span><br><span class="line"><span class="comment">        name: &quot;SCUT&quot;,</span></span><br><span class="line"><span class="comment">        age: 1900,</span></span><br><span class="line"><span class="comment">        gender: true,</span></span><br><span class="line"><span class="comment">        balance: 0.0,</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>格式不同</p><p>作为参数</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    width: <span class="type">f64</span>,</span><br><span class="line">    height: <span class="type">f64</span>,</span><br><span class="line">&#125;<span class="comment">// 定义一个 rect</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">area</span>(rect: &amp;Rectangle) <span class="punctuation">-&gt;</span> <span class="type">f64</span> &#123;</span><br><span class="line">    rect.width * rect.height</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">rect</span> = Rectangle &#123;</span><br><span class="line">    width: <span class="number">3.1</span>,</span><br><span class="line">    height: <span class="number">4.1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, <span class="title function_ invoke__">area</span>(&amp;rect));<span class="comment">// 12.709999999999999 精度</span></span><br></pre></td></tr></table></figure><h2 id="Method-Syntax"><a href="#Method-Syntax" class="headerlink" title="Method Syntax"></a>Method Syntax</h2><p>实现类中的函数</p><p><code>impl</code> 语句 implementations</p><p>格式</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">srtuct_name</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">func1</span>(&amp;<span class="keyword">self</span>, ...) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">func2</span>(...) &#123;<span class="comment">// 无 &amp;self 为关联函数 通过 类名::func2() 调用</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    width: <span class="type">f64</span>,</span><br><span class="line">    height: <span class="type">f64</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">area</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">f64</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.width * <span class="keyword">self</span>.height</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">hold</span>(&amp;<span class="keyword">self</span>, rect: &amp;Rectangle) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.width &gt;= rect.width &amp;&amp; <span class="keyword">self</span>.height &gt;= rect.height</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关联函数 无self</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">square</span>(size: <span class="type">f64</span>) <span class="punctuation">-&gt;</span> Rectangle &#123;</span><br><span class="line">        Rectangle &#123;</span><br><span class="line">            width: size,</span><br><span class="line">            height: size,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">r1</span> = Rectangle &#123;</span><br><span class="line">    width: <span class="number">10.0</span>,</span><br><span class="line">    height: <span class="number">20.0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">r2</span> = Rectangle &#123;</span><br><span class="line">    width: <span class="number">11.0</span>,</span><br><span class="line">    height: <span class="number">21.0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; &#123;&#125;&quot;</span>, r1.<span class="title function_ invoke__">hold</span>(&amp;r2), r2.<span class="title function_ invoke__">hold</span>(&amp;r1));</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">sq</span> = Rectangle::<span class="title function_ invoke__">square</span>(<span class="number">10.0</span>);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;:#?&#125;&quot;</span>, sq);</span><br></pre></td></tr></table></figure><p>以上就是 $Rust$ 的 $struct$</p><p>参考 <a href="https://doc.rust-lang.org/book/title-page.html#the-rust-programming-language">The Rust Programming Language</a> </p><p>更多内容参考我的 <a href="https://gitsteve1025.github.io/">Blog</a></p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
          <category> Languages </category>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Understanding Ownership</title>
      <link href="/2024/01/31/Learning/Languages/Rust/%E2%92%89.Understanding%20Ownership/"/>
      <url>/2024/01/31/Learning/Languages/Rust/%E2%92%89.Understanding%20Ownership/</url>
      
        <content type="html"><![CDATA[<h1 id="Understanding-Ownership"><a href="#Understanding-Ownership" class="headerlink" title="Understanding Ownership"></a>Understanding Ownership</h1><h2 id="What-Is-Ownership"><a href="#What-Is-Ownership" class="headerlink" title="What Is Ownership?"></a>What Is Ownership?</h2><p>所有权是 rust 用来管理内存的，本节内容很重要，毕竟 rust 主打内存安全</p><p>内存一般为 stack 和 heap</p><p>在<strong>编译时</strong>可以确定大小的一般放在 stack</p><p>例如 String（可变） 内容放在 heap， 但是 size， capacity 等信息占用的内存是固定的，会放在 stack</p><p>特性</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 超出作用域 内存回收</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">t</span> = s;<span class="comment">// String 编译时大小不确定 复制为浅拷贝 move # heap 内存未复制</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s); <span class="comment">//Error! value borrowed here after move #</span></span><br></pre></td></tr></table></figure><p>当我们复制时只有 stack 部分复制，heap 内容未复制，此时所有权交给了 t ，此时用 s 会引发错误</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">y</span> = x;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; &#123;&#125;&quot;</span>, x, y);<span class="comment">// right</span></span><br></pre></td></tr></table></figure><p>普通类型大小确定，在 stack 中，复制 stack 中的内容，此时任然可以使用</p><p>实际上这与 copy trait 和 drop trait 有关</p><p>copy trait : 实现了就可以完全放在 stack 上</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// i32 f32 bool char </span></span><br><span class="line"><span class="comment">// tuple 内实现 copy trait</span></span><br></pre></td></tr></table></figure><p>drop trait : 用于 free 内存</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (部分)实现了 drop trait 就不能实现 copy trait</span></span><br><span class="line"><span class="comment">// String 有 drop trait</span></span><br><span class="line"><span class="comment">// tuple 中 含有 String 此时就不能实现 copy trait</span></span><br></pre></td></tr></table></figure><p>注意只要有赋值就会发生以上事情</p><p>例如</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">take_ownership</span>(s: <span class="type">String</span>) &#123; <span class="comment">// 定义一个函数</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;2024&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">take_ownership</span>(s);<span class="comment">// this parameter takes ownership of the value</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s);<span class="comment">// Error!</span></span><br></pre></td></tr></table></figure><p>当我们调用函数时，所有权就发生了转移，此时我们再去使用它时，就会发生错误</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">take_ownership</span>(s: <span class="type">String</span>) &#123; <span class="comment">// 所有权转移</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s);</span><br><span class="line">&#125;<span class="comment">// 离开作用域 s 被释放</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s);<span class="comment">// Error!</span></span><br></pre></td></tr></table></figure><p>看另一个例子</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">take_give_back</span>(s: <span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;<span class="comment">// 所有权转移</span></span><br><span class="line">    s <span class="comment">// 返回 s</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;2024&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">t</span> = <span class="title function_ invoke__">take_give_back</span>(s);<span class="comment">// 所有权给 t</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, t);</span><br></pre></td></tr></table></figure><p>这时候运行正常，因为所有权被返回后赋值给了 t，此时调用 s 会出错</p><p>我们不想失去所有权，可以返回所有权，但有点麻烦，下面介绍另外的方法</p><h2 id="References-and-Borrowing"><a href="#References-and-Borrowing" class="headerlink" title="References and Borrowing"></a>References and Borrowing</h2><p>通过引用的方式，我问不会失去所有权</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reference  not attain ownership, cannot modify</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">refe</span>(s: &amp;<span class="type">String</span>)&#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;2024&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">refe</span>(&amp;s);<span class="comment">// not drop</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s); <span class="comment">// right</span></span><br></pre></td></tr></table></figure><p>这时候 s 依然可用，但此时 s 是不可变的</p><p>我们可用通过可变<code>mut</code>引用，对数据修改，此时所有权依旧不会变化</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">mut_refe</span>(s: &amp;<span class="keyword">mut</span> <span class="type">String</span>)&#123;</span><br><span class="line">    s.<span class="title function_ invoke__">push_str</span>(<span class="string">&quot;1 28&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mut reference </span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;2024&quot;</span>); <span class="comment">// mut</span></span><br><span class="line"><span class="title function_ invoke__">mut_refe</span>(&amp;<span class="keyword">mut</span> s);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s);</span><br></pre></td></tr></table></figure><p>特性</p><p>同一区域最多含有一个可变引用</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s1</span> = &amp;<span class="keyword">mut</span> s;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">s2</span> = &amp;<span class="keyword">mut</span> s;<span class="comment">// cannot borrow `s` as mutable more than once at a time </span></span><br><span class="line"><span class="comment">// println!(&quot;&#123;&#125; &#123;&#125;&quot;, s1, s2);</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="comment">// 这样就没问题</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s2</span> = &amp;<span class="keyword">mut</span> s;  </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不能同时拥有可变引用， 不可变引用</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s1</span> = &amp;<span class="keyword">mut</span> s;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">s2</span> = &amp;s;<span class="comment">// cannot borrow `s` as immutable because it is also borrowed as mutable</span></span><br><span class="line"><span class="comment">// println!(&quot;&#123;&#125; &#123;&#125;&quot;, s1, s2);</span></span><br></pre></td></tr></table></figure><p>不可变引用可有多个</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s1</span> = &amp;s;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">s2</span> = &amp;s;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; &#123;&#125;&quot;</span>, s1, s2);</span><br></pre></td></tr></table></figure><h2 id="The-Slice-Type"><a href="#The-Slice-Type" class="headerlink" title="The Slice Type"></a>The Slice Type</h2><p>切片<code>[start..end]</code> 范围 [start, end) ，index 越界会造成错误</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;abcdefrrtyry&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">s1</span> = &amp;s[<span class="number">0</span>..<span class="number">5</span>];<span class="comment">// </span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">s2</span> = &amp;s[<span class="number">6</span>..<span class="number">10</span>];</span><br><span class="line"><span class="comment">// let s2 = &amp;s[6..20]; Error!</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; &#123;&#125;&quot;</span>, s1, s2);</span><br></pre></td></tr></table></figure><p>此时 s1, s2 是 s 的不可变引用，再对 s 进行可变引用会出错！</p><p><code>iter()</code>使用</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">item</span> = [<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;scut&quot;</span>), <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;2024&quot;</span>)];</span><br><span class="line"><span class="keyword">for</span> <span class="variable">x</span> <span class="keyword">in</span> item &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, x);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">x</span> <span class="keyword">in</span> item &#123;<span class="comment">// use of moved value: `item` Error!</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, x);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>使用 <code>iter()</code> 进行引用</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">x</span> <span class="keyword">in</span> item.<span class="title function_ invoke__">iter</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, x);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>enumerate()</code> 使用</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">item</span> = [<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;scut&quot;</span>), <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;2024&quot;</span>)];</span><br><span class="line"><span class="keyword">for</span> (i, x) <span class="keyword">in</span> item.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">enumerate</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; &#123;&#125;&quot;</span>, i, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>enumerate()</code> 返回元组 (index, x) </p><p>好像不能设置起始位置 即 i 的初始值，注意不是 index 的起始位置，python 的 enumerate 可以设置 start</p><p>以上就是 $Rust$ 的 $Ownership$</p><p>参考 <a href="https://doc.rust-lang.org/book/title-page.html#the-rust-programming-language">The Rust Programming Language</a> </p><p>更多内容参考我的 <a href="https://gitsteve1025.github.io/">Blog</a></p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
          <category> Languages </category>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Common Programming Concepts</title>
      <link href="/2024/01/30/Learning/Languages/Rust/%E2%92%88.Common%20Programming%20Concepts/"/>
      <url>/2024/01/30/Learning/Languages/Rust/%E2%92%88.Common%20Programming%20Concepts/</url>
      
        <content type="html"><![CDATA[<h1 id="Common-Programming-Concepts"><a href="#Common-Programming-Concepts" class="headerlink" title="Common Programming Concepts"></a>Common Programming Concepts</h1><h2 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="Variables-and-Mutability"><a href="#Variables-and-Mutability" class="headerlink" title="Variables and Mutability"></a>Variables and Mutability</h2><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p>$rust$ 基本变量默认不可变</p><p>使用 $let$ 关键字声明变量</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;x = &#123;x&#125;&quot;</span>);<span class="comment">// 输出 x = 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// x = 6; // Error! cannot assign twice to immutable variable</span></span><br></pre></td></tr></table></figure><p>也可以显示声明变量类型</p><p>格式 <code>data_name: type </code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span>: <span class="type">i32</span> = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;x = &#123;x&#125;&quot;</span>);<span class="comment">// 输出 x = 5</span></span><br></pre></td></tr></table></figure><p><strong>变量名小写</strong>，大写 $warning$ 警告！</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">X</span> = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, X);</span><br><span class="line"></span><br><span class="line"><span class="comment">// warning: variable `X` should have a snake case name</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">help: convert the identifier to snake case (notice the capitalization): `x`</span></span><br><span class="line"><span class="comment">  |</span></span><br><span class="line"><span class="comment">  = note: `#[warn(non_snake_case)]` on by default</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="mut"><a href="#mut" class="headerlink" title="mut"></a>mut</h3><p>使用 $mut$ 关键字表示变量可变</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">y</span> = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;y = &#123;y&#125;&quot;</span>);<span class="comment">// y = 5</span></span><br><span class="line">y = <span class="number">6</span>;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;y = &#123;y&#125;&quot;</span>);<span class="comment">// y = 6</span></span><br></pre></td></tr></table></figure><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p>使用 $const$ 关键字表明常量 $(constants)$</p><p><strong>必须显示声明常量类型</strong></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> YEAR : <span class="type">i32</span> = <span class="number">2024</span>;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;YEAR = &#123;YEAR&#125;&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>常量名一般全部大写</strong>，小写 $warning$ 警告！</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Year : <span class="type">i32</span> = <span class="number">2024</span>;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;YEAR = &#123;Year&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// constant `Year` should have an upper case name</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">help: convert the identifier to upper case: `YEAR` </span></span><br><span class="line"><span class="comment">  |</span></span><br><span class="line"><span class="comment">  = note: `#[warn(non_upper_case_globals)]` on by default</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="shadowing"><a href="#shadowing" class="headerlink" title="shadowing"></a>shadowing</h3><p>变量名与前面变量名相同，后面数据覆盖前面</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;s = &#123;s&#125;&quot;</span>);<span class="comment">// s = 5</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = s + <span class="number">1</span>;<span class="comment">// 覆盖前面的内容</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;s = &#123;s&#125;&quot;</span>);<span class="comment">// s = 6</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = s * <span class="number">2</span>;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;s = &#123;s&#125;&quot;</span>);<span class="comment">// s = 12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="string">&quot;    &quot;</span>;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;s = &#123;s&#125;&quot;</span>);<span class="comment">// s = </span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = s.<span class="title function_ invoke__">len</span>();<span class="comment">// 类型可变</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;s = &#123;s&#125;&quot;</span>);<span class="comment">// s = 4</span></span><br></pre></td></tr></table></figure><p>吐槽：感觉 $shadowing$ 会造成错误，为什么不直接报错，不小心用了相同名字，前面数据就会被覆盖，这个设计感觉没用</p><h2 id="Data-Types"><a href="#Data-Types" class="headerlink" title="Data Types"></a>Data Types</h2><h3 id="Integer-Types"><a href="#Integer-Types" class="headerlink" title="Integer Types"></a>Integer Types</h3><table><thead><tr><th align="center">Length</th><th align="center">Signed</th><th align="center">Unsigned</th></tr></thead><tbody><tr><td align="center">8-bit</td><td align="center"><code>i8</code></td><td align="center"><code>u8</code></td></tr><tr><td align="center">16-bit</td><td align="center"><code>i16</code></td><td align="center"><code>u16</code></td></tr><tr><td align="center">32-bit</td><td align="center"><code>i32</code></td><td align="center"><code>u32</code></td></tr><tr><td align="center">64-bit</td><td align="center"><code>i64</code></td><td align="center"><code>u64</code></td></tr><tr><td align="center">128-bit</td><td align="center"><code>i128</code></td><td align="center"><code>u128</code></td></tr><tr><td align="center">arch</td><td align="center"><code>isize</code></td><td align="center"><code>usize</code></td></tr></tbody></table><h4 id="Integer-Literals-in-Rust"><a href="#Integer-Literals-in-Rust" class="headerlink" title="Integer Literals in Rust"></a>Integer Literals in Rust</h4><table><thead><tr><th align="center">Number literals</th><th align="center">Example</th></tr></thead><tbody><tr><td align="center">Decimal</td><td align="center"><code>98_222</code></td></tr><tr><td align="center">Hex</td><td align="center"><code>0xff</code></td></tr><tr><td align="center">Octal</td><td align="center"><code>0o77</code></td></tr><tr><td align="center">Binary</td><td align="center"><code>0b1111_0000</code></td></tr><tr><td align="center">Byte (<code>u8</code> only)</td><td align="center"><code>b&#39;A&#39;</code></td></tr></tbody></table><p>数据 $overflow$ 会导致 $error$</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span>: <span class="type">i8</span> = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">y</span>: <span class="type">i8</span> = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">z</span>: <span class="type">i8</span> = x + y;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, z);</span><br><span class="line"></span><br><span class="line"><span class="comment">// i8 [-127, 128]</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">error: this arithmetic operation will overflow</span></span><br><span class="line"><span class="comment">attempt to compute `100_i8 + 100_i8`, which would overflow</span></span><br><span class="line"><span class="comment">  |</span></span><br><span class="line"><span class="comment">  = note: `#[deny(arithmetic_overflow)]` on by default</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="Floating-Point-Types"><a href="#Floating-Point-Types" class="headerlink" title="Floating-Point Types"></a>Floating-Point Types</h3><table><thead><tr><th align="center">Length</th><th align="center">Type</th></tr></thead><tbody><tr><td align="center">32-bit</td><td align="center"><code>f32</code></td></tr><tr><td align="center">64-bit</td><td align="center"><code>f64</code></td></tr></tbody></table><h3 id="Numeric-Operations"><a href="#Numeric-Operations" class="headerlink" title="Numeric Operations"></a>Numeric Operations</h3><p>$+ \quad \quad - \quad \quad * \quad \quad &#x2F; \quad \quad %$</p><p>$+&#x3D; \quad -&#x3D; \quad *&#x3D; \quad &#x2F;&#x3D; \quad %&#x3D;$</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// addition</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">sum</span> = <span class="number">5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// subtraction</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">difference</span> = <span class="number">95.5</span> - <span class="number">4.3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// multiplication</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">product</span> = <span class="number">4</span> * <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// division</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">quotient</span> = <span class="number">56.7</span> / <span class="number">32.2</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">truncated</span> = -<span class="number">5</span> / <span class="number">3</span>; <span class="comment">// Results in -1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// remainder</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">remainder</span> = <span class="number">43</span> % <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>应该和 $C++$ 是一样的</p><h3 id="The-Boolean-Type"><a href="#The-Boolean-Type" class="headerlink" title="The Boolean Type"></a>The Boolean Type</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">t</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">f</span>: <span class="type">bool</span> = <span class="literal">false</span>;<span class="comment">// with explicit type annotation</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;t&#125; &#123;f&#125;&quot;</span>);<span class="comment">// true false</span></span><br></pre></td></tr></table></figure><h3 id="The-Character-Type"><a href="#The-Character-Type" class="headerlink" title="The Character Type"></a>The Character Type</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">c</span> = <span class="string">&#x27;z&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">z</span>: <span class="type">char</span> = <span class="string">&#x27;ℤ&#x27;</span>; <span class="comment">// with explicit type annotation</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">heart_eyed_cat</span> = &#x27;😻&#x27;;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;c&#125; &#123;z&#125; &#123;heart_eyed_cat&#125;&quot;</span>);<span class="comment">// z Z 😻</span></span><br></pre></td></tr></table></figure><h3 id="Compound-Types"><a href="#Compound-Types" class="headerlink" title="Compound Types"></a>Compound Types</h3><h4 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h4><p>元组内数据类型可以不同</p><p>可以取出来访问，或用下标访问 <code>data_name.index</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span>: (<span class="type">i32</span>, <span class="type">f32</span>, <span class="type">bool</span>) = (<span class="number">1</span>, <span class="number">2.0</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">let</span> (a, b, c) = x;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;a&#125; &#123;b&#125; &#123;c&#125;&quot;</span>);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; &#123;&#125; &#123;&#125;&quot;</span>, x.<span class="number">0</span>, x.<span class="number">1</span>, x.<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>越界会 $Error!$</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; &#123;&#125; &#123;&#125;&quot;</span>, x.<span class="number">0</span>, x.<span class="number">1</span>, x.<span class="number">3</span>);</span><br><span class="line"><span class="comment">// error[E0609]: no field `3` on type `(i32, f32, bool)`</span></span><br></pre></td></tr></table></figure><p>直接打印元组</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;x&#125;&quot;</span>);<span class="comment">// Error</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">error[E0277]: `(i32, f32, bool)` doesn&#x27;t implement `std::fmt::Display`</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h4><p>类型必须一样</p><p>使用 <code>[]</code> 来表示</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// [type; size]</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">x</span>: [<span class="type">i32</span>; <span class="number">5</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];<span class="comment">// with explicit type annotation</span></span><br></pre></td></tr></table></figure><p>声明相同数据的数组</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [val; size] init with same val</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = [<span class="number">0</span>; <span class="number">5</span>];</span><br></pre></td></tr></table></figure><p>注意 <code>[]</code> 内是 <code>;</code></p><p>访问数组元素，使用 <code>data_name[index]</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, x[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, x[<span class="number">5</span>]);<span class="comment">// this operation will panic at runtime index out of bounds: the length is 5 but the index is 5</span></span><br></pre></td></tr></table></figure><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><p>使用关键字 $fn$ 来声明函数</p><p>不需要像 $C++$ 一样先声明后调用</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">fn_name</span>(Parameters) <span class="punctuation">-&gt;</span> <span class="keyword">type</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>-&gt; type</code> 可不写</p><p>例如</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, <span class="title function_ invoke__">test</span>(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">test</span>(n: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样也可</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">test</span>(n: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">    <span class="comment">// expression</span></span><br><span class="line">    n<span class="comment">// 注意无;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 若添加 ;</span></span><br><span class="line"><span class="comment">// expected `i32`, found `()`</span></span><br></pre></td></tr></table></figure><p>函数名小写，大写 $warning$ 警告！</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">TEST</span>(n: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">    n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//warning: function `TEST` should have a snake case name</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   help: convert the identifier to snake case: `test`</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   = note: `#[warn(non_snake_case)]` on</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="Control-Flow"><a href="#Control-Flow" class="headerlink" title="Control Flow"></a>Control Flow</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p>$if$ 后条件必须为 $bool$ 类型！！！</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">number</span> = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> number &lt; <span class="number">5</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;condition was true&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;condition was false&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> number &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;condition was true&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;condition was false&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// error[E0308]: mismatched types</span></span><br><span class="line"><span class="comment">// expected `bool`, found integer</span></span><br></pre></td></tr></table></figure><p>多条件用 $&amp;&amp;$ 或  $||$ 连接 </p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">number</span> = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="number">3</span> &lt; number &amp;&amp; number &lt; <span class="number">5</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;condition was true&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;condition was false&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$else \ if$ 使用</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">number</span> = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> number % <span class="number">4</span> == <span class="number">0</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;number is divisible by 4&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> number % <span class="number">3</span> == <span class="number">0</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;number is divisible by 3&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;number is divisible by 2&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;number is not divisible by 4, 3, or 2&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="let-if"><a href="#let-if" class="headerlink" title="let + if"></a>let + if</h4><p>$if$ 和 $else$ 后的类型<strong>必须一样</strong></p><p>有点像三目运算符复制</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">condition</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">number</span> = <span class="keyword">if</span> condition &#123; <span class="number">5</span> &#125; <span class="keyword">else</span> &#123; <span class="number">6</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;The value of number is: &#123;number&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">number</span> = <span class="keyword">if</span> condition &#123; <span class="number">5</span> &#125; <span class="keyword">else</span> &#123; <span class="string">&quot;six&quot;</span> &#125;;</span><br><span class="line"><span class="comment">// expected integer, found `&amp;str</span></span><br></pre></td></tr></table></figure><h3 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h3><p>一直循环</p><p><code>break</code> 跳出循环，<code>continue</code> 继续下一次循环</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">loop</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;again!&quot;</span>);</span><br><span class="line">&#125;<span class="comment">// 一直输出 again</span></span><br></pre></td></tr></table></figure><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>基本形式</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> condition &#123;&#125;</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> x &gt; <span class="number">0</span> &#123;</span><br><span class="line">    x -= <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;x&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>基本形式</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">x</span> <span class="keyword">in</span> item &#123;&#125;</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">x</span> <span class="keyword">in</span> [<span class="number">3</span>; <span class="number">5</span>] &#123; <span class="comment">// 产生长度为 5 的全是 3 的数组</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;x&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> (<span class="number">1</span>..<span class="number">4</span>) &#123; <span class="comment">// (l..r) 表示区间 [1, 4) 不含 4</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;i&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是 $Rust$ 的基本概念</p><p>个人感想：$Rust$ 的语法规则非常严格，但是有一些没必要的语法糖。</p><p>参考 <a href="https://doc.rust-lang.org/book/title-page.html#the-rust-programming-language">The Rust Programming Language</a> </p><p>更多内容参考我的 <a href="https://gitsteve1025.github.io/">Blog</a></p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
          <category> Languages </category>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dynamic Programming</title>
      <link href="/2024/01/28/Learning/Algorithms/Dynamic%20Programming/"/>
      <url>/2024/01/28/Learning/Algorithms/Dynamic%20Programming/</url>
      
        <content type="html"><![CDATA[<h1 id="Dynamic-Programming"><a href="#Dynamic-Programming" class="headerlink" title="$ Dynamic \  Programming $"></a>$ Dynamic \  Programming $</h1><p>$$<br>Tecy<br>$$</p><h2 id="线性-dp-引入"><a href="#线性-dp-引入" class="headerlink" title="线性 $dp$ 引入"></a>线性 $dp$ 引入</h2><h3 id="Frog-1"><a href="#Frog-1" class="headerlink" title="Frog 1"></a><a href="https://atcoder.jp/contests/dp/tasks/dp_a"><strong>Frog 1</strong></a></h3><h4 id="问题陈述"><a href="#问题陈述" class="headerlink" title="问题陈述"></a>问题陈述</h4><p>有$N$块石头，编号为$1, 2, \ldots, N$。每块$i$（$1 \leq i \leq N$），石头$i$的高度为$h_i$。</p><p>有一只青蛙，它最初在$1$号石头上。它会重复下面的动作若干次以到达石块$N$：</p><ul><li>如果青蛙目前在石块$i$上，则跳到石块$i + 1$或石块$i + 2$上。这里需要付出$|h_i - h_j|$的代价，其中$j$是要降落的石块。</li></ul><p>求青蛙到达石块$N$之前可能产生的最小总成本。</p><p>$f_{i}$ 表示到达 $i$ 所需花费 </p><p>$ f_{i} &#x3D; min(f_{i - 1} + |h_{i} - h_{i - 1}|, f_{i - 2} + |h_{i} - h_{i - 2}|)$</p><p>复杂度 $O(N)$</p><h4 id="main-code"><a href="#main-code" class="headerlink" title="main code"></a>main code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">val</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span>&amp; x : val)&#123;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">f</span><span class="params">(n)</span></span>;</span><br><span class="line">f[<span class="number">1</span>] = <span class="built_in">abs</span>(val[<span class="number">1</span>] - val[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; n; i++)&#123;</span><br><span class="line">f[i] = <span class="built_in">min</span>(f[i - <span class="number">1</span>] + <span class="built_in">abs</span>(val[i] - val[i - <span class="number">1</span>]), </span><br><span class="line">               f[i - <span class="number">2</span>] + <span class="built_in">abs</span>(val[i] - val[i - <span class="number">2</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; f.<span class="built_in">back</span>();</span><br></pre></td></tr></table></figure><div style="page-break-after: always;"></div><h3 id="Frog-2"><a href="#Frog-2" class="headerlink" title="Frog 2 "></a><a href="https://atcoder.jp/contests/dp/tasks/dp_b"><strong>Frog 2</strong> </a></h3><h4 id="问题陈述-1"><a href="#问题陈述-1" class="headerlink" title="问题陈述"></a>问题陈述</h4><p>有$N$块石头，编号为$1, 2, \ldots, N$。每块$i$（$1 \leq i \leq N$），石头$i$的高度为$h_i$。</p><p>有一只青蛙，它最初在石块 $1$ 上。它会重复下面的动作若干次以到达石块$N$：</p><ul><li>如果青蛙目前在石块$i$上，请跳到以下其中一个位置：石块$i + 1, i + 2, \ldots, i + K$。这里会产生$|h_i - h_j|$的代价，其中$j$是要降落的石头。</li></ul><p>求青蛙到达石块$N$之前可能产生的最小总成本。</p><p>$f_{i}$ 表示到达 $i$ 所需花费 </p><p>$ f_{i} &#x3D; min(f_{i - j} + |h_{i} - h_{i - j}|) \quad if \quad j \le k $ </p><p>复杂度 $O(K \times N)$</p><h4 id="main-code-1"><a href="#main-code-1" class="headerlink" title="main code"></a>main code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">val</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span>&amp; x : val)&#123;</span><br><span class="line">    cin &gt;&gt; x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">f</span><span class="params">(n, inf)</span></span>;</span><br><span class="line">f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= k; j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i - j &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            f[i] = <span class="built_in">min</span>(f[i], f[i - j] + <span class="built_in">abs</span>(val[i] - val[i - j]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; f.<span class="built_in">back</span>();</span><br></pre></td></tr></table></figure><div style="page-break-after: always;"></div><h2 id="经典-dp"><a href="#经典-dp" class="headerlink" title="经典 $dp$"></a>经典 $dp$</h2><h3 id="LCS"><a href="#LCS" class="headerlink" title="LCS"></a><a href="https://atcoder.jp/contests/dp/tasks/dp_f">LCS</a></h3><h4 id="问题陈述-2"><a href="#问题陈述-2" class="headerlink" title="问题陈述"></a>问题陈述</h4><p>给你字符串 $s$ 和 $t$。请找出一个最长的字符串，它同时是 $s$ 和 $t$ 的子串。</p><p>$f_{i, j}$ 表示考虑 $s$ 前 $i$ 个， $t$ 前 $j$ 个最长子串<br>$$<br>f_{i, j} &#x3D;<br>\begin{cases}<br>    f_{i - 1, j - 1} + 1 \quad \quad \quad \ \ \ if \quad s[i] &#x3D; t[j] \<br>    max(f_{i, j - 1}, f_{i - 1, j}) \quad if \quad s[i] \neq t[j]<br>\end{cases}<br>$$<br>求出长度后，反向可推出最长公共子串（不唯一）<br>$$<br>if \quad s[i] &#x3D;&#x3D; t[j] \rightarrow s[i]<br>$$</p><p>复杂度 $O(|s| \times |t|)$</p><h4 id="main-code-2"><a href="#main-code-2" class="headerlink" title="main code"></a>main code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">string s, t;</span><br><span class="line">cin &gt;&gt; s &gt;&gt; t;</span><br><span class="line">s = <span class="string">&quot; &quot;</span> + s;</span><br><span class="line">t = <span class="string">&quot; &quot;</span> + t;    </span><br><span class="line"><span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line"><span class="type">int</span> m = t.<span class="built_in">size</span>();</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">f</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; m; j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == t[j])&#123;</span><br><span class="line">            f[i][j] = f[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            f[i][j] = <span class="built_in">max</span>(f[i - <span class="number">1</span>][j], f[i][j - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> sp = n - <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> tp = m - <span class="number">1</span>;</span><br><span class="line">string ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">while</span>(sp &gt;= <span class="number">1</span> &amp;&amp; tp &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(s[sp] == t[tp])&#123; <span class="comment">//</span></span><br><span class="line">        ans += s[sp];</span><br><span class="line">        sp--;</span><br><span class="line">        tp--;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(f[sp][tp] == f[sp - <span class="number">1</span>][tp])&#123;</span><br><span class="line">            sp--;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            tp--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">cout &lt;&lt; ans;</span><br></pre></td></tr></table></figure><p>不能用 $f_{i, j} &#x3D; f_{i - 1, j - 1} + 1 \quad \rightarrow \quad s[i]$ </p><p>因为当 $f_{i, j} &#x3D; f_{i - 1, j}$ 且 $f_{i - 1, j} &#x3D; f_{i - 2, j} + 1$ 且 $f_{i, j} &#x3D; f_{i - 1, j - 1} + 1$ 时会错</p><div style="page-break-after: always;"></div><h3 id="LIS"><a href="#LIS" class="headerlink" title="LIS"></a><a href="https://www.luogu.com.cn/problem/AT_chokudai_S001_h">LIS</a></h3><h4 id="问题陈述。"><a href="#问题陈述。" class="headerlink" title="问题陈述。"></a>问题陈述。</h4><p>方法一：</p><p>数列 $ a_{i} $ ，求最长不下降子序列。<br>$$<br>f_{i} &#x3D; max(f_{j} + 1) \quad if \quad a_{i} \ge a_{j} \quad and \quad i \ge j<br>$$<br>复杂度 $O(N^{2})$</p><h4 id="方法一-main-code"><a href="#方法一-main-code" class="headerlink" title="方法一 main code"></a>方法一 main code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> inf = <span class="number">1e18</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">val</span><span class="params">(n + <span class="number">1</span>, -inf)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    cin &gt;&gt; val[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">f</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(val[i] &gt;= val[j])&#123;</span><br><span class="line">            f[i] = <span class="built_in">max</span>(f[i], f[j] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; *<span class="built_in">max_element</span>(f.<span class="built_in">begin</span>(), f.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure><div style="page-break-after: always;"></div><p>方法二：</p><p>考虑进来一个元素 $a_{i}$ ：</p><ol><li>$d \ is \ empty$ 或元素大于等于 $d.back()$ ，直接将该元素插入到 $d$ 序列的末尾。</li><li>元素小于 $d.back()$ ，找到 <strong>第一个</strong> 大于等于它的元素，用 $a_{i}$ 替换它。</li></ol><p>复杂度 $O(N log N)$</p><h4 id="方法二-main-code"><a href="#方法二-main-code" class="headerlink" title="方法二 main code"></a>方法二 main code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">val</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span>&amp; x : val)&#123;</span><br><span class="line">    cin &gt;&gt; x;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; d;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span>&amp; x : val)&#123;</span><br><span class="line">    <span class="keyword">if</span>(d.<span class="built_in">empty</span>() || d.<span class="built_in">back</span>() &lt;= x)&#123;</span><br><span class="line">        d.<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> p = <span class="built_in">lower_bound</span>(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>(), x) - d.<span class="built_in">begin</span>();</span><br><span class="line">        d[p] = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; d.<span class="built_in">size</span>();Q</span><br></pre></td></tr></table></figure><div style="page-break-after: always;"></div><h3 id="拓展-LCIS"><a href="#拓展-LCIS" class="headerlink" title="拓展 LCIS"></a>拓展 <a href="https://www.luogu.com.cn/problem/CF10D">LCIS</a></h3><p>求两个串的最长公共上升子序列</p><p>结合以上就可解决本题。</p><p>$f_{i, j}$ 表示 $s[1 - i], t[1 - j]$ 以 $t[j]$ 结尾 $LCIS$ 的长度<br>$$<br>f_{i, j} &#x3D; f_{i - 1, j} \quad if \quad s[i] \neq t[j]<br>$$</p><p>$$<br>f_{i, j} &#x3D; max(f_{i - 1, k} + 1) \quad if \quad s[i] &#x3D; t[j] \quad and \quad s[i] &gt; t[k] \quad and \quad j &gt; k<br>$$<br>复杂度 $O(N^{3})$</p><h4 id="main-code-3"><a href="#main-code-3" class="headerlink" title="main code"></a>main code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">s</span><span class="params">(n + <span class="number">1</span>, <span class="number">-1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    cin &gt;&gt; s[i];</span><br><span class="line">&#125; </span><br><span class="line"><span class="type">int</span> m;</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">t</span><span class="params">(m + <span class="number">1</span>, <span class="number">-1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">    cin &gt;&gt; t[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">f</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m + <span class="number">1</span>));</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">p</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m + <span class="number">1</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == t[j])&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; j; k++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i] &gt; t[k])&#123;</span><br><span class="line">                    <span class="keyword">if</span>(f[i - <span class="number">1</span>][k] + <span class="number">1</span> &gt; f[i][j])&#123;<span class="comment">// 记录转移路径</span></span><br><span class="line">                        p[i][j] = k;</span><br><span class="line">                    &#125;</span><br><span class="line">                    f[i][j] = <span class="built_in">max</span>(f[i][j], f[i - <span class="number">1</span>][k] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p[i][j] = p[i - <span class="number">1</span>][j];             </span><br><span class="line">            f[i][j] = f[i - <span class="number">1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> tp = m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(ans &lt; f[n][i])&#123;</span><br><span class="line">        ans = f[n][i];</span><br><span class="line">        tp = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line"><span class="keyword">while</span>(ans &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    res.<span class="built_in">push_back</span>(t[tp]);</span><br><span class="line">    tp = p[n][tp]; </span><br><span class="line">    ans--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">reverse</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">cout &lt;&lt; res.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span>&amp; x : res)&#123;</span><br><span class="line">    cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div style="page-break-after: always;"></div><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p>该题还可优化为 $O(N^{2})$</p><p>可以看到枚举 $k$ 时 $s[i] &#x3D; t[j]$ 这个条件不用检查，只用检查 $s[i] \ge t[k]$，枚举时决策取最大即可</p><p>$prefix_max_{i, j}$  表示 $f[1 - i][1 - j]$ 的最大值<br>$$<br>f_{i, j} &#x3D; f_{i - 1, j} \quad if \quad s[i] \neq t[j]<br>$$</p><p>$$<br>f_{i, j} &#x3D; prefix_max_{i - 1, j - 1} + 1 \quad if \quad s[i] &#x3D; t[j]<br>$$</p><p>$$<br>prefix_max_{i - 1, j} &#x3D; max(prefix_max_{i - 1, j - 1}, f_{i - 1, j}) \quad if \quad s[i] &gt; t[j]<br>$$</p><h4 id="main-code-4"><a href="#main-code-4" class="headerlink" title="main code"></a>main code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">s</span><span class="params">(n + <span class="number">1</span>, <span class="number">-1</span>)</span></span>;<span class="comment">// #</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    cin &gt;&gt; s[i];</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> m;</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">t</span><span class="params">(m + <span class="number">1</span>, <span class="number">-1</span>)</span></span>;<span class="comment">// #</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">    cin &gt;&gt; t[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">f</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m + <span class="number">1</span>));</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">p</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m + <span class="number">1</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    <span class="type">int</span> to = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> prefix_max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == t[j])&#123;</span><br><span class="line">            <span class="keyword">if</span>(prefix_max + <span class="number">1</span> &gt; f[i][j])&#123;<span class="comment">// 记录转移路径</span></span><br><span class="line">                p[i][j] = to;</span><br><span class="line">            &#125;</span><br><span class="line">            f[i][j] = <span class="built_in">max</span>(f[i][j], prefix_max + <span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            p[i][j] = p[i - <span class="number">1</span>][j];</span><br><span class="line">            f[i][j] = f[i - <span class="number">1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(s[i] &gt; t[j])&#123;</span><br><span class="line">            <span class="keyword">if</span>(prefix_max &lt; f[i - <span class="number">1</span>][j])&#123;</span><br><span class="line">                to = j;</span><br><span class="line">            &#125;</span><br><span class="line">            prefix_max = <span class="built_in">max</span>(prefix_max, f[i - <span class="number">1</span>][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tp = m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(ans &lt; f[n][i])&#123;</span><br><span class="line">        ans = f[n][i];</span><br><span class="line">        tp = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line"><span class="keyword">while</span>(ans &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    res.<span class="built_in">push_back</span>(t[tp]);</span><br><span class="line">    tp = p[n][tp]; </span><br><span class="line">    ans--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">reverse</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; res.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span>&amp; x : res)&#123;</span><br><span class="line">    cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div style="page-break-after: always;"></div><h2 id="背包"><a href="#背包" class="headerlink" title="背包"></a>背包</h2><h3 id="0-1背包"><a href="#0-1背包" class="headerlink" title="0-1背包"></a><a href="https://www.luogu.com.cn/problem/P2871">0-1背包</a></h3><p>题意概要：有 $n$ 个物品和一个容量为 $v$ 的背包，每个物品有重量 $cost_{i}$ 和价值 $value_{i}$ 两种属性，要求选若干物品放入背包使背包中物品的<strong>总价值最大</strong>且背包中物品的总重量不超过背包的容量。(每个物品最多选一次)</p><p>$f_{i, j}$ 表示考虑前 $i$ 个物品，当前容量为 $j$ 是最优解<br>$$<br>f_{i, j} &#x3D; max(f_{i - 1, j - cost_{i}} + value_{i}) \quad if \quad j \ge cost_{i}<br>$$<br>$$<br>f_{i, j} &#x3D; f_{i - 1, j} \quad if \quad j &lt; cost_{i}<br>$$</p><p>为什么要先枚举 $i$ ，后枚举 $j$ ？</p><p>物品被选多次。</p><h4 id="main-code-5"><a href="#main-code-5" class="headerlink" title="main code"></a>main code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cost</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">value</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    cin &gt;&gt; cost[i] &gt;&gt; value[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">f</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m + <span class="number">1</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j &gt;= cost[i])&#123;</span><br><span class="line">            f[i][j] = <span class="built_in">max</span>(f[i - <span class="number">1</span>][j], f[i - <span class="number">1</span>][j - cost[i]] + value[i]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            f[i][j] = f[i - <span class="number">1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; f[n][m];</span><br></pre></td></tr></table></figure><div style="page-break-after: always;"></div><p><strong>一维优化空间</strong> $f_{j} &#x3D; max(f_{j - cost_{i}})$ </p><p>复杂度 $O(n \times v)$</p><p>要倒序枚举 $j$ !!!</p><p>$f_{i,j}$ 会被 $f_{i, j - cost_{i}}$ 影响，相当于物品被选多次。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cost</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">value</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    cin &gt;&gt; cost[i] &gt;&gt; value[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">f</span><span class="params">(m + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = m; j &gt;= cost[i]; j--)&#123;</span><br><span class="line">        f[j] = <span class="built_in">max</span>(f[j], f[j - cost[i]] + value[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; f[m];</span><br></pre></td></tr></table></figure><div style="page-break-after: always;"></div><h3 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a><a href="https://www.luogu.com.cn/problem/P1616">完全背包</a></h3><p>题意概要：有 $n$ 个物品和一个容量为 $v$ 的背包，每个物品有重量 $cost_{i}$ 和价值 $value_{i}$ 两种属性，要求选若干物品放入背包使背包中物品的<strong>总价值最大</strong>且背包中物品的总重量不超过背包的容量。(每个物品可选无限次)</p><p>先考虑朴素解：<br>$$<br>f_{i, j} &#x3D; max(f_{i - 1, j - k \times cost_{i}} + k \times value_{i})<br>$$<br>复杂度可能达到 $O(n^{2} \times v)$ </p><p>简单优化</p><p>可以发现，对于 $f_{i, j}$ ，只要通过 $f_{i, j - cost_{i}}$ 转移就可以了。因为状态转移方程为：<br>$$<br>f_{i, j - cost_{i}} &#x3D; max(f_{i - 1, j - (k + 1) \times cost_{i}} + (k + 1) \times value_{i})<br>$$<br>对比上面转移方程只多了一个，我们通过局部最优子结构的性质重复使用了之前的枚举过程，优化了枚举的复杂度。<br>$$<br>f_{i, j} &#x3D; max(f_{i - 1, j}, f_{i, j - cost_{i}} + value_{i})<br>$$</p><p>复杂度 $O(n \times v)$ </p><h4 id="main-code-6"><a href="#main-code-6" class="headerlink" title="main code"></a>main code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> m, n;</span><br><span class="line">cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cost</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">value</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    cin &gt;&gt; cost[i] &gt;&gt; value[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">f</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m + <span class="number">1</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j &gt;= cost[i])&#123;</span><br><span class="line">            f[i][j] = <span class="built_in">max</span>(f[i - <span class="number">1</span>][j], f[i][j - cost[i]] + value[i]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            f[i][j] = f[i - <span class="number">1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; f[n][m];</span><br></pre></td></tr></table></figure><div style="page-break-after: always;"></div><p><strong>一维优化空间</strong> $f_{j} &#x3D; max(f_{j - cost_{i}})$ </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> m, n;</span><br><span class="line">cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">cost</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">value</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    cin &gt;&gt; cost[i] &gt;&gt; value[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">f</span><span class="params">(m + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = cost[i]; j &lt;= m; j++)&#123;</span><br><span class="line">        f[j] = <span class="built_in">max</span>(f[j], f[j - cost[i]] + value[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; f[m];</span><br></pre></td></tr></table></figure><p>发现与0-1背包方程一样， 这时候要正序枚举 $j$</p><div style="page-break-after: always;"></div><h3 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a><a href="https://www.luogu.com.cn/problem/P1776">多重背包</a></h3><p>题意概要：有 $n$ 个物品和一个容量为 $v$ 的背包，每个物品有重量 $cost_{i}$ 和价值 $value_{i}$ 两种属性，要求选若干物品放入背包使背包中物品的<strong>总价值最大</strong>且背包中物品的总重量不超过背包的容量。(每个物品可选 $k_{i}$ )<br>$$<br>f_{i, j} &#x3D; max(f_{i - 1, j - k \times cost_{i}} + k \times value_{i}) \quad if \quad k \le k_{i}<br>$$</p><h4 id="二进制优化"><a href="#二进制优化" class="headerlink" title="二进制优化"></a>二进制优化</h4><p>将 $k_{i}$ 拆成 $1, 2, 4, …, 2^{p}, x$ （ $x$ 为剩下补足，范围 $0 \le x &lt; 2^{p + 1}$ ），这样每个物品最多产生 $log_{2}(k_{i})$ 个物品</p><p>然后当成0-1背包即可</p><h5 id="main-code-7"><a href="#main-code-7" class="headerlink" title="main code"></a>main code</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">v</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">c</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">k</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    cin &gt;&gt; v[i] &gt;&gt; c[i] &gt;&gt; k[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; cost, value;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; k[i]; k[i] -= j, j *= <span class="number">2</span>)&#123;</span><br><span class="line">        cost.<span class="built_in">push_back</span>(c[i] * j);</span><br><span class="line">        value.<span class="built_in">push_back</span>(v[i] * j);</span><br><span class="line">    &#125;</span><br><span class="line">    cost.<span class="built_in">push_back</span>(c[i] * k[i]);<span class="comment">// 补足</span></span><br><span class="line">    value.<span class="built_in">push_back</span>(v[i] * k[i]);<span class="comment">// 补足</span></span><br><span class="line">&#125;</span><br><span class="line">n = cost.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">f</span><span class="params">(m + <span class="number">1</span>)</span></span>;<span class="comment">// 0-1 背包</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = m; j &gt;= cost[i]; j--)&#123;</span><br><span class="line">        f[j] = <span class="built_in">max</span>(f[j], f[j - cost[i]] + value[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; f[m];</span><br></pre></td></tr></table></figure><p>复杂度 $O(v \times \sum\limits_{i &#x3D; 1}^{n} log_{2}(k_{i}))$</p><div style="page-break-after: always;"></div><h4 id="单调队列优化"><a href="#单调队列优化" class="headerlink" title="单调队列优化"></a>单调队列优化</h4><p>$$<br>f_{i, j} &#x3D; max(f_{i - 1, j - k \times cost_{i}} + k \times value_{i})<br>$$</p><p>设 $g_{i, x, y} &#x3D; f_{i, x \times cost_{i} + y}$<br>$$<br>g_{i, x, y} &#x3D; max(g_{i - 1, x - k, y} + k \times value_{i}) \quad if \quad k \le k_{i}<br>$$<br>设 $G_{i, x, y} &#x3D; g_{i, x, y} - x \times cost_{i}$<br>$$<br>g_{i, x, y} &#x3D; max(G_{i - 1, x - k, y}) + x \times cost_{i}<br>$$<br>可以看出 $g_{i, x, y}$ 由窗口 $[i - k, i - 1]$ 转移，滑动窗口问题求 $max$ 可用单调队列求取</p><h5 id="main-code-8"><a href="#main-code-8" class="headerlink" title="main code"></a>main code</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">value</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">cost</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">k</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    cin &gt;&gt; value[i] &gt;&gt; cost[i] &gt;&gt; k[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">f</span><span class="params">(m + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    <span class="keyword">auto</span> g = f;<span class="comment">// g 表示上一次状态</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> y = <span class="number">0</span>; y &lt; cost[i]; y++)&#123;</span><br><span class="line">        deque&lt;<span class="type">long</span> <span class="type">long</span>&gt; q;<span class="comment">// 队列</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x = y; x &lt;= m; x += cost[i])&#123;</span><br><span class="line">            <span class="keyword">while</span>(!q.<span class="built_in">empty</span>() &amp;&amp; q.<span class="built_in">front</span>() &lt; x - k[i] * cost[i])&#123;</span><br><span class="line">                q.<span class="built_in">pop_front</span>();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                f[x] = <span class="built_in">max</span>(f[x], g[q.<span class="built_in">front</span>()] + (x - q.<span class="built_in">front</span>()) / cost[i] * value[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(!q.<span class="built_in">empty</span>() &amp;&amp; g[q.<span class="built_in">back</span>()] - (q.<span class="built_in">back</span>() - y) / cost[i] * value[i] &lt;= g[x] - (x - y) / cost[i] * value[i])&#123;</span><br><span class="line">                q.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            q.<span class="built_in">push_back</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; f[m];</span><br></pre></td></tr></table></figure><p>复杂度 $O(n \times v)$ </p><div style="page-break-after: always;"></div><h2 id="区间-dp"><a href="#区间-dp" class="headerlink" title="区间 $dp$"></a><a href="https://www.luogu.com.cn/problem/P1775">区间 $dp$</a></h2><p>一般形式<br>$$<br>f_{l, r} &#x3D; max(f_{l, k} + f_{k + 1, r} + cost)<br>$$</p><p>$n$ 堆石子，$a_1, a_2,…,a_n$ 每次合并相邻两堆，代价是两堆石子之和，求变为一堆的最小代价</p><h3 id="main-code-9"><a href="#main-code-9" class="headerlink" title="main code"></a>main code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">val</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">sum</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    cin &gt;&gt; val[i];</span><br><span class="line">    sum[i] = sum[i - <span class="number">1</span>] + val[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">f</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n + <span class="number">1</span>, inf));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    f[i][i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> len = <span class="number">1</span>; len &lt;= n; len++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> l = <span class="number">1</span>; l + len &lt;= n; l++)&#123;</span><br><span class="line">        <span class="type">int</span> r = l + len;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k = l; k &lt; r; k++)&#123;</span><br><span class="line">            f[l][r] = <span class="built_in">min</span>(f[l][r], f[l][k] + f[k + <span class="number">1</span>][r] + sum[r] - sum[l - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; f[<span class="number">1</span>][n];</span><br></pre></td></tr></table></figure><div style="page-break-after: always;"></div><h2 id="树形-dp"><a href="#树形-dp" class="headerlink" title="树形 $dp$"></a><a href="https://www.luogu.com.cn/problem/P1352">树形 $dp$</a></h2><p>$$<br>f_{u} &#x3D; (f_v + …)<br>$$<br>即在父节点时考虑子节点</p><p>某大学有 $n$ 个职员，编号为 $1\ldots n$。</p><p>他们之间有从属关系，他们的关系就像一棵以校长为根的树，父结点就是子结点的直接上司。</p><p>现在有个周年庆宴会，宴会每邀请来一个职员都会增加一定的快乐指数 $r_i$，但是呢，如果某个职员的直接上司来参加舞会了，那么这个职员就无论如何也不肯来参加舞会了。求最大的快乐指数。</p><p>$f_u$ 表示包含 $u$ 的结果</p><p>$g_u$ 表示不包含 $u$ 的结果</p><h3 id="main-code-10"><a href="#main-code-10" class="headerlink" title="main code"></a>main code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">val</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    cin &gt;&gt; val[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> root = <span class="number">0</span>;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">relation</span>(n + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">    <span class="type">int</span> v, u;</span><br><span class="line">    cin &gt;&gt; v &gt;&gt; u;</span><br><span class="line">    relation[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">    root ^= i ^ v;</span><br><span class="line">&#125;</span><br><span class="line">root ^= n;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">f</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">g</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">auto</span> dp = [&amp;](<span class="keyword">auto</span> self, <span class="type">int</span> u) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">    f[u] = val[u];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span>&amp; v : relation[u])&#123;</span><br><span class="line">        <span class="built_in">self</span>(self, v);</span><br><span class="line">        f[u] += g[v];</span><br><span class="line">        g[u] += <span class="built_in">max</span>(f[v], g[v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">dp</span>(dp, root);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">max</span>(f[root], g[root]);</span><br></pre></td></tr></table></figure><div style="page-break-after: always;"></div><h2 id="数位-dp"><a href="#数位-dp" class="headerlink" title="数位 $dp$"></a><a href="https://www.luogu.com.cn/problem/P2657">数位 $dp$</a></h2><p>数位是指把一个数字按照个、十、百、千等等一位一位地拆开，关注它每一位上的数字。如果拆的是十进制数，那么每一位数字都是 0~9，其他进制可类比十进制。</p><p>数位 DP：用来解决一类特定问题，这种问题比较好辨认，一般具有这几个特征：</p><ol><li>要求统计满足一定条件的数的数量（即，最终目的为计数）；</li><li>这些条件经过转化后可以使用「数位」的思想去理解和判断；</li><li>输入会提供一个数字区间（有时也只提供上界）来作为统计的限制；</li><li>上界很大（比如 $10^{18}$ )，暴力枚举验证会超时。</li></ol><p>数位 $dp$ 经常与记忆化搜索一同出现</p><p>求区间计数一般转化为前缀 即求 $[l, r]$ 变为 $[0, r] - [0, l - 1]$</p><p>不含前导零且相邻两个数字之差至少为 $2$ 的正整数被称为 $windy$ 数。$windy$ 想知道，在 $l$ 和 $r$ 之间，包括 $l$ 和 $r$ ，总共有多少个 $windy$ 数？</p><p>$f_{i, j}$ 表示当前是第 $i$ 位，该位为 $j$ ，$windy$ 数的个数<br>$$<br>f_{i, j} &#x3D; \sum\limits_{k &#x3D; 0}^{9} f_{i - 1, k} \quad if \quad abs(j - k) \ge 2<br>$$</p><h3 id="main-code-11"><a href="#main-code-11" class="headerlink" title="main code"></a>main code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span>;<span class="comment">// 0 - 9 进制位</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">12</span>;<span class="comment">// 数位 </span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> f[M][N] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">    f[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; M; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; N; k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(j - k) &gt;= <span class="number">2</span>)&#123;</span><br><span class="line">                f[i][j] += f[i - <span class="number">1</span>][k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> get = [&amp;](<span class="type">long</span> <span class="type">long</span> x) -&gt; <span class="type">long</span> <span class="type">long</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; digit;</span><br><span class="line">    <span class="keyword">while</span>(x != <span class="number">0</span>)&#123;</span><br><span class="line">        digit.<span class="built_in">push_back</span>(x % <span class="number">10</span>);</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算位数 = x 位数 的答案</span></span><br><span class="line">    <span class="type">int</span> last = <span class="number">-2</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = digit.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = (i == digit.<span class="built_in">size</span>() - <span class="number">1</span>); j &lt; digit[i]; j++)&#123;<span class="comment">// 最高位从一开始</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(j - last) &gt;= <span class="number">2</span>)&#123;</span><br><span class="line">                ans += f[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(last - digit[i]) &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        last = digit[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;<span class="comment">//本身</span></span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算位数 &lt; x 位数 的答案</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; digit.<span class="built_in">size</span>() - <span class="number">1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">9</span>; j++)&#123;</span><br><span class="line">            ans += f[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> l, r;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">cout &lt;&lt; <span class="built_in">get</span>(r) - <span class="built_in">get</span>(l - <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>复杂度 $O(M \times N^{2})$</p><div style="page-break-after: always;"></div><h2 id="状压-dp"><a href="#状压-dp" class="headerlink" title="状压 $dp$"></a><a href="https://www.luogu.com.cn/problem/P1896">状压 $dp$</a></h2><p>用二进制位来表示状态</p><p>需要用到位运算知识</p><p>在 $N \times N$ 的棋盘里面放 $K$ 个国王，使他们互不攻击，共有多少种摆放方案。国王能攻击到它上下左右，以及左上左下右上右下八个方向上附近的各一个格子，共 $8$ 个格子。</p><h3 id="main-code-12"><a href="#main-code-12" class="headerlink" title="main code"></a>main code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n, k;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> get = [&amp;](<span class="type">int</span> x) -&gt; <span class="type">int</span> &#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>((x &gt;&gt; i) &amp; <span class="number">1</span>)&#123;</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; bits, cnts;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); i++)&#123; <span class="comment">// 预处理每行可行状态</span></span><br><span class="line">    <span class="keyword">if</span>(((i &gt;&gt; <span class="number">1</span>) &amp; i) == <span class="number">0</span>)&#123; <span class="comment">// 相邻位</span></span><br><span class="line">        bits.<span class="built_in">push_back</span>(i);</span><br><span class="line">        cnts.<span class="built_in">push_back</span>(<span class="built_in">get</span>(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> check = [&amp;](<span class="type">int</span> j, <span class="type">int</span> p) -&gt; <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(j &amp; p)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((j &gt;&gt; <span class="number">1</span>) &amp; p)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(j &amp; (p &gt;&gt; <span class="number">1</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&gt;&gt; <span class="built_in">f</span>(n + <span class="number">2</span>, vector&lt;vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&gt;(<span class="number">1</span> &lt;&lt; n, <span class="built_in">vector</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(k + <span class="number">1</span>)));</span><br><span class="line">f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; bits.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> p = <span class="number">0</span>; p &lt; bits.<span class="built_in">size</span>(); p++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> c = <span class="number">0</span>; c &lt;= k; c++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">check</span>(bits[j], bits[p]) &amp;&amp; c + cnts[j] &lt;= k)&#123;</span><br><span class="line">                    f[i][bits[j]][c + cnts[j]] += f[i - <span class="number">1</span>][bits[p]][c];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;                </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; f[n + <span class="number">1</span>][<span class="number">0</span>][k];</span><br></pre></td></tr></table></figure><div style="page-break-after: always;"></div><h2 id="dp-优化"><a href="#dp-优化" class="headerlink" title="$dp$ 优化"></a>$dp$ 优化</h2><h3 id="数据结构优化"><a href="#数据结构优化" class="headerlink" title="数据结构优化"></a>数据结构优化</h3><h4 id="单调栈优化"><a href="#单调栈优化" class="headerlink" title="单调栈优化"></a><a href="https://codeforces.com/contest/1913/problem/D">单调栈优化</a></h4><p>当 $dp$ 需要前一个 $or$ 后一个， 大于（等于） $or$ 小于（等于）它数列的状态时，可以考虑单调栈</p><p>给你一个数组 $[p_1, p_2, \dots, p_n]$ ，其中所有元素都是不同的。</p><p>你可以对它进行几个（可能是零）操作。在一个操作中，你可以选择 $p$ 的一个<strong>连续的子段</strong>，并从该子段中删除<strong>所有</strong>元素，<strong>除</strong>该子段中最小的元素。例如，如果是 $p &#x3D; [3, 1, 4, 7, 5, 2, 6]$ ，你选择了从 $3$ -rd元素到 $6$ -th元素的子段，那么得到的数组就是 $[3, 1, 2, 6]$ 。</p><p>如果数组 $a$ 可以通过上述几种（也许是零种）操作从 $p$ 中得到，那么这个数组 $a$ 就叫做可达数组。计算可达数组的个数，并打印出它的模数 $998244353$ 。</p><p>$f_i$ 表示考虑前 $i$ 个数，不以第 $i$ 项结尾的个数</p><p>$g_i$ 表示考虑前 $i$ 个数，并以第 $i$ 项结尾的个数</p><p>考虑 $f_{i}$ 的转移， 因为不以第 $i$ 项结尾，前面必有比他小的数来删除它<br>$$<br>f_{i} &#x3D; \sum\limits_{j &#x3D; 0 \vee p_i &gt; p_j }^{i - 1} g_{j}<br>$$<br>考虑前一个小于它的数， 记为 $p_{l[i]}$</p><p>对于 $p_j &lt; p_{l[i]} &lt; p_i$ 的 $g_j$ ， $p_{l[i]}$ 被 $p_{j}$ 删除，此时即 $f_{l[i]}$， 根据公式 $f_{l[i]} &#x3D; \sum\limits_{j &#x3D; 0 \vee p_{l[i]} &gt; p_j }^{l[i] - 1} g_{j}$，而区间 $[l[i], i - 1]$ 没有小于 $p_i$ 的数，贡献为 $0$</p><p>对于 $p_i &gt; p_j &gt; p_{l[i]}$ 的 $g_j$ ， $p_{l[i]}$ 未被 $p_{j}$ 删除，此时即 $g_{l[i]}$，会以 $p_{l[i]}$ 结尾<br>$$<br>\sum\limits_{j &#x3D; 0 \vee p_i &gt; p_j }^{i - 1} g_{j} &#x3D; f_{l[i]} + g_{l[i]}<br>$$</p><p>考虑 $g_i$ 的转移，以第 $i$ 项结尾，那它可以删除大于它的项，保留第一个小于它的项<br>$$<br>g_{i} &#x3D; \sum\limits_{j &#x3D; l[i]}^{i - 1} g_{j} + f_{l[i]}<br>$$<br>该式 $\sum\limits_{j &#x3D; l[i]}^{i - 1} g_{j}$ 可用前缀和计算</p><h5 id="main-code-13"><a href="#main-code-13" class="headerlink" title="main code"></a>main code</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">val</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    cin &gt;&gt; val[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">l</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; stk = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    <span class="keyword">while</span>(!stk.<span class="built_in">empty</span>() &amp;&amp; val[i] &lt; val[stk.<span class="built_in">back</span>()])&#123;</span><br><span class="line">        stk.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    l[i] = stk.<span class="built_in">back</span>();</span><br><span class="line">    stk.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">f</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">g</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">sum</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">g[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">sum[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(l[i])&#123;</span><br><span class="line">        f[i] = (f[l[i]] + g[l[i]]) % mod;</span><br><span class="line">        g[i] = (f[l[i]] + sum[i - <span class="number">1</span>] - sum[l[i] - <span class="number">1</span>]) % mod;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        g[i] = (f[l[i]] + sum[i - <span class="number">1</span>]) % mod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sum[i] = (sum[i - <span class="number">1</span>] + g[i]) % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ((f[n] + g[n]) % mod + mod) % mod &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure><div style="page-break-after: always;"></div><h4 id="单调队列优化-1"><a href="#单调队列优化-1" class="headerlink" title="单调队列优化"></a><a href="https://loj.ac/p/10180">单调队列优化</a></h4><p>有 $n$ 座烽火台，每个烽火台发出信号都有代价。在连续 $m$ 个烽火台中至少要有一个发出信号。计算最少的代价。</p><p>$f_{i}$ 表示考虑前 $i$ 个，并且在 $i$ 设立的最小代价</p><p>根据题意<br>$$<br>f_{i} &#x3D; min(f_{j} + cost_{i}) \quad if \quad i - j \le m<br>$$<br>即一个大小为 $m$ 的滑动窗口， 求最值，用队列维护</p><p>设队头为最优值</p><p>当窗口离开它时，队头出列</p><p>当新值优于队尾时，队尾出列</p><p>加入新值</p><h5 id="main-code-14"><a href="#main-code-14" class="headerlink" title="main code"></a>main code</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cost</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    cin &gt;&gt; cost[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans = inf;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt; q = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">f</span><span class="params">(n + <span class="number">1</span>, inf)</span></span>;</span><br><span class="line">f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>() &amp;&amp; i - q.<span class="built_in">front</span>() &gt; m)&#123;</span><br><span class="line">        q.<span class="built_in">pop_front</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    f[i] = <span class="built_in">min</span>(f[i], f[q.<span class="built_in">front</span>()] + cost[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>() &amp;&amp; f[i] &lt;= f[q.<span class="built_in">back</span>()])&#123;</span><br><span class="line">        q.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    q.<span class="built_in">push_back</span>(i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(n - i &lt; m)&#123;</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, f[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans;</span><br></pre></td></tr></table></figure><div style="page-break-after: always;"></div><h4 id="线段树-树状数组优化"><a href="#线段树-树状数组优化" class="headerlink" title="线段树&#x2F;树状数组优化"></a>线段树&#x2F;树状数组优化</h4><p>$dp$ 需要区间状态的某些性质时，可以考虑线段树&#x2F;树状数组优化</p><div style="page-break-after: always;"></div><h3 id="斜率优化"><a href="#斜率优化" class="headerlink" title="斜率优化"></a>斜率优化</h3><p>一般形式<br>$$<br>f_{i} &#x3D; min(f_{j} + a_{i} \times b_{i}) \quad if \quad j &lt; i<br>$$</p><div style="page-break-after: always;"></div><h3 id="四边形不等式优化"><a href="#四边形不等式优化" class="headerlink" title="四边形不等式优化"></a><a href="https://www.luogu.com.cn/problem/P1775">四边形不等式优化</a></h3><p>四边形不等式 </p><p>对于任何 $a \le b \le c \le d$ 均有 $f(a, c) + f(b, d) \le f(a, d) + f(b, c)$</p><p>则称 $f$ 满足四边形不等式</p><p>还是石子合并那题</p><p>用 $p_{l, r}$ 记录分割点，优化决策</p><h4 id="main-code-15"><a href="#main-code-15" class="headerlink" title="main code"></a>main code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">val</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">sum</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    cin &gt;&gt; val[i];</span><br><span class="line">    sum[i] = sum[i - <span class="number">1</span>] + val[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">p</span>(n + <span class="number">2</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n + <span class="number">2</span>));</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">f</span>(n + <span class="number">2</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n + <span class="number">2</span>, inf));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    f[i][i] = <span class="number">0</span>;</span><br><span class="line">    p[i][i] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> delta = <span class="number">1</span>; delta &lt; n; delta++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> l = <span class="number">1</span>; l + delta &lt;= n; l++)&#123;</span><br><span class="line">        <span class="type">int</span> r = l + delta;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k = p[l][r - <span class="number">1</span>]; k &lt;= p[l + <span class="number">1</span>][r]; k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(f[l][r] &gt; f[l][k] + f[k + <span class="number">1</span>][r] + sum[r] - sum[l - <span class="number">1</span>])&#123;</span><br><span class="line">                f[l][r] = f[l][k] + f[k + <span class="number">1</span>][r] + sum[r] - sum[l - <span class="number">1</span>];</span><br><span class="line">                p[l][r] = k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; f[<span class="number">1</span>][n];</span><br></pre></td></tr></table></figure><p>复杂度 $O(n^{2})$</p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
          <category> Algorithms </category>
          
          <category> Dynamic Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Other</title>
      <link href="/2024/01/27/ACM/Template/Other/"/>
      <url>/2024/01/27/ACM/Template/Other/</url>
      
        <content type="html"><![CDATA[<h1 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h1><h2 id="Int128"><a href="#Int128" class="headerlink" title="Int128"></a>Int128</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(__int128&amp; x)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> f = <span class="number">1</span>;</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">f *= <span class="number">-1</span>;</span><br><span class="line">ch = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">x = x * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">ch = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line">x *= f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">print</span><span class="params">(__int128 x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="O2-O3-fast-read-fast-write"><a href="#O2-O3-fast-read-fast-write" class="headerlink" title="O2 &amp; O3 &amp; fast-read &amp; &amp; fast-write"></a>O2 &amp; O3 &amp; fast-read &amp; &amp; fast-write</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//O2</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//O3</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(3,<span class="string">&quot;Ofast&quot;</span>,<span class="string">&quot;inline&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//fast-read</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> w = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            w = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ch = <span class="built_in">getchar</span>(); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + (ch - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//fast-write</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        x = -x;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>) &#123;</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> Template </category>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Math</title>
      <link href="/2024/01/27/ACM/Template/Math/"/>
      <url>/2024/01/27/ACM/Template/Math/</url>
      
        <content type="html"><![CDATA[<h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><h2 id="ModInt"><a href="#ModInt" class="headerlink" title="ModInt"></a>ModInt</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> MOD&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ModInt</span> &#123;</span><br><span class="line"><span class="type">unsigned</span> x;</span><br><span class="line"><span class="built_in">ModInt</span>() : <span class="built_in">x</span>(<span class="number">0</span>) &#123; &#125;</span><br><span class="line"><span class="built_in">ModInt</span>(<span class="type">signed</span> sig) : <span class="built_in">x</span>(sig) &#123;  &#125;</span><br><span class="line"><span class="built_in">ModInt</span>(<span class="type">signed</span> <span class="type">long</span> <span class="type">long</span> sig) : <span class="built_in">x</span>(sig% MOD) &#123; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)x; &#125;</span><br><span class="line"><span class="function">ModInt <span class="title">pow</span><span class="params">(<span class="type">long</span> <span class="type">long</span> p)</span> </span>&#123; ModInt res = <span class="number">1</span>, a = *<span class="keyword">this</span>; <span class="keyword">while</span> (p) &#123; <span class="keyword">if</span> (p &amp; <span class="number">1</span>) res *= a; a *= a; p &gt;&gt;= <span class="number">1</span>; &#125; <span class="keyword">return</span> res; &#125;</span><br><span class="line"></span><br><span class="line">ModInt&amp; <span class="keyword">operator</span>+=(ModInt that) &#123; <span class="keyword">if</span> ((x += that.x) &gt;= MOD) x -= MOD; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">ModInt&amp; <span class="keyword">operator</span>-=(ModInt that) &#123; <span class="keyword">if</span> ((x += MOD - that.x) &gt;= MOD) x -= MOD; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">ModInt&amp; <span class="keyword">operator</span>*=(ModInt that) &#123; x = (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)x * that.x % MOD; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">ModInt&amp; <span class="keyword">operator</span>/=(ModInt that) &#123; <span class="built_in">return</span> (*<span class="keyword">this</span>) *= that.<span class="built_in">pow</span>(MOD - <span class="number">2</span>); &#125;</span><br><span class="line"></span><br><span class="line">ModInt <span class="keyword">operator</span>+(ModInt that) <span class="type">const</span> &#123; <span class="keyword">return</span> <span class="built_in">ModInt</span>(*<span class="keyword">this</span>) += that; &#125;</span><br><span class="line">ModInt <span class="keyword">operator</span>-(ModInt that) <span class="type">const</span> &#123; <span class="keyword">return</span> <span class="built_in">ModInt</span>(*<span class="keyword">this</span>) -= that; &#125;</span><br><span class="line">ModInt <span class="keyword">operator</span>*(ModInt that) <span class="type">const</span> &#123; <span class="keyword">return</span> <span class="built_in">ModInt</span>(*<span class="keyword">this</span>) *= that; &#125;</span><br><span class="line">ModInt <span class="keyword">operator</span>/(ModInt that) <span class="type">const</span> &#123; <span class="keyword">return</span> <span class="built_in">ModInt</span>(*<span class="keyword">this</span>) /= that; &#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;(ModInt that) <span class="type">const</span> &#123; <span class="keyword">return</span> x &lt; that.x; &#125;</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, ModInt a) &#123; os &lt;&lt; a.x; <span class="keyword">return</span> os; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Frac"><a href="#Frac" class="headerlink" title="Frac"></a>Frac</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Frac</span> &#123;</span><br><span class="line">    T num;</span><br><span class="line">    T den;</span><br><span class="line">    <span class="built_in">Frac</span>(T num_, T den_) : <span class="built_in">num</span>(num_), <span class="built_in">den</span>(den_) &#123;</span><br><span class="line">        <span class="keyword">if</span> (den &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            den = -den;</span><br><span class="line">            num = -num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Frac</span>() : <span class="built_in">Frac</span>(<span class="number">0</span>, <span class="number">1</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">Frac</span>(T num_) : <span class="built_in">Frac</span>(num_, <span class="number">1</span>) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="keyword">operator</span> <span class="title">double</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.</span> * num / den;</span><br><span class="line">    &#125;</span><br><span class="line">    Frac &amp;<span class="keyword">operator</span>+=(<span class="type">const</span> Frac &amp;rhs) &#123;</span><br><span class="line">        num = num * rhs.den + rhs.num * den;</span><br><span class="line">        den *= rhs.den;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Frac &amp;<span class="keyword">operator</span>-=(<span class="type">const</span> Frac &amp;rhs) &#123;</span><br><span class="line">        num = num * rhs.den - rhs.num * den;</span><br><span class="line">        den *= rhs.den;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Frac &amp;<span class="keyword">operator</span>*=(<span class="type">const</span> Frac &amp;rhs) &#123;</span><br><span class="line">        num *= rhs.num;</span><br><span class="line">        den *= rhs.den;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Frac &amp;<span class="keyword">operator</span>/=(<span class="type">const</span> Frac &amp;rhs) &#123;</span><br><span class="line">        num *= rhs.den;</span><br><span class="line">        den *= rhs.num;</span><br><span class="line">        <span class="keyword">if</span> (den &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            num = -num;</span><br><span class="line">            den = -den;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Frac <span class="keyword">operator</span>+(Frac lhs, <span class="type">const</span> Frac &amp;rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs += rhs;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Frac <span class="keyword">operator</span>-(Frac lhs, <span class="type">const</span> Frac &amp;rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs -= rhs;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Frac <span class="keyword">operator</span>*(Frac lhs, <span class="type">const</span> Frac &amp;rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs *= rhs;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Frac <span class="keyword">operator</span>/(Frac lhs, <span class="type">const</span> Frac &amp;rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs /= rhs;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Frac <span class="keyword">operator</span>-(<span class="type">const</span> Frac &amp;a) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Frac</span>(-a.num, a.den);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> Frac &amp;lhs, <span class="type">const</span> Frac &amp;rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.num * rhs.den == rhs.num * lhs.den;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> Frac &amp;lhs, <span class="type">const</span> Frac &amp;rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.num * rhs.den != rhs.num * lhs.den;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Frac &amp;lhs, <span class="type">const</span> Frac &amp;rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.num * rhs.den &lt; rhs.num * lhs.den;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> Frac &amp;lhs, <span class="type">const</span> Frac &amp;rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.num * rhs.den &gt; rhs.num * lhs.den;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> Frac &amp;lhs, <span class="type">const</span> Frac &amp;rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.num * rhs.den &lt;= rhs.num * lhs.den;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> Frac &amp;lhs, <span class="type">const</span> Frac &amp;rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.num * rhs.den &gt;= rhs.num * lhs.den;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;os, Frac x) &#123;</span><br><span class="line">        T g = std::<span class="built_in">gcd</span>(x.num, x.den);</span><br><span class="line">        <span class="keyword">if</span> (x.den == g) &#123;</span><br><span class="line">            <span class="keyword">return</span> os &lt;&lt; x.num / g;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> os &lt;&lt; x.num / g &lt;&lt; <span class="string">&quot;/&quot;</span> &lt;&lt; x.den / g;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Quick-power"><a href="#Quick-power" class="headerlink" title="Quick power"></a>Quick power</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">quick_power</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span> p)</span></span>&#123;</span><br><span class="line">    a %= p;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>)&#123;</span><br><span class="line">            res = res * a % p;</span><br><span class="line">        &#125;</span><br><span class="line">        a = a * a % p;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Mat"><a href="#Mat" class="headerlink" title="Mat"></a>Mat</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>, <span class="type">int</span> N&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">mat</span> &#123;</span><br><span class="line">    array&lt;array&lt;T, N&gt;, N&gt; val;</span><br><span class="line">    <span class="built_in">mat</span>()&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++)&#123;</span><br><span class="line">                val[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mat&lt;T, N&gt; <span class="keyword">operator</span>%=(<span class="type">const</span> <span class="type">long</span> <span class="type">long</span>&amp; p)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++)&#123;</span><br><span class="line">                val[i][j] %= p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Multiply"><a href="#Multiply" class="headerlink" title="Multiply"></a>Multiply</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="type">int</span> N&gt;</span></span><br><span class="line"><span class="function">mat&lt;T, N&gt; <span class="title">multiply</span><span class="params">(<span class="type">const</span> mat&lt;T, N&gt;&amp; lm, <span class="type">const</span> mat&lt;T, N&gt;&amp; rm, <span class="type">long</span> <span class="type">long</span> p)</span></span>&#123;</span><br><span class="line">    mat&lt;T, N&gt; res;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; N; k++)&#123;</span><br><span class="line">                res.val[i][j] = (res.val[i][j] + lm.val[i][k] * rm.val[k][j]) % p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Quick-power-1"><a href="#Quick-power-1" class="headerlink" title="Quick power"></a>Quick power</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="type">int</span> N&gt;</span></span><br><span class="line"><span class="function">mat&lt;T, N&gt; <span class="title">quick_power</span><span class="params">(mat&lt;T, N&gt; a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span> p)</span></span>&#123;</span><br><span class="line">    a %= p;</span><br><span class="line">    mat&lt;T, N&gt; res;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">        res.val[i][i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>)&#123;</span><br><span class="line">            res = <span class="built_in">multiply</span>(res, a, p);</span><br><span class="line">        &#125;</span><br><span class="line">        a = <span class="built_in">multiply</span>(a, a, p);</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Linear-sieves"><a href="#Linear-sieves" class="headerlink" title="Linear sieves"></a>Linear sieves</h2><h3 id="sieve-primes"><a href="#sieve-primes" class="headerlink" title="sieve primes"></a>sieve primes</h3><p>每个质数被其最小的因子删除</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [2, n] 内的质数</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">linear_sieves</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vis</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j = <span class="number">0</span>; j &lt; res.<span class="built_in">size</span>() &amp;&amp; i * res[j] &lt;= n; j++)&#123;</span><br><span class="line">            vis[i * res[j]] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % res[j] == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sieve-divisors"><a href="#sieve-divisors" class="headerlink" title="sieve divisors"></a>sieve divisors</h3><p><img src="/../../../images/ACM/divisor.png" alt="divisor"></p><p>$w(n)$ 表示质因子最多的个数</p><p>$d(n)$ 表示约数最多的个数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求 [0, n) 某个数的约数 </span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Divisor</span> &#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; p, v;</span><br><span class="line">    <span class="built_in">Divisor</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        v.<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!v[i]) &#123;</span><br><span class="line">                v[i] = i;</span><br><span class="line">                p.<span class="built_in">push_back</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; p.<span class="built_in">size</span>() &amp;&amp; i * p[j] &lt; n; j++) &#123;</span><br><span class="line">                v[i * p[j]] = p[j];</span><br><span class="line">                <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">auto</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">div</span><span class="params">(<span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">while</span> (x &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> l = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> r = div.<span class="built_in">size</span>();</span><br><span class="line">            <span class="type">int</span> d = v[x];</span><br><span class="line">            <span class="keyword">while</span> (x % d == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt; r; i++) &#123;</span><br><span class="line">                    div.<span class="built_in">push_back</span>(div[i] * d);</span><br><span class="line">                &#125;</span><br><span class="line">                x /= d;</span><br><span class="line">                l = r;</span><br><span class="line">                r = div.<span class="built_in">size</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> div; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="sieve-count-of-divisors"><a href="#sieve-count-of-divisors" class="headerlink" title="sieve count of divisors"></a>sieve count of divisors</h3><p>$$<br>唯一分解定理 \quad x &#x3D; \prod_{i &#x3D; 1}^{n} p_{i}^{k_{i}} \quad<br>$$</p><p>$$<br>乘法原理 \quad 约数个数 &#x3D; \prod_{i &#x3D; 1}^{n}(k_{i} + 1)<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [1, n] 约数个数</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sieve_divisors</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; primes;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cnt</span><span class="params">(n + <span class="number">1</span>, <span class="number">1</span>)</span>, <span class="title">p</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">vis</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">            primes.<span class="built_in">push_back</span>(i);</span><br><span class="line">            cnt[i] = <span class="number">2</span>;</span><br><span class="line">            p[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; primes.<span class="built_in">size</span>() &amp;&amp; i * primes[j] &lt;= n; j++) &#123;</span><br><span class="line">            <span class="type">int</span> val = i * primes[j];</span><br><span class="line">            vis[val] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % primes[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                p[val] = p[i] + <span class="number">1</span>;</span><br><span class="line">                cnt[val] = cnt[i] / (p[i] + <span class="number">1</span>) * (p[val] + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p[val] = <span class="number">1</span>;</span><br><span class="line">                cnt[val] = cnt[i] * (p[val] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sieve-sum-of-divisors"><a href="#sieve-sum-of-divisors" class="headerlink" title="sieve sum of divisors"></a>sieve sum of divisors</h3><p>$$<br>sum &#x3D; \prod\limits_{i &#x3D; 1}^{n} \sum\limits_{j &#x3D; 0}^{k_{i}} p_{i}^{j}<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Exgcd"><a href="#Exgcd" class="headerlink" title="Exgcd"></a>Exgcd</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">Exgcd</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span>&amp; x, <span class="type">long</span> <span class="type">long</span>&amp; y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!b) &#123;</span><br><span class="line">x = <span class="number">1</span>;</span><br><span class="line">y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> c = <span class="built_in">Exgcd</span>(b, a % b, y, x);</span><br><span class="line">y -= (a / b) * x;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Manhattan-distance-Chebyshev-distance"><a href="#Manhattan-distance-Chebyshev-distance" class="headerlink" title="Manhattan distance &amp; Chebyshev distance"></a>Manhattan distance &amp; Chebyshev distance</h2><p>$$<br>M(p_{i}, p_{j}) &#x3D; |x_{i} - x_{j}| + |y_{i} - y_{j}|<br>$$</p><p>$$<br>C(p_{i}, p_{j}) &#x3D; max(|x_{i} - x_{j}|, |y_{i} - y_{j}|)<br>$$</p><p>$$<br>Manhattan \rightarrow Chebyshev<br>$$</p><p>$$<br>M(\lbrace x_{i}, y_{i} \rbrace, \lbrace x_{j}, y_{j} \rbrace) &#x3D; C(\lbrace x_{i} + y_{i}, x_{i} - y_{i} \rbrace, \lbrace x_{j} + y_{j}, x_{j} - y_{j} \rbrace)<br>$$</p><p>$$<br>Chebyshev \rightarrow Manhattan<br>$$</p><p>$$<br>C(\lbrace x_{i}, y_{i} \rbrace, \lbrace x_{j}, y_{j} \rbrace) &#x3D; M(\lbrace \frac{x_{i} + y_{i}}{2}, \frac{x_{i} - y_{i}}{2} \rbrace, \lbrace \frac{x_{j} + y_{j}}{2}, \frac{x_{j} - y_{j}}{2} \rbrace)<br>$$</p><p><strong>trick</strong><br>$$<br>min(\frac{|x_{i} - x_{j}|}{|y_{i} - y_{j}|} + \frac{|y_{i} - y_{j}|}{|x_{i} - x_{j}|})<br>$$<br>发现当 $|x_{i} - x_{j}| &#x3D; |y_{i} - y_{j}|$ 时，上式最小，将点按 $x - y$ 和 $x + y$ 排序，相邻点取 $min$ 即可</p><h2 id="Integral"><a href="#Integral" class="headerlink" title="Integral"></a>Integral</h2><h3 id="Simpson"><a href="#Simpson" class="headerlink" title="Simpson"></a>Simpson</h3><p>$$<br>\int_{l}^{r} f(x) dx \quad &#x3D; \quad (r - l) * {f(l) + f(r) + 4 * f({l + r \over 2}) \over 6}<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">double</span> eps = <span class="number">1e-9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">f</span><span class="params">(<span class="type">long</span> <span class="type">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ;<span class="comment">//f表达式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">simpon</span> <span class="params">(<span class="type">long</span> <span class="type">double</span> l, <span class="type">long</span> <span class="type">double</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">f</span>(l) + <span class="built_in">f</span>(r) + <span class="built_in">f</span>((l + r) / <span class="number">2</span>) * <span class="number">4</span>) * (r - l) / <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">get</span><span class="params">(<span class="type">long</span> <span class="type">double</span> l, <span class="type">long</span> <span class="type">double</span> r, <span class="type">long</span> <span class="type">double</span> ans)</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> lv = <span class="built_in">simpon</span>(l, m);</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> rv = <span class="built_in">simpon</span>(m, r);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabsl</span>(lv + rv - ans) &lt; eps)&#123;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">get</span>(l, m, lv) + <span class="built_in">get</span>(m, r, rv);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">get</span>(l, r, <span class="built_in">simpon</span>(l, r));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> Template </category>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Geometry</title>
      <link href="/2024/01/27/ACM/Template/Geometry/"/>
      <url>/2024/01/27/ACM/Template/Geometry/</url>
      
        <content type="html"><![CDATA[<h1 id="Geometry"><a href="#Geometry" class="headerlink" title="Geometry"></a>Geometry</h1><h2 id="Point"><a href="#Point" class="headerlink" title="Point"></a>Point</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">double</span> eps = <span class="number">1e-9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> x;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">point</span>(<span class="type">long</span> <span class="type">double</span> _x = <span class="number">0</span>, <span class="type">long</span> <span class="type">double</span> _y = <span class="number">0</span>)&#123;</span><br><span class="line">        x = _x;</span><br><span class="line">        y = _y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">square_length</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x * x + y * y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//模长</span></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">length</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sqrtl</span>(x * x + y * y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> point <span class="keyword">operator</span>+(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">point</span>(lp.x + rp.x, lp.y + rp.y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> point <span class="keyword">operator</span>-(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">point</span>(lp.x - rp.x, lp.y - rp.y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> point <span class="keyword">operator</span>*(<span class="type">const</span> point&amp; p, <span class="type">const</span> <span class="type">long</span> <span class="type">double</span>&amp; k)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">point</span>(p.x * k, p.y * k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> point <span class="keyword">operator</span>*(<span class="type">const</span> <span class="type">long</span> <span class="type">double</span>&amp; k, <span class="type">const</span> point&amp; p)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">point</span>(p.x * k, p.y * k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> point <span class="keyword">operator</span>/(<span class="type">const</span> point&amp; p, <span class="type">const</span> <span class="type">long</span> <span class="type">double</span>&amp; k)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">point</span>(p.x / k, p.y / k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(lp.x - rp.x) &lt; eps &amp;&amp; <span class="built_in">abs</span>(lp.y - rp.y) &lt; eps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(lp.x - rp.x) &gt; eps || <span class="built_in">abs</span>(lp.y - rp.y) &gt; eps;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Dot-cross"><a href="#Dot-cross" class="headerlink" title="Dot &amp; cross"></a>Dot &amp; cross</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//点乘</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">dot</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lp.x * rp.x + lp.y * rp.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//叉乘</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">cross</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lp.x * rp.y - lp.y * rp.x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Distance"><a href="#Distance" class="headerlink" title="Distance"></a>Distance</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">square_distance</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (lp.x - rp.x) * (lp.x - rp.x) + (lp.y - rp.y) * (lp.y - rp.y);</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="comment">//两点距离</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">distance</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrtl</span>((lp.x - rp.x) * (lp.x - rp.x) + (lp.y - rp.y) * (lp.y - rp.y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Rotate"><a href="#Rotate" class="headerlink" title="Rotate"></a>Rotate</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">double</span> PI = <span class="number">3.141592653589793</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//矢量旋转 逆时针旋转 o (弧度制)</span></span><br><span class="line"><span class="function">point <span class="title">rotate</span><span class="params">(<span class="type">const</span> point&amp; v, <span class="type">long</span> <span class="type">double</span> o)</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> x = v.x * <span class="built_in">cos</span>(o) - v.y * <span class="built_in">sin</span>(o);</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> y = v.x * <span class="built_in">sin</span>(o) + v.y * <span class="built_in">cos</span>(o);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">point</span>(x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Sin-cos-angle-polar-angle"><a href="#Sin-cos-angle-polar-angle" class="headerlink" title="Sin &amp; cos &amp; angle &amp; polar_angle"></a>Sin &amp; cos &amp; angle &amp; polar_angle</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cos</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">cos</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dot</span>(lp, rp) / lp.<span class="built_in">length</span>() / rp.<span class="built_in">length</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//sin</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">sin</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">cross</span>(lp, rp) / lp.<span class="built_in">length</span>() / rp.<span class="built_in">length</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//angle</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">angle</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">acos</span>(<span class="built_in">cos</span>(lp, rp));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//极角 三 &lt; 四 &lt; 一 &lt; 二 (象限)</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">polar_angle</span><span class="params">(<span class="type">const</span> point&amp; p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">atan2</span>(p.y, p.x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Point-and-line"><a href="#Point-and-line" class="headerlink" title="Point and line"></a>Point and line</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//点到直线的距离 p到lp--rp的距离</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">distance</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp, <span class="type">const</span> point&amp; p)</span></span>&#123;</span><br><span class="line">    point vl = rp - lp;</span><br><span class="line">    point vr = p - lp;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">cross</span>(vl, vr) / vl.<span class="built_in">length</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求垂点 p到直线lp--rp的垂点</span></span><br><span class="line"><span class="function">point <span class="title">foot</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp, <span class="type">const</span> point&amp; p)</span></span>&#123;</span><br><span class="line">    point vl = rp - lp;</span><br><span class="line">    point vr = p - lp;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> k = <span class="built_in">dot</span>(vl, vr) / vl.<span class="built_in">length</span>() / vl.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">return</span> lp + vl * k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//点 p 是否在直线 lp-rp 上</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">on_line</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp, <span class="type">const</span> point&amp; p)</span> </span>&#123;</span><br><span class="line">    point vl = rp - lp;</span><br><span class="line">    point vr = p - lp;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sign</span>(<span class="built_in">cross</span>(vl, vr)) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//点 p 是否射线 lp-&gt;rp 上</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">on_ray</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp, <span class="type">const</span> point&amp; p)</span> </span>&#123;</span><br><span class="line">    point vl = rp - lp;</span><br><span class="line">    point vr = p - lp;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sign</span>(<span class="built_in">cross</span>(vl, vr)) == <span class="number">0</span> &amp;&amp; <span class="built_in">sign</span>(<span class="built_in">dot</span>(vl, vr)) != <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Line-and-line"><a href="#Line-and-line" class="headerlink" title="Line and line"></a>Line and line</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//两直线交点</span></span><br><span class="line"><span class="function">point <span class="title">intersect</span><span class="params">(<span class="type">const</span> point&amp; flp, <span class="type">const</span> point&amp; frp, <span class="type">const</span> point&amp; slp, <span class="type">const</span> point&amp; srp)</span></span>&#123;</span><br><span class="line">    point sf = flp - slp;</span><br><span class="line">    point vf = frp - flp;</span><br><span class="line">    point vs = srp - slp;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> k = <span class="built_in">cross</span>(sf, vs) / <span class="built_in">cross</span>(vs, vf);</span><br><span class="line">    <span class="keyword">return</span> flp + vf * k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两直线是否平行 (直线的两点不能相同) / 需要考虑直线重合的情况</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">parallel</span><span class="params">(<span class="type">const</span> point&amp; flp, <span class="type">const</span> point&amp; frp, <span class="type">const</span> point&amp; slp, <span class="type">const</span> point&amp; srp)</span> </span>&#123;</span><br><span class="line">    point vf = frp - flp;</span><br><span class="line">    point vs = srp - slp;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sign</span>(<span class="built_in">cross</span>(vs, vf)) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直线是否重合</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">equal</span><span class="params">(<span class="type">const</span> point&amp; flp, <span class="type">const</span> point&amp; frp, <span class="type">const</span> point&amp; slp, <span class="type">const</span> point&amp; srp)</span> </span>&#123;</span><br><span class="line">    point vf = frp - flp;</span><br><span class="line">    point vs = srp - slp;</span><br><span class="line">    point sf = flp - slp;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sign</span>(<span class="built_in">cross</span>(vs, vf)) == <span class="number">0</span> &amp;&amp; <span class="built_in">sign</span>(<span class="built_in">cross</span>(sf, vs)) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Point-and-segment"><a href="#Point-and-segment" class="headerlink" title="Point and segment"></a>Point and segment</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//符号判断</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sign</span><span class="params">(<span class="type">long</span> <span class="type">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; eps)&#123;<span class="comment">//正数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; -eps)&#123;<span class="comment">//负数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//点在线段上(含端点) lp rp 为线段端点</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">on_segment</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp, <span class="type">const</span> point&amp; p)</span></span>&#123;</span><br><span class="line">    point vl = rp - lp;</span><br><span class="line">    point vr = p - lp;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> sv = <span class="built_in">cross</span>(vl, vr);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">sign</span>(sv) != <span class="number">0</span>)&#123;<span class="comment">//不在直线上</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> cv = <span class="built_in">dot</span>(vl, vr);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">sign</span>(cv) == <span class="number">-1</span>)&#123;<span class="comment">//在线段外</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vr.<span class="built_in">length</span>() &lt;= vl.<span class="built_in">length</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//点在线段上(不含端点) lp rp 为线段端点</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">on_segment_strict</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp, <span class="type">const</span> point&amp; p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">on_segment</span>(lp, rp, p) &amp;&amp; lp != p &amp;&amp; rp != p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Circle"><a href="#Circle" class="headerlink" title="Circle"></a>Circle</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">circle</span> &#123;</span><br><span class="line">    point o;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> r;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//垂直平分线 两点式</span></span><br><span class="line"><span class="function">pair&lt;point, point&gt; <span class="title">perpendicular</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; (lp + rp) / <span class="number">2</span>, (lp + rp) / <span class="number">2</span> + <span class="built_in">rotate</span>(rp - lp, PI / <span class="number">2</span>) &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//三点确定圆 (外接圆)</span></span><br><span class="line"><span class="function">circle <span class="title">cover</span><span class="params">(<span class="type">const</span> point&amp; a, <span class="type">const</span> point&amp; b, <span class="type">const</span> point&amp; c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> lp = <span class="built_in">perpendicular</span>(a, b);</span><br><span class="line">    <span class="keyword">auto</span> rp = <span class="built_in">perpendicular</span>(a, c);</span><br><span class="line">    point o = <span class="built_in">intersect</span>(lp.first, lp.second, rp.first, rp.second);</span><br><span class="line">    <span class="keyword">return</span> &#123; o, <span class="built_in">distance</span>(o, a) &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三角形内切圆， 需要三点不共线</span></span><br><span class="line"><span class="function">circle <span class="title">inner</span> <span class="params">(<span class="type">const</span> point&amp; a, <span class="type">const</span> point&amp; b, <span class="type">const</span> point&amp; c)</span> </span>&#123;</span><br><span class="line">    point ab = b - a;</span><br><span class="line">    point ac = c - a;</span><br><span class="line">    point ao = (ab / ab.<span class="built_in">length</span>() + ac / ac.<span class="built_in">length</span>()) / <span class="number">2</span> + a;</span><br><span class="line">    point ba = a - b;</span><br><span class="line">    point bc = c - b;</span><br><span class="line">    point bo = (ba / ba.<span class="built_in">length</span>() + bc / bc.<span class="built_in">length</span>()) / <span class="number">2</span> + b;</span><br><span class="line">    <span class="keyword">auto</span> o = <span class="built_in">intersect</span>(a, ao, b, bo);</span><br><span class="line">    <span class="keyword">return</span> &#123; o, <span class="built_in">abs</span>(<span class="built_in">distance</span>(a, b, o)) &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求直线与圆的交点 保证有交点的情况下</span></span><br><span class="line"><span class="function">pair&lt;point, point&gt; <span class="title">intersect</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp, <span class="type">const</span> circle&amp; c)</span> </span>&#123;</span><br><span class="line">    point ft = <span class="built_in">foot</span>(lp, rp, c.o);</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> oft = <span class="built_in">distance</span>(c.o, ft);</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> k = <span class="built_in">sqrtl</span>(c.r * c.r - oft * oft);</span><br><span class="line">    point lr = (rp - lp) * k / <span class="built_in">distance</span>(lp, rp);</span><br><span class="line">    <span class="keyword">return</span> &#123; ft + lr, ft - lr &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求两圆的交点， 保证有交点</span></span><br><span class="line"><span class="function">pair&lt;point, point&gt; <span class="title">intersect</span><span class="params">(<span class="type">const</span> circle&amp; lc, <span class="type">const</span> circle&amp; rc)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> d = <span class="built_in">distance</span>(lc.o, rc.o);</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> k = ((lc.r * lc.r - rc.r * rc.r) / d + d) / <span class="number">2</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> o = <span class="built_in">acos</span>(k / lc.r);</span><br><span class="line">    point lr = rc.o - lc.o;</span><br><span class="line">    point lu = <span class="built_in">rotate</span>(lr, o);</span><br><span class="line">    lu = lu / lu.<span class="built_in">length</span>() * lc.r;</span><br><span class="line">    point ld = <span class="built_in">rotate</span>(lr, -o);</span><br><span class="line">    ld = ld / ld.<span class="built_in">length</span>() * lc.r;</span><br><span class="line">    <span class="keyword">return</span> &#123; lc.o + lu, lc.o + ld &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Convex-hull"><a href="#Convex-hull" class="headerlink" title="Convex-hull"></a>Convex-hull</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;point&gt; <span class="title">Andrew</span><span class="params">(vector&lt;point&gt; vp)</span></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(vp.<span class="built_in">begin</span>(), vp.<span class="built_in">end</span>(), [](<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp) -&gt; <span class="type">bool</span> &#123;<span class="comment">// X 第一关键字 Y 第二关键字</span></span><br><span class="line">        <span class="keyword">if</span>(lp.x == rp.x)&#123;</span><br><span class="line">            <span class="keyword">return</span> lp.y &lt; rp.y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lp.x &lt; rp.x;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">int</span> n = vp.<span class="built_in">size</span>();</span><br><span class="line">    vector&lt;point&gt; stk;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(stk.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">cross</span>(stk.<span class="built_in">back</span>() - stk[stk.<span class="built_in">size</span>() - <span class="number">2</span>], vp[i] - stk.<span class="built_in">back</span>()) &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            stk.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        stk.<span class="built_in">push_back</span>(vp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> k = stk.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = n - <span class="number">2</span>;i &gt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">while</span>(stk.<span class="built_in">size</span>() &gt; k &amp;&amp; <span class="built_in">cross</span>(stk.<span class="built_in">back</span>() - stk[stk.<span class="built_in">size</span>() - <span class="number">2</span>], vp[i] - stk.<span class="built_in">back</span>()) &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            stk.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        stk.<span class="built_in">push_back</span>(vp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    stk.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> stk;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Nearest-points"><a href="#Nearest-points" class="headerlink" title="Nearest-points"></a>Nearest-points</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//平面最近点对</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">nearest_points</span><span class="params">(vector&lt;point&gt; vp)</span></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(vp.<span class="built_in">begin</span>(), vp.<span class="built_in">end</span>(), [](<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp) -&gt; <span class="type">bool</span> &#123;<span class="comment">// X 第一关键字 Y 第二关键字</span></span><br><span class="line">        <span class="keyword">if</span>(lp.x == rp.x)&#123;</span><br><span class="line">            <span class="keyword">return</span> lp.y &lt; rp.y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lp.x &lt; rp.x;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">long</span> <span class="type">double</span> inf = <span class="number">1e20</span>;<span class="comment">//最大值</span></span><br><span class="line">    function&lt;<span class="type">long</span> <span class="type">double</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; get = [&amp;](<span class="type">int</span> l, <span class="type">int</span> r) -&gt; <span class="type">long</span> <span class="type">double</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">            <span class="keyword">return</span> inf;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(l + <span class="number">1</span> == r)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">distance</span>(vp[l], vp[r]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">double</span> ans = <span class="built_in">min</span>(<span class="built_in">get</span>(l, mid), <span class="built_in">get</span>(mid + <span class="number">1</span>, r));<span class="comment">//merge</span></span><br><span class="line">        <span class="comment">//合并</span></span><br><span class="line">        vector&lt;point&gt; tmp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = l;i &lt;= r;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">fabsl</span>(vp[i].x - vp[mid].x) &lt; ans)&#123;</span><br><span class="line">                tmp.<span class="built_in">push_back</span>(vp[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(tmp.<span class="built_in">begin</span>(), tmp.<span class="built_in">end</span>(), [](<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp) -&gt; <span class="type">bool</span> &#123;<span class="comment">// Y 第一关键字 X 第二关键字</span></span><br><span class="line">            <span class="keyword">if</span>(lp.y == rp.y)&#123;</span><br><span class="line">                <span class="keyword">return</span> lp.x &lt; rp.x;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> lp.y &lt; rp.y;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; tmp.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>;j &lt; tmp.<span class="built_in">size</span>() &amp;&amp; tmp[j].y - tmp[i].y &lt; ans;j++)&#123;</span><br><span class="line">                ans = <span class="built_in">min</span>(ans, <span class="built_in">distance</span>(tmp[i], tmp[j]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">get</span>(<span class="number">0</span>, vp.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Half-plane"><a href="#Half-plane" class="headerlink" title="Half plane"></a>Half plane</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span> &#123;</span><br><span class="line">    point lp;</span><br><span class="line">    point rp;</span><br><span class="line">    <span class="built_in">line</span>(point _lp, point _rp)&#123;</span><br><span class="line">        lp = _lp;</span><br><span class="line">        rp = _rp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_right</span><span class="params">(line a, line b, line c)</span></span>&#123;<span class="comment">//判断交点在直线右侧</span></span><br><span class="line">    point p = <span class="built_in">intersect</span>(b.lp, b.rp, c.lp, c.rp);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">cross</span>(a.rp - a.lp, p - a.lp) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">half_plane</span><span class="params">(vector&lt;line&gt; ve)</span></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(ve.<span class="built_in">begin</span>(), ve.<span class="built_in">end</span>(), [](<span class="type">const</span> line&amp; le, <span class="type">const</span> line&amp; re) -&gt; <span class="type">bool</span> &#123;<span class="comment">//极角排序 + 左侧排序</span></span><br><span class="line">        <span class="type">long</span> <span class="type">double</span> le_angle = <span class="built_in">polar_angle</span>(le.rp - le.lp);</span><br><span class="line">        <span class="type">long</span> <span class="type">double</span> re_angle = <span class="built_in">polar_angle</span>(re.rp - re.lp);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">fabsl</span>(le_angle - re_angle) &lt; eps)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">cross</span>(le.rp - le.lp, re.rp - le.lp) &lt; <span class="number">0</span>;<span class="comment">// 注意是 re.rp - le.lp</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> le_angle &lt; re_angle;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    deque&lt;line&gt; q;</span><br><span class="line">    <span class="type">int</span> n = ve.<span class="built_in">size</span>();</span><br><span class="line">    q.<span class="built_in">push_back</span>(ve.<span class="built_in">front</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">polar_angle</span>(ve[i].rp - ve[i].lp) - <span class="built_in">polar_angle</span>(ve[i - <span class="number">1</span>].rp - ve[i - <span class="number">1</span>].lp) &lt; eps)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">is_right</span>(ve[i], q.<span class="built_in">back</span>(), q[q.<span class="built_in">size</span>() - <span class="number">2</span>]))&#123;</span><br><span class="line">            q.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">is_right</span>(ve[i], q.<span class="built_in">front</span>(), q[<span class="number">1</span>]))&#123;</span><br><span class="line">            q.<span class="built_in">pop_front</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        q.<span class="built_in">push_back</span>(ve[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">is_right</span>(q.<span class="built_in">front</span>(), q.<span class="built_in">back</span>(), q[q.<span class="built_in">size</span>() - <span class="number">2</span>]))&#123;</span><br><span class="line">        q.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    q.<span class="built_in">push_back</span>(q.<span class="built_in">front</span>());</span><br><span class="line"></span><br><span class="line">    vector&lt;point&gt; tmp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; q.<span class="built_in">size</span>() - <span class="number">1</span>;i++)&#123;</span><br><span class="line">        tmp.<span class="built_in">push_back</span>(<span class="built_in">intersect</span>(q[i].lp, q[i].rp, q[i + <span class="number">1</span>].lp, q[i + <span class="number">1</span>].rp));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; tmp.<span class="built_in">size</span>() - <span class="number">1</span>;i++)&#123;</span><br><span class="line">        ans += <span class="built_in">cross</span>(tmp[i] - tmp.<span class="built_in">front</span>(), tmp[i + <span class="number">1</span>] - tmp.<span class="built_in">front</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans / <span class="number">2.0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Random-incremental"><a href="#Random-incremental" class="headerlink" title="Random-incremental"></a>Random-incremental</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">circle <span class="title">cover</span><span class="params">(<span class="type">const</span> point&amp; a, <span class="type">const</span> point&amp; b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; (a + b) / <span class="number">2</span>, <span class="built_in">distance</span>(a, b) / <span class="number">2</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最小圆覆盖</span></span><br><span class="line"><span class="function">circle <span class="title">increment</span><span class="params">(vector&lt;point&gt; vp)</span></span>&#123;</span><br><span class="line">    <span class="built_in">random_shuffle</span>(vp.<span class="built_in">begin</span>(), vp.<span class="built_in">end</span>());<span class="comment">//随机化</span></span><br><span class="line">    <span class="type">int</span> n = vp.<span class="built_in">size</span>();</span><br><span class="line">    circle ans = &#123;vp.<span class="built_in">front</span>(), <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ans.r &lt; <span class="built_in">distance</span>(ans.o, vp[i]))&#123;</span><br><span class="line">            ans = &#123;vp[i], <span class="number">0</span>&#125;;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; i;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ans.r &lt; <span class="built_in">distance</span>(ans.o, vp[j]))&#123;</span><br><span class="line">                    ans = <span class="built_in">cover</span>(vp[i], vp[j]);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>;k &lt; j;k++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(ans.r &lt; <span class="built_in">distance</span>(ans.o, vp[k]))&#123;</span><br><span class="line">                            ans = <span class="built_in">cover</span>(vp[i], vp[j], vp[k]);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="凸包最远点对"><a href="#凸包最远点对" class="headerlink" title="凸包最远点对"></a>凸包最远点对</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;point&gt; <span class="title">Andrew</span><span class="params">(vector&lt;point&gt; vp)</span></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(vp.<span class="built_in">begin</span>(), vp.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">int</span> n = vp.<span class="built_in">size</span>();</span><br><span class="line">    vector&lt;point&gt; stk;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(stk.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">cross</span>(stk.<span class="built_in">back</span>() - stk[stk.<span class="built_in">size</span>() - <span class="number">2</span>], vp[i] - stk.<span class="built_in">back</span>()) &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            stk.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        stk.<span class="built_in">push_back</span>(vp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> k = stk.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = n - <span class="number">2</span>;i &gt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">while</span>(stk.<span class="built_in">size</span>() &gt; k &amp;&amp; <span class="built_in">cross</span>(stk.<span class="built_in">back</span>() - stk[stk.<span class="built_in">size</span>() - <span class="number">2</span>], vp[i] - stk.<span class="built_in">back</span>()) &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            stk.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        stk.<span class="built_in">push_back</span>(vp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    stk.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> stk;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;point&gt; <span class="title">vp</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> x, y;</span><br><span class="line">    cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">    vp[i] = &#123; x, y &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">auto</span> convex = <span class="built_in">Andrew</span>(vp);</span><br><span class="line"><span class="type">int</span> m = convex.<span class="built_in">size</span>();</span><br><span class="line"><span class="type">long</span> <span class="type">double</span> d = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">1</span>;i &lt; m;i++)&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cross</span>(convex[(i + <span class="number">1</span>) % m] - convex[i], convex[j] - convex[i]) &lt; <span class="built_in">cross</span>(convex[(i + <span class="number">1</span>) % m] - convex[i], convex[(j + <span class="number">1</span>) % m] - convex[i]))&#123;</span><br><span class="line">        j = (j + <span class="number">1</span>) % m;</span><br><span class="line">    &#125;</span><br><span class="line">    d = <span class="built_in">max</span>(d, <span class="built_in">max</span>(<span class="built_in">distance</span>(convex[i], convex[j]), <span class="built_in">distance</span>(convex[(i + <span class="number">1</span>) % m], convex[j])));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> Template </category>
          
          <category> Geometry </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Game</title>
      <link href="/2024/01/27/ACM/Template/Game/"/>
      <url>/2024/01/27/ACM/Template/Game/</url>
      
        <content type="html"><![CDATA[<h1 id="Game"><a href="#Game" class="headerlink" title="Game"></a>Game</h1><h2 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h2><p>$1$堆石子，$n$个， 每次每人能取$[1, m]$个石子，不能拿的输</p><h3 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h3><p>$(m + 1) \mid n$ 时，先手必败</p><p>$(m + 1) \nmid n$ 时， 先手必胜</p><h3 id="prove"><a href="#prove" class="headerlink" title="prove"></a>prove</h3><ol><li>当$n \le m$时， 先手可直接取走所有</li><li>当$n &#x3D; m + 1$时，先手无论取走多少个，后手都能取走剩下所有</li><li>当$n &#x3D; k \times(m + 1)$时，对于每$m+1$个石子，先手取$i$个，后手取的$m+1−i$个</li><li>当$n &#x3D; k \times (m + 1) + x (0 &lt; x &lt; m + 1)$时，先手取$x$个，局势回到上一种情况</li></ol><h2 id="Nim"><a href="#Nim" class="headerlink" title="Nim"></a>Nim</h2><p>$n$堆石子，每堆$a_i$个，每人每次能从一堆石子中取任意多个石子但不能不取，不能拿的输</p><h3 id="conclusion-1"><a href="#conclusion-1" class="headerlink" title="conclusion"></a>conclusion</h3><p>$\bigoplus\limits_{i &#x3D; 1}^{n}a_i &#x3D; 0 $时，先手必败</p><p>$\bigoplus\limits_{i &#x3D; 1}^{n}a_i \neq 0 $时，先手必胜</p><h3 id="prove-1"><a href="#prove-1" class="headerlink" title="prove"></a>prove</h3><h2 id="Wythoff"><a href="#Wythoff" class="headerlink" title="Wythoff"></a>Wythoff</h2><p>$2$堆石子，$x, y$个，每人每次能从任意一堆中拿任意数量的石子或在两堆石子中拿走相同数量的石子，不能拿的输</p><h3 id="conclusion-2"><a href="#conclusion-2" class="headerlink" title="conclusion"></a>conclusion</h3><p>$\lfloor {(y - x) \times \frac{1 + \sqrt{5}}{2}} \rfloor &#x3D; x$ 或 $\lfloor {(x - y) \times \frac{1 + \sqrt{5}}{2}} \rfloor &#x3D; y$时，先手必败</p><p>$\lfloor {(y - x) \times \frac{1 + \sqrt{5}}{2}} \rfloor \neq x$ 且 $\lfloor {(x - y) \times \frac{1 + \sqrt{5}}{2}} \rfloor \neq y$时，先手必胜</p><h3 id="prove-2"><a href="#prove-2" class="headerlink" title="prove"></a>prove</h3><h2 id="Fibonacci"><a href="#Fibonacci" class="headerlink" title="Fibonacci"></a>Fibonacci</h2><p>$1$堆石子， $n$个，先手第一次能取任意多个，但不能取完，以后每次取子数不能超过前一次取子数的2倍，不能拿的输</p><h3 id="conclusion-3"><a href="#conclusion-3" class="headerlink" title="conclusion"></a>conclusion</h3><p>$n &#x3D; fib_i$时，先手必败</p><p>$n \neq fib_i$时，先手必胜</p><h3 id="prove-3"><a href="#prove-3" class="headerlink" title="prove"></a>prove</h3><h2 id="ExNim"><a href="#ExNim" class="headerlink" title="ExNim"></a>ExNim</h2><p>$n$堆石子，每堆$a_i$个，每人每次能从$[1, d]$堆石子中取任意多个石子但不能不取，不能拿的输</p><h3 id="conclusion-4"><a href="#conclusion-4" class="headerlink" title="conclusion"></a>conclusion</h3><p>二进制展开，设$cnt_{bit_i}$为某位为$1$的个数</p><p>$\forall i \quad (d + 1) \mid cnt_{bit_i}$时， 先手必败</p><p>$\exists i \quad (d + 1) \nmid cnt_{bit_i}$时，先手必胜</p><h3 id="prove-4"><a href="#prove-4" class="headerlink" title="prove"></a>prove</h3><h2 id="Staircase-Nim"><a href="#Staircase-Nim" class="headerlink" title="Staircase Nim"></a>Staircase Nim</h2><p>$n$堆石子，每堆$a_i$个，每次每人可以把第$i(i &gt; 1)$堆的任意个放到第$i - 1$堆里，或取第一堆任意个，不能拿的输</p><h3 id="conclusion-5"><a href="#conclusion-5" class="headerlink" title="conclusion"></a>conclusion</h3><p>$\bigoplus\limits_{i &#x3D; 1}^{\lceil \frac{n}{2} \rceil}a_{2i - 1} &#x3D; 0$时，先手必败</p><p>$\bigoplus\limits_{i &#x3D; 1}^{\lceil \frac{n}{2} \rceil}a_{2i - 1} \neq 0 $时，先手必胜</p><h3 id="prove-5"><a href="#prove-5" class="headerlink" title="prove"></a>prove</h3>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> Template </category>
          
          <category> Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data Structure</title>
      <link href="/2023/12/27/Learning/Course/Data%20Structure/"/>
      <url>/2023/12/27/Learning/Course/Data%20Structure/</url>
      
        <content type="html"><![CDATA[<p>$Created \ by \ GitSteve1025$</p><p>$Web \ Page: $ <a href="https://gitsteve1025.github.io/2023/12/27/Learning/Course/Data%20Structure/">Data Structure</a></p><h1 id="Splay"><a href="#Splay" class="headerlink" title="Splay"></a>Splay</h1><p>Splay 操作规定：每访问一个节点 $x$ 后都要强制将其旋转到根节点。</p><p>每次对 $x$ 做一次 splay 步骤， $x$ 到根节点的距离都会更近。</p><p>Splay 步骤有三种，具体分为六种情况：</p><h2 id="rotate"><a href="#rotate" class="headerlink" title="rotate"></a>rotate</h2><h3 id="zig"><a href="#zig" class="headerlink" title="zig"></a>zig</h3><p>当 $p$ 是根节点，$x$ 是 $p$ 的左子节点时操作。</p><p><img src="/images/DataStructure/Splay/zig.png" alt="zig"></p><h3 id="zag"><a href="#zag" class="headerlink" title="zag"></a>zag</h3><p>当$p$是根节点，$x$是$p$的右子节点时操作。</p><p><img src="/images/DataStructure/Splay/zag.png" alt="zag"></p><h3 id="zig-zig"><a href="#zig-zig" class="headerlink" title="zig-zig"></a>zig-zig</h3><p>当 $p$ 不是根节点，$p$ 和 $x$ 都是左子节点时操作。</p><p><img src="/images/DataStructure/Splay/zig-zig.png" alt="zig-zig"></p><h3 id="zag-zag"><a href="#zag-zag" class="headerlink" title="zag-zag"></a>zag-zag</h3><p>当$p$不是根节点， $p$ 和 $x$ 都是右子节点时操作。</p><p><img src="/images/DataStructure/Splay/zag-zag.png" alt="zag-zag"></p><h3 id="zig-zag"><a href="#zig-zag" class="headerlink" title="zig-zag"></a>zig-zag</h3><p>当 $p$ 不是根节点，$p$ 是左子节点， $x$ 是右子节点时操作。</p><p><img src="/images/DataStructure/Splay/zig-zag.png" alt="zig-zag"></p><h3 id="zag-zig"><a href="#zag-zig" class="headerlink" title="zag-zig"></a>zag-zig</h3><p>当 $p$ 不是根节点，$p$ 是右子节点， $x$ 是左子节点时操作。</p><p><img src="/images/DataStructure/Splay/zag-zig.png" alt="zag-zig"></p><p>可以看出 zig 和 zag 互为<strong>镜像</strong>操作</p><p>更详细的教程 <a href="https://oi-wiki.org/ds/splay/">Splay</a></p><h1 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h1><h2 id="Hash-function"><a href="#Hash-function" class="headerlink" title="Hash function"></a>Hash function</h2><p>得到 $key$ ，一般是 $X \ mod \ TableSize$ 。</p><h2 id="Solve-collision"><a href="#Solve-collision" class="headerlink" title="Solve collision"></a>Solve collision</h2><h3 id="分离链接法-separate-chaining"><a href="#分离链接法-separate-chaining" class="headerlink" title="分离链接法 (separate chaining)"></a>分离链接法 (separate chaining)</h3><p>将散列到同一个值的所有元素保留的一个链表。</p><p> <img src="/images/DataStructure/Hash/%E5%88%86%E7%A6%BB%E9%93%BE%E6%8E%A5%E6%B3%95.png" alt="分离链接法"></p><h3 id="探测法-probing"><a href="#探测法-probing" class="headerlink" title="探测法 (probing)"></a>探测法 (probing)</h3><h4 id="线性探测法"><a href="#线性探测法" class="headerlink" title="线性探测法"></a>线性探测法</h4><p>碰撞就往下找（每次走一格），直到找到空位填。 $f(i) &#x3D; i$</p><p>例：将 $(89, 18, 49, 58, 69)$ 放入大小为 $10$ 的表。</p><p><img src="/images/DataStructure/Hash/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B%E6%B3%95.png" alt="线性探测法"></p><h4 id="平方探测法"><a href="#平方探测法" class="headerlink" title="平方探测法"></a>平方探测法</h4><p>碰撞就往下找（每次走平方数格，即 $1, 4, 9, …$ ）。 直到找到空位填。 $f(i) &#x3D; i^{2}$ </p><p>例：将 $(89, 18, 49, 58, 69)$ 放入大小为 $10$ 的表。</p><p><img src="/images/DataStructure/Hash/%E5%B9%B3%E6%96%B9%E6%8E%A2%E6%B5%8B%E6%B3%95.png" alt="平方探测法"></p><h4 id="双散列-double-hashing"><a href="#双散列-double-hashing" class="headerlink" title="双散列 (double hashing)"></a>双散列 (double hashing)</h4><p>碰撞就往下找（每次走 $hash_2(x)$ 格，即 $hash_{2}(x), 2hash_{2}(x), 3hash_{2}(x), …$ ）。 直到找到空位填。 $f(i) &#x3D; i \times hash_{2}(x)$</p><p> 例：将 $(89, 18, 49, 58, 69)$ 放入大小为 $10$ 的表。 $hash_{2}(x) &#x3D; R - (x \ mod \ R)$ ， $R &#x3D; 7$   </p><p><img src="/images/DataStructure/Hash/%E5%8F%8C%E6%95%A3%E5%88%97.png" alt="双散列"></p><h3 id="再散列-rehashing"><a href="#再散列-rehashing" class="headerlink" title="再散列 (rehashing)"></a>再散列 (rehashing)</h3><p>将原来的表散列到新表， 新表一般为旧表两倍大。</p><h1 id="Sort"><a href="#Sort" class="headerlink" title="Sort"></a>Sort</h1><h2 id="QuickSort"><a href="#QuickSort" class="headerlink" title="QuickSort"></a>QuickSort</h2><p>平均 $O(N \ log \ N)$ ，最坏 $O(N^{2})$ </p><p><strong>算法步骤</strong>：</p><ol><li>如果 $|S| \le 1 \quad return$</li><li>取 $S$ 中某一元素 $v$ 当作<strong>枢纽元</strong> $(pivot)$</li><li>将 $S$ 划分为两个不相交的集合， $S_{1} &#x3D; \lbrace x \in S \wedge x &lt; v \rbrace$ ，$S_{2} &#x3D; \lbrace x \in S \wedge x &gt; v \rbrace$ </li><li>$return \ quicksort(S_{1}) + \lbrace v \rbrace + quicksort(S_{2})$</li></ol><h3 id="三数中值分割法-Median-of-Three-Partitioning"><a href="#三数中值分割法-Median-of-Three-Partitioning" class="headerlink" title="三数中值分割法 (Median-of-Three Partitioning)"></a>三数中值分割法 (Median-of-Three Partitioning)</h3><p>左端点 $left$ ，右端点 $right$ ，选择的<strong>枢纽元</strong> $\lfloor (left + right) &#x2F; 2 \rfloor$</p><h3 id="Cpp-Code"><a href="#Cpp-Code" class="headerlink" title="Cpp Code"></a>Cpp Code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quicksort</span><span class="params">(vector&lt;T&gt;&amp; items)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = items.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;T&gt; smaller, same, larger;</span><br><span class="line">    <span class="type">int</span> pivot = items[n / <span class="number">2</span>];</span><br><span class="line">    <span class="comment">//int pivot = items[rand() % n]; // 更快</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : items) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; pivot) &#123;</span><br><span class="line">            smaller.<span class="built_in">push_back</span>(x);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (x &gt; pivot) &#123;</span><br><span class="line">            larger.<span class="built_in">push_back</span>(x);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            same.<span class="built_in">push_back</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">quicksort</span>(smaller);</span><br><span class="line">    <span class="built_in">quicksort</span>(larger);</span><br><span class="line">    <span class="built_in">move</span>(smaller.<span class="built_in">begin</span>(), smaller.<span class="built_in">end</span>(), items.<span class="built_in">begin</span>());</span><br><span class="line">    <span class="built_in">move</span>(same.<span class="built_in">begin</span>(), same.<span class="built_in">end</span>(), items.<span class="built_in">begin</span>() + smaller.<span class="built_in">size</span>());</span><br><span class="line">    <span class="built_in">move</span>(larger.<span class="built_in">begin</span>(), larger.<span class="built_in">end</span>(), items.<span class="built_in">end</span>() - larger.<span class="built_in">size</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Python-Code"><a href="#Python-Code" class="headerlink" title="Python Code"></a>Python Code</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">quicksort</span>(<span class="params">items</span>) :</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(items) &lt;= <span class="number">1</span> :</span><br><span class="line">        <span class="keyword">return</span> items</span><br><span class="line">    <span class="comment"># pivot = items[len(items) // 2]</span></span><br><span class="line">    pivot = items[random.randint(<span class="number">0</span>, <span class="built_in">len</span>(items) - <span class="number">1</span>)] <span class="comment"># 更快</span></span><br><span class="line">    smaller = [x <span class="keyword">for</span> x <span class="keyword">in</span> items <span class="keyword">if</span> x &lt; pivot]</span><br><span class="line">    larger = [x <span class="keyword">for</span> x <span class="keyword">in</span> items <span class="keyword">if</span> x &gt; pivot]</span><br><span class="line">    same = [x <span class="keyword">for</span> x <span class="keyword">in</span> items <span class="keyword">if</span> x == pivot]</span><br><span class="line">    <span class="keyword">return</span> quicksort(smaller) + same + quicksort(larger)</span><br></pre></td></tr></table></figure><h2 id="MergeSort"><a href="#MergeSort" class="headerlink" title="MergeSort"></a>MergeSort</h2><p>平均 $O(N \ log \ N)$ ，最坏 $O(N \ log \ N)$</p><p><img src="/images/DataStructure/Sort/mergesort.png" alt="mergesort"></p><h3 id="Cpp-Code-1"><a href="#Cpp-Code-1" class="headerlink" title="Cpp Code"></a>Cpp Code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergesort</span><span class="params">(vector&lt;T&gt;&amp; items)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> temp = items;</span><br><span class="line">    <span class="keyword">auto</span> Merge = [&amp;](<span class="type">int</span> left, <span class="type">int</span> right) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">        <span class="type">int</span> middle = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> fp = left, sp = middle + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cp = left;</span><br><span class="line">        <span class="keyword">while</span> (fp &lt;= middle &amp;&amp; sp &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (items[fp] &lt;= items[sp]) &#123;</span><br><span class="line">                temp[cp] = items[fp];</span><br><span class="line">                fp++;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                temp[cp] = items[sp];</span><br><span class="line">                sp++;</span><br><span class="line">            &#125;</span><br><span class="line">            cp++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (fp &lt;= middle) &#123;</span><br><span class="line">            temp[cp] = items[fp];</span><br><span class="line">            fp++;</span><br><span class="line">            cp++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (sp &lt;= right) &#123;</span><br><span class="line">            temp[cp] = items[sp];</span><br><span class="line">            sp++;</span><br><span class="line">            cp++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = left; i &lt;= right; i++) &#123;</span><br><span class="line">            items[i] = temp[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> Mergesort = [&amp;](<span class="keyword">auto</span> self, <span class="type">int</span> left, <span class="type">int</span> right) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> middle = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">self</span>(self, left, middle);</span><br><span class="line">        <span class="built_in">self</span>(self, middle + <span class="number">1</span>, right);</span><br><span class="line">        <span class="built_in">Merge</span>(left, right);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Mergesort</span>(Mergesort, <span class="number">0</span>, items.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HeapSort"><a href="#HeapSort" class="headerlink" title="HeapSort"></a>HeapSort</h2><p>平均 $O(N \ log \ N)$ ，最坏 $O(N \ log \ N)$</p><p>首先建立大顶堆，然后将堆顶的元素取出，作为最大值，与数组尾部的元素交换，并维持残余堆的性质；</p><p>之后将堆顶的元素取出，作为次大值，与数组倒数第二位元素交换，并维持残余堆的性质；</p><p>以此类推，在第 $n - 1$ 次操作后，整个数组就完成了排序。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heapsort</span><span class="params">(vector&lt;T&gt;&amp; items)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> movedown = [&amp;](<span class="type">int</span> start, <span class="type">int</span> end) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">        <span class="type">int</span> parent = start;</span><br><span class="line">        <span class="type">int</span> child = parent * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (child &lt;= end) &#123;</span><br><span class="line">            <span class="keyword">if</span> (child &lt;= end - <span class="number">1</span> &amp;&amp; items[child] &lt; items[child + <span class="number">1</span>]) &#123;</span><br><span class="line">                child++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (items[child] &gt; items[parent]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(items[child], items[parent]);</span><br><span class="line">                parent = child;</span><br><span class="line">                child = parent * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = items.<span class="built_in">size</span>() / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">movedown</span>(i, items.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = items.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(items[<span class="number">0</span>], items[i]);</span><br><span class="line">        <span class="built_in">movedown</span>(<span class="number">0</span>, i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Huffman"><a href="#Huffman" class="headerlink" title="Huffman"></a>Huffman</h1><p>把字符出现的频率当权值，放入小根堆， 每次取出两个最小值，合成新的节点，其权值等于被合并二者值相加。放入堆中，重复操作，直到堆中只剩一个元素。</p><p>例； $A, B, C, D$ 出现频率分别为 $35, 25, 15, 15, 10$  形成的树。（一般取父节点到左子树为 0）</p><p><img src="/images/DataStructure/Huffman/Huffman-Coding.png" alt="Huffman Coding"></p><h2 id="Cpp-Code-2"><a href="#Cpp-Code-2" class="headerlink" title="Cpp Code"></a>Cpp Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Huffman Tree&#x27;s Node</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">HuffmanTreeNode</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> character;<span class="comment">// character </span></span><br><span class="line"><span class="type">int</span> frequency;<span class="comment">// frequency of char character</span></span><br><span class="line">HuffmanTreeNode* left;<span class="comment">//left Node</span></span><br><span class="line">HuffmanTreeNode* right;<span class="comment">//right Node</span></span><br><span class="line"><span class="built_in">HuffmanTreeNode</span>()</span><br><span class="line">&#123;</span><br><span class="line">character = <span class="number">0</span>;</span><br><span class="line">frequency = <span class="number">0</span>;</span><br><span class="line">left = <span class="number">0</span>;</span><br><span class="line">right = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">HuffmanTreeNode</span>(<span class="type">char</span> _character, <span class="type">int</span> _frequency)<span class="comment">//Init Node with character and frequency</span></span><br><span class="line">&#123;</span><br><span class="line">character = _character;</span><br><span class="line">frequency = _frequency;</span><br><span class="line">left = <span class="number">0</span>;</span><br><span class="line">right = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">HuffmanTreeNode</span>(HuffmanTreeNode* _left, HuffmanTreeNode* _right)<span class="comment">//Init Node with left and right</span></span><br><span class="line">&#123;</span><br><span class="line">character = <span class="number">0</span>;</span><br><span class="line">frequency = _left-&gt;frequency + _right-&gt;frequency;</span><br><span class="line">left = _left;</span><br><span class="line">right = _right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">HuffmanTreeNode</span>(<span class="type">char</span> _character, <span class="type">int</span> _frequency, HuffmanTreeNode* _left, HuffmanTreeNode* _right)<span class="comment">//Init Node with character, frequency, left and right</span></span><br><span class="line">&#123;</span><br><span class="line">character = _character;</span><br><span class="line">frequency = _frequency;</span><br><span class="line">left = _left;</span><br><span class="line">right = _right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">less</span><span class="comment">//HuffmanTreeNode* compare with frequency  less compare</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(HuffmanTreeNode*&amp; left_node, HuffmanTreeNode*&amp; right_node)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> left_node-&gt;frequency &lt; right_node-&gt;frequency;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">greater</span><span class="comment">//HuffmanTreeNode* compare with frequency  greater compare</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(HuffmanTreeNode*&amp; left_node, HuffmanTreeNode*&amp; right_node)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> left_node-&gt;frequency &gt; right_node-&gt;frequency;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//HuffmanTree</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HuffmanTree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">HuffmanTree</span>()</span><br><span class="line">&#123;</span><br><span class="line">root = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">HuffmanTree</span>(std::string filepath);</span><br><span class="line"></span><br><span class="line">std::vector&lt;std::pair&lt;<span class="type">char</span>, std::string&gt;&gt; <span class="built_in">getcode</span>() <span class="type">const</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Encode</span><span class="params">(HuffmanTreeNode* node, std::string code = <span class="string">&quot;&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">HuffmanTreeNode* root;</span><br><span class="line">std::vector&lt;std::pair&lt;<span class="type">char</span>, std::string&gt;&gt; Huffman_Encode;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">HuffmanTree::<span class="built_in">HuffmanTree</span>(std::string filepath)</span><br><span class="line">&#123;</span><br><span class="line">root = <span class="number">0</span>;</span><br><span class="line"><span class="function">std::fstream <span class="title">fin</span><span class="params">(filepath, std::ios::in)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!fin)<span class="comment">//open failed</span></span><br><span class="line">&#123;</span><br><span class="line">std::cerr &lt;&lt; <span class="string">&quot;filepath: &quot;</span> &lt;&lt; filepath &lt;&lt; <span class="string">&quot; is wrong&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::string data;</span><br><span class="line">std::map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; cnt;</span><br><span class="line"><span class="keyword">while</span> (fin &gt;&gt; data)<span class="comment">//read data</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x : data)<span class="comment">//foreach data and calculate the frequency of character</span></span><br><span class="line">&#123;</span><br><span class="line">cnt[x] += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::priority_queue&lt;HuffmanTreeNode*, std::vector&lt;HuffmanTreeNode*&gt;, greater&gt; q;<span class="comment">//use priority_queue to build tree</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; [character, frequency] : cnt)</span><br><span class="line">&#123;</span><br><span class="line">HuffmanTreeNode* node = <span class="keyword">new</span> <span class="built_in">HuffmanTreeNode</span>(character, frequency);</span><br><span class="line">q.<span class="built_in">push</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>())<span class="comment">//build HuffmanTree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (q.<span class="built_in">size</span>() &gt; <span class="number">1</span>)<span class="comment">//keep building tree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> left_node = q.<span class="built_in">top</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">auto</span> right_node = q.<span class="built_in">top</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">auto</span> node = <span class="keyword">new</span> <span class="built_in">HuffmanTreeNode</span>(left_node, right_node);</span><br><span class="line">q.<span class="built_in">push</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">// find root</span></span><br><span class="line">&#123;</span><br><span class="line">root = q.<span class="built_in">top</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (root != <span class="number">0</span>)<span class="comment">//Encode</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Encode</span>(root);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::vector&lt;std::pair&lt;<span class="type">char</span>, std::string&gt;&gt; HuffmanTree::<span class="built_in">getcode</span>() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> Huffman_Encode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HuffmanTree::Encode</span><span class="params">(HuffmanTreeNode* node, std::string code)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (node-&gt;left)<span class="comment">//not leaf</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Encode</span>(node-&gt;left, code + <span class="string">&quot;0&quot;</span>);<span class="comment">//left encode to 0</span></span><br><span class="line"><span class="built_in">Encode</span>(node-&gt;right, code + <span class="string">&quot;1&quot;</span>);<span class="comment">//right encode to 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//leaf</span></span><br><span class="line">&#123;</span><br><span class="line">Huffman_Encode.<span class="built_in">push_back</span>(&#123; node-&gt;character, code &#125;);<span class="comment">//get encode</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="DSU"><a href="#DSU" class="headerlink" title="DSU"></a>DSU</h1><p>并查集是一种用于管理元素所属集合的数据结构，实现为一个森林，其中每棵树表示一个集合，树中的节点表示对应集合中的元素。</p><p>顾名思义，并查集支持两种操作：</p><ul><li>合并（Union）：合并两个元素所属集合（合并对应的树）</li><li>查询（Find）：查询某个元素所属集合（查询对应的树的根节点），这可以用于判断两个元素是否属于同一集合</li></ul><h2 id="Cpp-Code-3"><a href="#Cpp-Code-3" class="headerlink" title="Cpp Code"></a>Cpp Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DSU</span> &#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; f, siz;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">DSU</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">DSU</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        f.<span class="built_in">resize</span>(n);</span><br><span class="line">        std::<span class="built_in">iota</span>(f.<span class="built_in">begin</span>(), f.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        siz.<span class="built_in">assign</span>(n, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (x != f[x]) &#123;</span><br><span class="line">            x = f[x] = f[f[x]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">same</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        x = <span class="built_in">find</span>(x);</span><br><span class="line">        y = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (x == y) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        siz[x] += siz[y];</span><br><span class="line">        f[y] = x;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> siz[<span class="built_in">find</span>(x)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
          <category> Course </category>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="/2023/12/19/Learning/Languages/Python/"/>
      <url>/2023/12/19/Learning/Languages/Python/</url>
      
        <content type="html"><![CDATA[<h1 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h1><h2 id="exegesis"><a href="#exegesis" class="headerlink" title="exegesis"></a>exegesis</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">多行注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">多行注释</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># print 语法</span></span><br><span class="line"><span class="comment"># print(value, ... , sep = &#x27; &#x27;, end = &#x27;\n&#x27;, file = None)</span></span><br><span class="line"><span class="comment"># sep 表示分割符 end 表示换行 file 文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print 字符串 写法</span></span><br><span class="line">S = <span class="string">&quot;SCUT&quot;</span> <span class="comment"># 定义字符串 S</span></span><br><span class="line"><span class="built_in">print</span>(S)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;SCUT&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;SCUT&quot;</span>) <span class="comment"># 建议和 cpp 保持一致</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;SCUT&#x27;&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;SCUT&quot;&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;S&#x27;</span> + <span class="string">&#x27;C&#x27;</span> + <span class="string">&#x27;U&#x27;</span> + <span class="string">&#x27;T&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(S, S, S) <span class="comment">#中间会有空格</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># file output</span></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&quot;data.txt&quot;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="comment"># w 写操作</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;SCUT&quot;</span>, file = fp) <span class="comment"># 输出到 data.txt</span></span><br><span class="line">fp.close() <span class="comment"># close file</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义 sep end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;SCUT&quot;</span>, <span class="string">&quot;SCUT&quot;</span>, sep = <span class="string">&#x27;####&#x27;</span>, end = <span class="string">&quot;@@@@\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line"><span class="built_in">print</span>(keyword.kwlist) <span class="comment"># 输出 python 的关键字集合 </span></span><br></pre></td></tr></table></figure><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var = <span class="built_in">input</span>(<span class="string">&quot;input Tips: &quot;</span>) <span class="comment"># 以字符串读入 # input Tips 是 读入提示用户</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(var)</span><br></pre></td></tr></table></figure><h2 id="variable-constant"><a href="#variable-constant" class="headerlink" title="variable &amp; constant"></a>variable &amp; constant</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">S = <span class="string">&quot;SCUT&quot;</span> <span class="comment"># 大写一般定义为常量</span></span><br><span class="line">s = <span class="string">&quot;SCUT&quot;</span> <span class="comment"># 小写一般定义为边量</span></span><br></pre></td></tr></table></figure><h2 id="type"><a href="#type" class="headerlink" title="type"></a>type</h2><h3 id="digit"><a href="#digit" class="headerlink" title="digit"></a>digit</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数默认十进制</span></span><br><span class="line">a = <span class="number">1918</span> <span class="comment"># 十进制</span></span><br><span class="line">b = <span class="number">0b011101111110</span> <span class="comment"># 二进制</span></span><br><span class="line">c = <span class="number">0o3576</span> <span class="comment"># 八进制</span></span><br><span class="line">d = <span class="number">0x77E</span> <span class="comment"># 16进制</span></span><br><span class="line"><span class="built_in">print</span>(a, b, c, d, sep = <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复数</span></span><br><span class="line">e = <span class="number">19</span> + <span class="number">18j</span></span><br><span class="line"><span class="built_in">print</span>(e) <span class="comment"># 整个打印</span></span><br><span class="line"><span class="built_in">print</span>(e.real) <span class="comment"># 实数部分</span></span><br><span class="line"><span class="built_in">print</span>(e.imag) <span class="comment"># 虚数部分</span></span><br></pre></td></tr></table></figure><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># string</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># \ 的转义用法</span></span><br><span class="line"><span class="comment"># \n 换行</span></span><br><span class="line"><span class="comment"># \t 制表</span></span><br><span class="line"><span class="comment"># \\ 一个反斜杠</span></span><br><span class="line"><span class="comment"># \&quot; 双引号</span></span><br><span class="line"><span class="comment"># \&#x27; 单引号</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\&quot;SCUT\&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\&#x27;SCUT\&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line">Sc = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">S</span></span><br><span class="line"><span class="string">C</span></span><br><span class="line"><span class="string">U</span></span><br><span class="line"><span class="string">T</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(Sc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0 1 2 3 4 5 6 7 正序下标</span></span><br><span class="line"><span class="comment"># SCUT1918</span></span><br><span class="line"><span class="comment"># -8 -7 -6 -5 -4 -3 -2 -1 逆序</span></span><br><span class="line">SchoolTime = <span class="string">&quot;SCUT1918&quot;</span></span><br><span class="line"></span><br><span class="line">S, C, U, T = <span class="string">&quot;SCUT&quot;</span> <span class="comment"># 字符串分解赋值</span></span><br><span class="line"><span class="built_in">print</span>(S, C, U, T)</span><br><span class="line"></span><br><span class="line"><span class="comment"># length</span></span><br><span class="line"><span class="comment"># len()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(SchoolTime))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切片 得到str区间[l, r] stringname[N:M] 得到区间[N, M - 1] !!!</span></span><br><span class="line"><span class="built_in">print</span>(SchoolTime[<span class="number">2</span> : <span class="number">6</span>]) <span class="comment"># 区间 [2, 5]</span></span><br><span class="line"><span class="built_in">print</span>(SchoolTime[-<span class="number">6</span> : -<span class="number">2</span>]) <span class="comment"># 区间 [-6, -3]</span></span><br><span class="line"><span class="built_in">print</span>(SchoolTime[:<span class="number">4</span>]) <span class="comment"># [0, 3] 前者默认 头部</span></span><br><span class="line"><span class="built_in">print</span>(SchoolTime[<span class="number">4</span>:]) <span class="comment"># [4, 7] 后者默认 尾部</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串常规操作</span></span><br><span class="line"><span class="comment"># x + y 拼接</span></span><br><span class="line"><span class="comment"># x * n 复制 n 次 x </span></span><br><span class="line"><span class="comment"># x in s 如果 x 是 s 的子串 结果为 True 否则为 False</span></span><br><span class="line">School = <span class="string">&quot;SCUT&quot;</span></span><br><span class="line">Time = <span class="string">&quot;1918&quot;</span></span><br><span class="line"><span class="built_in">print</span>(School + Time)</span><br><span class="line"><span class="built_in">print</span>(School * <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;AB&quot;</span> <span class="keyword">in</span> School)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;SC&quot;</span> <span class="keyword">in</span> School)</span><br></pre></td></tr></table></figure><h3 id="bool"><a href="#bool" class="headerlink" title="bool"></a>bool</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bool</span></span><br><span class="line">flag = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">10</span>)) <span class="comment"># 非 0 True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">0</span>)) </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="string">&quot;SCUT&quot;</span>)) <span class="comment"># 非 空 True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="string">&quot;&quot;</span>))</span><br></pre></td></tr></table></figure><h2 id="code-format"><a href="#code-format" class="headerlink" title="code format"></a>code format</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在文件最前面加上下面一句话 （包括 #）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># coding = utf-8</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># coding = gbk</span></span><br></pre></td></tr></table></figure><h2 id="type-transform"><a href="#type-transform" class="headerlink" title="type transform"></a>type transform</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get type</span></span><br><span class="line"><span class="comment"># type()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">&quot;SCUT&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># int to char </span></span><br><span class="line"><span class="comment"># chr()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">83</span>) + <span class="built_in">chr</span>(<span class="number">67</span>) + <span class="built_in">chr</span>(<span class="number">85</span>) + <span class="built_in">chr</span>(<span class="number">84</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># chr to int</span></span><br><span class="line"><span class="comment"># ord()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">&#x27;S&#x27;</span>), <span class="built_in">ord</span>(<span class="string">&#x27;C&#x27;</span>), <span class="built_in">ord</span>(<span class="string">&#x27;U&#x27;</span>), <span class="built_in">ord</span>(<span class="string">&#x27;T&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># to strting </span></span><br><span class="line"><span class="comment"># str()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(<span class="number">1918</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># to float</span></span><br><span class="line"><span class="comment"># float()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(<span class="number">1918</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># to hex</span></span><br><span class="line"><span class="comment"># hex()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="number">1918</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># to oct</span></span><br><span class="line"><span class="comment"># oct()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">oct</span>(<span class="number">1918</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># to bin</span></span><br><span class="line"><span class="comment"># bin()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="number">1918</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># to list</span></span><br><span class="line"><span class="comment"># list(sequence)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="string">&quot;SCUT&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># to tuple</span></span><br><span class="line"><span class="comment"># tuple(sequence)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(<span class="string">&quot;SCUT&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># to set</span></span><br><span class="line"><span class="comment"># set(sequence)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(<span class="string">&quot;SCUT&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># eval</span></span><br><span class="line"><span class="comment"># 去除字符串引号 等价于执行内部语句</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&quot;1 + 9 * 1 + 8&quot;</span>))</span><br><span class="line">S = <span class="string">&quot;1 + 9 * 1 + 8&quot;</span></span><br><span class="line">X = <span class="built_in">eval</span>(S)</span><br><span class="line"><span class="built_in">print</span>(X, <span class="built_in">type</span>(X)) <span class="comment"># 类型变化</span></span><br></pre></td></tr></table></figure><h2 id="compute"><a href="#compute" class="headerlink" title="compute"></a>compute</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1900</span> + <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 减</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1920</span> - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 乘</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">959</span> * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 除</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3836</span> / <span class="number">2</span>) <span class="comment"># float 类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 整除</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3836</span> // <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取余</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1918</span> % <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 幂运算 </span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span>**<span class="number">2</span>) <span class="comment"># = 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -=    x -= y  x = x - y</span></span><br><span class="line"><span class="comment"># +=    x += y  x = x + y</span></span><br><span class="line"><span class="comment"># *=    x *= y  x = x * y</span></span><br><span class="line"><span class="comment"># /=    x /= y  x = x / y</span></span><br><span class="line"><span class="comment"># %=    x %= y  x = x % y</span></span><br><span class="line"><span class="comment"># //=   x //= y  x = x // y</span></span><br><span class="line"><span class="comment"># **=   x **= y  x = x ** y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># swap</span></span><br><span class="line">a = <span class="string">&quot;SCUT&quot;</span></span><br><span class="line">b = <span class="string">&quot;1918&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a, b)</span><br><span class="line">a, b = b, a</span><br><span class="line"><span class="built_in">print</span>(a, b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较运算</span></span><br><span class="line"><span class="comment"># &gt;</span></span><br><span class="line"><span class="comment"># &lt;</span></span><br><span class="line"><span class="comment"># &gt;=</span></span><br><span class="line"><span class="comment"># &lt;=</span></span><br><span class="line"><span class="comment"># ==</span></span><br><span class="line"><span class="comment"># !=</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 逻辑运算</span></span><br><span class="line"><span class="comment"># and   = C++ &amp;&amp;</span></span><br><span class="line"><span class="comment"># or    = C++ ||</span></span><br><span class="line"><span class="comment"># not   = C++ !</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 位运算 (bit op)</span></span><br><span class="line"><span class="comment"># &amp;     且 </span></span><br><span class="line"><span class="comment"># |     或</span></span><br><span class="line"><span class="comment"># ^     异或</span></span><br><span class="line"><span class="comment"># ~     取反</span></span><br></pre></td></tr></table></figure><h2 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">S = <span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">if</span> S == <span class="string">&quot;SCUT&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1918&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> S:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;S is empty&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(S)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(S <span class="keyword">if</span> S <span class="keyword">else</span> <span class="string">&quot;empty&quot;</span>)</span><br><span class="line"><span class="comment"># result if condition else not condition</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> S:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(S) &gt; <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;length &gt; 4&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(S) &gt; <span class="number">1</span>: <span class="comment"># C++ else if ==&gt; python elif</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(S)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;empty&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># python3 模式匹配 </span></span><br><span class="line"><span class="keyword">match</span> S:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;SCUT&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;School&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;1918&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Time&quot;</span>)</span><br><span class="line"><span class="comment"># 和 C++ switch 不同 不需要break 不会执行不匹配的语句</span></span><br></pre></td></tr></table></figure><h2 id="for-while"><a href="#for-while" class="headerlink" title="for while"></a>for while</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;SCUT&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>): <span class="comment"># range(n, m) 生成[n, m)的序列 注意不包含 m</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>): <span class="comment"># 默认从 0 开始</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># for ... else ... 结构</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>): <span class="comment"># 完全执行所有 i 才会执行 else 内的语句， 遇到 break 认为未执行完 </span></span><br><span class="line">    <span class="built_in">sum</span> += i</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">9</span>:</span><br><span class="line">        <span class="comment"># break # 不会执行 else</span></span><br><span class="line">        <span class="keyword">continue</span> <span class="comment"># 会执行 else</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">S = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> S != <span class="string">&quot;SCUT&quot;</span> :</span><br><span class="line">    S = <span class="built_in">input</span>(<span class="string">&quot;input: SCUT &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(S)</span><br><span class="line"></span><br><span class="line"><span class="comment"># while ... else ... 结构 未遇到 break 退出循环才会执行 else 内的语句</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">100</span> :</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">99</span> :</span><br><span class="line">        <span class="comment">#continue</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h2 id="pass"><a href="#pass" class="headerlink" title="pass"></a>pass</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pass 语句 占位符 空语句</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不会报错</span></span><br><span class="line"><span class="keyword">while</span> <span class="string">&quot;SCUT&quot;</span> :</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">报错</span></span><br><span class="line"><span class="string">while &quot;SCUT&quot; :</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类似的 if else for 也可占位</span></span><br></pre></td></tr></table></figure><h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A = B = C <span class="comment"># maybe wrong </span></span><br></pre></td></tr></table></figure><h1 id="data"><a href="#data" class="headerlink" title="data"></a>data</h1><h2 id="sequence"><a href="#sequence" class="headerlink" title="sequence"></a>sequence</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># subsequence</span></span><br><span class="line"><span class="comment"># S[start : end : offset] 从区间[start, end) 每次走 offset 步得到的 子序列</span></span><br><span class="line"></span><br><span class="line">S = <span class="string">&quot;SCUT1918&quot;</span></span><br><span class="line">Sub = S[<span class="number">1</span> : <span class="number">7</span> : <span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(Sub)</span><br><span class="line">Sub = S[-<span class="number">3</span> : -<span class="number">8</span> : -<span class="number">2</span>] <span class="comment"># offset &lt; 0 倒着走 </span></span><br><span class="line"><span class="built_in">print</span>(Sub)</span><br><span class="line"><span class="built_in">print</span>(S[ : : ]) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># operation</span></span><br><span class="line">Sp = <span class="string">&quot;SCUT&quot;</span></span><br><span class="line">Su = <span class="string">&quot;1918&quot;</span></span><br><span class="line"><span class="built_in">print</span>(Sp + Su)</span><br><span class="line"><span class="built_in">print</span>((Sp + Su) * <span class="number">10</span>) <span class="comment"># output * 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># x in s</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;SC&quot;</span> <span class="keyword">in</span> Sp :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;find&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x not in s</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;Sc&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> Sp :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Not find&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># len(s) # return length of s</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(S))</span><br><span class="line"></span><br><span class="line"><span class="comment"># max(s) # return max_element of s</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(S))</span><br><span class="line"></span><br><span class="line"><span class="comment"># min(s) # return min_element of s</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(S))</span><br><span class="line"></span><br><span class="line"><span class="comment"># s.index(x)  # return the first occur index of x</span></span><br><span class="line"><span class="built_in">print</span>(S.index(<span class="string">&#x27;U&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># s.count(x)  # return the number of count</span></span><br><span class="line"><span class="built_in">print</span>(S.count(<span class="string">&#x27;1&#x27;</span>)) </span><br></pre></td></tr></table></figure><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create list</span></span><br><span class="line"><span class="comment"># [element1, ... , elementn]</span></span><br><span class="line"><span class="comment"># list()</span></span><br><span class="line"><span class="comment"># type of elements can be different </span></span><br><span class="line">Sp = [<span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;T&#x27;</span>]</span><br><span class="line">Su = <span class="built_in">list</span>(<span class="string">&quot;1918&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(Sp) <span class="comment"># S C U T</span></span><br><span class="line"><span class="built_in">print</span>(Su) <span class="comment"># 1 9 1 8</span></span><br><span class="line">I = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>)) <span class="comment"># 1 - 9  offset = 2</span></span><br><span class="line"><span class="built_in">print</span>(I)</span><br><span class="line"><span class="built_in">print</span>(I * <span class="number">3</span>) <span class="comment"># list * 3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(I))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(I))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(I))</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> I <span class="comment"># 删除 I</span></span><br><span class="line"><span class="comment"># print(I) # error</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># for_each</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> Sp :</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Sp)) :</span><br><span class="line">    <span class="built_in">print</span>(Sp[x])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(Sp) :</span><br><span class="line">    <span class="built_in">print</span>(i, x) <span class="comment"># i 为 序号 不是 索引</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(Sp, start = <span class="number">10</span>) :</span><br><span class="line">    <span class="built_in">print</span>(i, x) <span class="comment"># 序号 i 从 start 开始增加</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(Sp, <span class="number">10</span>) : <span class="comment"># 同上</span></span><br><span class="line">    <span class="built_in">print</span>(i, x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 特有的操作</span></span><br><span class="line"><span class="comment"># append(x)     末尾增加一个 x</span></span><br><span class="line"><span class="comment"># insert(index, x)  index 插入 x     </span></span><br><span class="line"><span class="comment"># clear()       清空</span></span><br><span class="line"><span class="comment"># pop(index)    删除 index 位置的元素</span></span><br><span class="line"><span class="comment"># remove(x)     移除第一个出现的 x</span></span><br><span class="line"><span class="comment"># reverse()     反转</span></span><br><span class="line"><span class="comment"># copy()        拷贝所有元素 生成一个新的列表</span></span><br><span class="line"></span><br><span class="line">lt = []</span><br><span class="line">lt.append(<span class="number">1</span>)</span><br><span class="line">lt.append(<span class="number">3</span>)</span><br><span class="line">lt.append(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(lt)</span><br><span class="line">lt.insert(<span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(lt)</span><br><span class="line"><span class="comment"># lt.remove(0) # not in 会 error</span></span><br><span class="line">lt.remove(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(lt)</span><br><span class="line">lt.pop(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(lt)</span><br><span class="line"></span><br><span class="line">nlt = lt.copy()</span><br><span class="line">lt.clear()</span><br><span class="line"><span class="comment"># id(x) 获取地址</span></span><br><span class="line"><span class="built_in">print</span>(lt, <span class="built_in">id</span>(lt)) <span class="comment"># id 与 下面的不同</span></span><br><span class="line"><span class="built_in">print</span>(nlt, <span class="built_in">id</span>(nlt)) <span class="comment"># </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># sort 不会产生新的列表对象</span></span><br><span class="line"><span class="comment"># list.sort(key = None, reverse = False) 排序方法, 默认升序</span></span><br><span class="line"><span class="built_in">print</span>(nlt, <span class="built_in">id</span>(nlt))</span><br><span class="line">nlt.sort()</span><br><span class="line"><span class="built_in">print</span>(nlt)</span><br><span class="line"><span class="built_in">print</span>(nlt, <span class="built_in">id</span>(nlt))</span><br><span class="line"></span><br><span class="line">nlt.sort(reverse = <span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(nlt)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sorted 外部函数 返回排序的列表 原表不会变化</span></span><br><span class="line"><span class="comment"># sorted(iterable, key = None, reverse = False) # 排序对象， 排序方法， 是否倒序（默认False）</span></span><br><span class="line">NLT = <span class="built_in">sorted</span>(nlt)</span><br><span class="line"><span class="built_in">print</span>(nlt)</span><br><span class="line"><span class="built_in">print</span>(NLT)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># 列表生成</span></span><br><span class="line"><span class="comment"># lstname = [expression for item in range]</span></span><br><span class="line"><span class="comment"># lstname = [expression for item in range if condition]</span></span><br><span class="line"></span><br><span class="line">lst = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(lst) <span class="comment"># 99 以内的平方数</span></span><br><span class="line">lst = [random.randint(<span class="number">1</span>, <span class="number">100</span>) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)] </span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line">lst = [random.randint(<span class="number">1</span>, <span class="number">100</span>) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>] <span class="comment"># 当 condition 满足时才生成数</span></span><br><span class="line"><span class="built_in">print</span>(lst)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 二维列表</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">lst = [</span></span><br><span class="line"><span class="string">    [],</span></span><br><span class="line"><span class="string">    [],</span></span><br><span class="line"><span class="string">    [],</span></span><br><span class="line"><span class="string">    []</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">LST = [</span><br><span class="line">    [<span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;1&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;9&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;1&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;8&#x27;</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(LST)</span><br><span class="line"><span class="comment"># for_each</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> LST :</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> row :</span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>) :</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        <span class="built_in">print</span>(LST[i][j])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二维列表生成</span></span><br><span class="line"><span class="comment"># lst = [[... 同 一维] for item in range if condition]</span></span><br><span class="line">LST = [[i * j <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(LST)</span><br></pre></td></tr></table></figure><h2 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不可变序列 tuple</span></span><br><span class="line"><span class="comment"># dataname = (element1, ..., elementn)</span></span><br><span class="line"><span class="comment"># dataname = tuple()</span></span><br><span class="line"></span><br><span class="line">tp = (<span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;T&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(tp)</span><br><span class="line"></span><br><span class="line">S = [<span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;T&#x27;</span>]</span><br><span class="line">tp = <span class="built_in">tuple</span>(S)</span><br><span class="line"><span class="built_in">print</span>(tp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列共有操作</span></span><br><span class="line"><span class="built_in">print</span>(tp.count(<span class="string">&#x27;S&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(tp.index(<span class="string">&#x27;C&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(tp))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(tp))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(tp))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;S&#x27;</span> <span class="keyword">in</span> tp)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;S&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> tp)</span><br><span class="line"><span class="comment">#del tp # delete tp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># support [ : : ] </span></span><br><span class="line"><span class="built_in">print</span>(tp[<span class="number">0</span> : <span class="built_in">len</span>(tp) : <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># for_each</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tp)) :</span><br><span class="line">    <span class="built_in">print</span>(tp[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> tp :</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(tp, start = <span class="number">10</span>) :</span><br><span class="line">    <span class="built_in">print</span>(i, x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> tp</span><br><span class="line"></span><br><span class="line"><span class="comment"># tuple 生成</span></span><br><span class="line">tp = <span class="built_in">tuple</span>((i * i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))) <span class="comment"># 内部第一个() 表示生成 第二个()用 tuple() 转换为tuple</span></span><br><span class="line"><span class="built_in">print</span>(tp)</span><br></pre></td></tr></table></figure><h2 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dataname = &#123;key1 : value1, ..., keyn : valuen&#125;</span></span><br><span class="line"><span class="comment"># dataname = dict(key1 = value1, ..., keyn = valuen)</span></span><br><span class="line"><span class="comment"># dataname = dict(zip(lst1, lst2)) </span></span><br><span class="line"><span class="comment"># key 要求是不可变类型 list 不行 tuple 可， int, float, string 可</span></span><br><span class="line"></span><br><span class="line">dc = &#123;<span class="number">1</span> : <span class="string">&#x27;S&#x27;</span>, <span class="number">9</span> : <span class="string">&#x27;C&#x27;</span>, <span class="number">1</span> : <span class="string">&#x27;U&#x27;</span>, <span class="number">8</span> : <span class="string">&#x27;T&#x27;</span>&#125; <span class="comment"># 同 key 后面的把前面覆盖</span></span><br><span class="line"><span class="built_in">print</span>(dc)</span><br><span class="line"></span><br><span class="line">Sc = [<span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;T&#x27;</span>]</span><br><span class="line">Ti = [<span class="number">1</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">8</span>]</span><br><span class="line">dc = <span class="built_in">dict</span>(<span class="built_in">zip</span>(Ti, Sc)) <span class="comment"># 覆盖同上</span></span><br><span class="line"><span class="built_in">print</span>(dc)</span><br><span class="line"></span><br><span class="line">dc = <span class="built_in">dict</span>(s = <span class="string">&#x27;S&#x27;</span>, c = <span class="string">&#x27;C&#x27;</span>, u = <span class="string">&#x27;U&#x27;</span>, t = <span class="string">&#x27;T&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(dc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列公共操作 </span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(dc)) <span class="comment"># 对 Key 操作</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(dc)) </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(dc))</span><br><span class="line"><span class="comment"># del dc # 删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dict 访问</span></span><br><span class="line"><span class="comment"># dataname[key] 如果 key 不存在 KeyError </span></span><br><span class="line"><span class="comment"># dataname.get(key, value)    如果 key 不存在 返回 value </span></span><br><span class="line"><span class="built_in">print</span>(dc.get(<span class="string">&#x27;s&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(dc.get(<span class="string">&#x27;g&#x27;</span>)) <span class="comment"># None</span></span><br><span class="line"><span class="built_in">print</span>(dc.get(<span class="string">&#x27;g&#x27;</span>, <span class="string">&quot;Not find&quot;</span>)) <span class="comment"># None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dc[<span class="string">&#x27;s&#x27;</span>])</span><br><span class="line"><span class="comment"># print(dc[&#x27;g&#x27;]) # wrong</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># for_each</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> dc :   <span class="comment"># for_each key</span></span><br><span class="line">    <span class="built_in">print</span>(x) </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> dc.items() : <span class="comment"># for_each (key, value)   x is tuple</span></span><br><span class="line">    <span class="built_in">print</span>(x) </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> dc.items() : <span class="comment"># split tuple in key and value</span></span><br><span class="line">    <span class="built_in">print</span>(key, <span class="string">&quot;-&gt;&quot;</span>, value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, key <span class="keyword">in</span> <span class="built_in">enumerate</span>(dc, <span class="number">10</span>) :</span><br><span class="line">    <span class="built_in">print</span>(i, key)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, key_value <span class="keyword">in</span> <span class="built_in">enumerate</span>(dc.items(), <span class="number">10</span>) :</span><br><span class="line">    <span class="built_in">print</span>(i, key_value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># operation</span></span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line">dc[<span class="string">&#x27;q&#x27;</span>] = <span class="string">&#x27;Q&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dc.keys()) <span class="comment"># 获取所有 key</span></span><br><span class="line"><span class="built_in">print</span>(dc.values()) <span class="comment"># 获取所有 value</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 key</span></span><br><span class="line"><span class="built_in">print</span>(dc)</span><br><span class="line"><span class="built_in">print</span>(dc.pop(<span class="string">&#x27;s&#x27;</span>, <span class="string">&quot;默认值&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(dc.pop(<span class="string">&#x27;s&#x27;</span>, <span class="string">&quot;默认值&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(dc)</span><br><span class="line"></span><br><span class="line">dc.popitem() <span class="comment"># 随机删除 (key, value)</span></span><br><span class="line"><span class="built_in">print</span>(dc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># in </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;s&#x27;</span> <span class="keyword">in</span> dc)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;u&#x27;</span> <span class="keyword">in</span> dc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># clear</span></span><br><span class="line"><span class="comment"># dc.clear()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典生成式</span></span><br><span class="line"><span class="comment"># dataname = [key : value for ... if condition]</span></span><br><span class="line">dc = &#123;key : key * key <span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)&#125;</span><br><span class="line">dc = &#123;key : key * key <span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> key % <span class="number">2</span> == <span class="number">0</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dc)</span><br></pre></td></tr></table></figure><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create </span></span><br><span class="line"><span class="comment"># st = &#123;element1, ..., elementn&#125;</span></span><br><span class="line"><span class="comment"># 存储类型同 dict </span></span><br><span class="line">st = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ,<span class="number">4</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(st)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接用 &#123;&#125; 内容空 创建的是字典</span></span><br><span class="line"><span class="comment"># set() 创建空set</span></span><br><span class="line">st = &#123;&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(st)) <span class="comment"># st is dict</span></span><br><span class="line">st = <span class="built_in">set</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(st))</span><br><span class="line">st = &#123;<span class="string">&quot;SCUT&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(st)</span><br><span class="line">st = <span class="built_in">set</span>(<span class="string">&quot;SCUT&quot;</span>) <span class="comment"># 不同 把 字符串 当序列分割</span></span><br><span class="line"><span class="built_in">print</span>(st)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列公共操作</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(st), <span class="built_in">max</span>(st), <span class="built_in">len</span>(st), <span class="string">&#x27;S&#x27;</span> <span class="keyword">in</span> st, <span class="string">&#x27;S&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> st)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> st</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合操作</span></span><br><span class="line">Sc = <span class="built_in">set</span>(<span class="string">&quot;SCUT&quot;</span>)</span><br><span class="line">Ti = <span class="built_in">set</span>(<span class="string">&quot;1918&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Sc &amp; Ti) <span class="comment"># 交集</span></span><br><span class="line"><span class="built_in">print</span>(Sc | Ti) <span class="comment"># 并集</span></span><br><span class="line"><span class="built_in">print</span>(Sc - Ti) <span class="comment"># 差集  A &amp; (U - B)   U = A | B</span></span><br><span class="line"><span class="built_in">print</span>(Sc ^ Ti) <span class="comment"># 补集  (A | B) - (A &amp; B)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add</span></span><br><span class="line">Sc.add(<span class="string">&quot;Q&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(Sc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove</span></span><br><span class="line">Sc.remove(<span class="string">&#x27;U&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(Sc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># clear</span></span><br><span class="line"><span class="comment"># Sc.clear()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># in</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;S&#x27;</span> <span class="keyword">in</span> Sc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># for_each</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> Sc :</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(Sc, <span class="number">10</span>) :</span><br><span class="line">    <span class="built_in">print</span>(i, x)</span><br></pre></td></tr></table></figure><h2 id="string-1"><a href="#string-1" class="headerlink" title="string"></a>string</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># string 不可变类型</span></span><br><span class="line">S = <span class="string">&quot;SCUT1918&quot;</span></span><br><span class="line"><span class="comment"># S[0] = &#x27;T&#x27; # Error</span></span><br><span class="line"><span class="built_in">print</span>(S)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 支持 sequence 公共操作</span></span><br><span class="line"><span class="comment"># min, max, len</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># lower, upper</span></span><br><span class="line"><span class="built_in">print</span>(S.lower())</span><br><span class="line"><span class="built_in">print</span>(S.upper())</span><br><span class="line"></span><br><span class="line"><span class="comment"># count </span></span><br><span class="line"><span class="built_in">print</span>(S.count(<span class="string">&#x27;S&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># find</span></span><br><span class="line"><span class="built_in">print</span>(S.find(<span class="string">&#x27;S&#x27;</span>))  <span class="comment"># return index</span></span><br><span class="line"><span class="built_in">print</span>(S.find(<span class="string">&#x27;V&#x27;</span>))  <span class="comment"># not find return -1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># index</span></span><br><span class="line"><span class="built_in">print</span>(S.index(<span class="string">&#x27;S&#x27;</span>))  <span class="comment"># return index</span></span><br><span class="line"><span class="comment"># print(S.index(&#x27;V&#x27;))  # Error</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># startwiths(x)  是否以 x 开头 </span></span><br><span class="line"><span class="built_in">print</span>(S.startswith(<span class="string">&quot;SCUT&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># endswith(x) 是否以 x 结尾</span></span><br><span class="line"><span class="built_in">print</span>(S.endswith(<span class="string">&quot;1918&quot;</span>))</span><br><span class="line"></span><br><span class="line">Sc = <span class="string">&quot;SCUT&quot;</span></span><br><span class="line">Ti = <span class="number">1918</span></span><br><span class="line">Va = <span class="number">10.0</span></span><br><span class="line"><span class="comment"># 格式化字符串</span></span><br><span class="line"><span class="comment"># 一 占位符</span></span><br><span class="line"><span class="comment"># %s string</span></span><br><span class="line"><span class="comment"># %d digit</span></span><br><span class="line"><span class="comment"># %f float</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;School %s Time %d Value %f&quot;</span> % (<span class="string">&quot;SCUT&quot;</span>, <span class="number">1918</span>, <span class="number">0.0</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;School %s Time %d Value %f&quot;</span> % (Sc, Ti, Va))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二 f-string</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;Sc&#125;</span> <span class="subst">&#123;Ti&#125;</span> <span class="subst">&#123;Va&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 三 dataname.format</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125; &#123;1&#125; &#123;2&#125;&quot;</span>.<span class="built_in">format</span>(Sc, Ti, Va))</span><br></pre></td></tr></table></figure><h1 id="function"><a href="#function" class="headerlink" title="function"></a>function</h1><h2 id="basic"><a href="#basic" class="headerlink" title="basic"></a>basic</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># def 定义</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>) -&gt; <span class="built_in">int</span> :</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">0</span> :</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>) :</span><br><span class="line">    <span class="built_in">print</span>(fib(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n = <span class="number">0</span></span>) :</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">0</span> :</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>) :</span><br><span class="line">    <span class="built_in">print</span>(fib(i))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 个数可变的参数 在参数前加 * 表示可变参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_type</span>(<span class="params">*data</span>) :</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(data)) <span class="comment"># 可变参数 形成 tuple</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> data :</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">type</span>(x))</span><br><span class="line"></span><br><span class="line">get_type(<span class="number">1918</span>, <span class="string">&quot;SCUT&quot;</span>, <span class="number">100.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表当参数</span></span><br><span class="line">get_type([<span class="number">1918</span>, <span class="string">&quot;SCUT&quot;</span>, <span class="number">100.0</span>])</span><br><span class="line"><span class="comment"># 列表内容当参数 在列表前加 *</span></span><br><span class="line">get_type(*[<span class="number">1918</span>, <span class="string">&quot;SCUT&quot;</span>, <span class="number">100.0</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 个数可变的关键字参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">**para</span>) :</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(para)) <span class="comment"># 可变参数 形成 tuple</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> para.items() :</span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">get(School = <span class="string">&quot;SCUT&quot;</span>, Time = <span class="number">1918</span>, Value = <span class="number">100.0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># return -&gt; type</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lambda 参数列表 : 表达式</span></span><br><span class="line">fc = <span class="keyword">lambda</span> a, b : a + b</span><br><span class="line"><span class="built_in">print</span>(fc(<span class="number">19</span>, <span class="number">18</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串 整数 元组 不可变类型 值传递</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表 字典 集合 可变类型 引用传递</span></span><br></pre></td></tr></table></figure><h2 id="some-useful-function"><a href="#some-useful-function" class="headerlink" title="some useful function"></a>some useful function</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pow</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(<span class="number">10</span>, <span class="number">100</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># sum</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>([<span class="number">1</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">8</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># round 四舍五入</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(<span class="number">9.4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(<span class="number">9.5</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
          <category> Languages </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java</title>
      <link href="/2023/12/19/Learning/Languages/Java/"/>
      <url>/2023/12/19/Learning/Languages/Java/</url>
      
        <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>基本和 $C++$ 一样</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>;</span><br><span class="line"><span class="type">long</span>;</span><br><span class="line"><span class="type">short</span>;</span><br><span class="line"><span class="type">float</span>;</span><br><span class="line"><span class="type">double</span>;</span><br><span class="line"><span class="type">byte</span>;</span><br><span class="line"><span class="type">boolean</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="comment">// = C++ const</span></span><br></pre></td></tr></table></figure><h2 id="循环-条件"><a href="#循环-条件" class="headerlink" title="循环 &amp; 条件"></a>循环 &amp; 条件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//和 C++ 一样</span></span><br><span class="line"><span class="keyword">while</span>;</span><br><span class="line"><span class="keyword">do</span>-<span class="keyword">while</span>;</span><br><span class="line"><span class="keyword">for</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>-<span class="keyword">else</span>;</span><br><span class="line"><span class="keyword">switch</span>;</span><br></pre></td></tr></table></figure><h2 id="函数-function"><a href="#函数-function" class="headerlink" title="函数 $(function)$"></a>函数 $(function)$</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title function_">function_name</span> <span class="params">(parameters)</span> &#123;</span><br><span class="line"><span class="comment">//implement   </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重载 同 C++</span></span><br></pre></td></tr></table></figure><h2 id="基础类"><a href="#基础类" class="headerlink" title="基础类"></a>基础类</h2><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">abs(); <span class="comment">// 绝对值</span></span><br><span class="line">ceil(); <span class="comment">// 向上取整</span></span><br><span class="line">floor(); <span class="comment">// 向下取整</span></span><br><span class="line">round(); <span class="comment">// 四舍五入</span></span><br><span class="line">max();</span><br><span class="line">min();</span><br><span class="line">pow();</span><br><span class="line">log();</span><br><span class="line">sin();</span><br><span class="line">cos();</span><br><span class="line">sqrt();</span><br><span class="line">atan();</span><br><span class="line">atan2();</span><br><span class="line">random();</span><br></pre></td></tr></table></figure><h3 id="Character"><a href="#Character" class="headerlink" title="Character"></a>Character</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">isLetter();</span><br><span class="line">isDigit();</span><br><span class="line">isUpperCase();</span><br><span class="line">isLowerCase();</span><br><span class="line">toUpperCase();</span><br><span class="line">toLowerCase();</span><br><span class="line">toString();</span><br></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">charAt(index); <span class="comment">//return s[index]</span></span><br><span class="line">concat(str); <span class="comment">// append str to s</span></span><br><span class="line">equals(); <span class="comment">// == is incorrect!!!</span></span><br><span class="line">length();</span><br><span class="line">toUpperCase();</span><br><span class="line">toLowerCase();</span><br></pre></td></tr></table></figure><h3 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">append(str);</span><br><span class="line">reverse();</span><br><span class="line">delete(l, r); <span class="comment">// delete s[l - r]</span></span><br><span class="line">replace(l, r, str); <span class="comment">//replace s[l - r] with str </span></span><br></pre></td></tr></table></figure><h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><h3 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line"><span class="type">int</span> <span class="variable">dataname</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line"><span class="type">long</span> <span class="variable">dataname</span> <span class="operator">=</span> input.nextLong();</span><br><span class="line"><span class="type">short</span> <span class="variable">dataname</span> <span class="operator">=</span> input.nextShort();</span><br><span class="line"><span class="type">float</span> <span class="variable">dataname</span> <span class="operator">=</span> input.nextFloat();</span><br><span class="line"><span class="type">double</span> <span class="variable">dataname</span> <span class="operator">=</span> input.nextDouble();</span><br><span class="line"><span class="type">byte</span> <span class="variable">dataname</span> <span class="operator">=</span> input.nextByte();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">dataname</span> <span class="operator">=</span> input.nextBoolean();</span><br><span class="line"><span class="type">String</span> <span class="variable">dataname</span> <span class="operator">=</span> input.next();<span class="comment">//read a string</span></span><br><span class="line"><span class="type">String</span> <span class="variable">dataname</span> <span class="operator">=</span> input.nextLine();<span class="comment">//read a line</span></span><br></pre></td></tr></table></figure><h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(dataname); <span class="comment">// endl</span></span><br><span class="line">System.out.print(dataname); <span class="comment">// no endl</span></span><br></pre></td></tr></table></figure><h1 id="类-class"><a href="#类-class" class="headerlink" title="类 $(class)$"></a>类 $(class)$</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同 C++</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造 同 C++</span></span><br></pre></td></tr></table></figure><h2 id="继承-Inheritance"><a href="#继承-Inheritance" class="headerlink" title="继承 $(Inheritance)$"></a>继承 $(Inheritance)$</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extends</span> <span class="title class_">classname</span><span class="comment">// 表示继承 classname</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类不会自动调用父类构造函数！！！ </span></span><br><span class="line"><span class="built_in">super</span>(parameters); <span class="comment">//调用父类构造函数！！！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// java 不支持多继承 即一个类只能继承一个类，不能继承多个类</span></span><br></pre></td></tr></table></figure><h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数列表与被重写方法的参数列表必须完全相同</span></span><br><span class="line"><span class="comment">//构造方法不能被重写</span></span><br><span class="line"><span class="comment">//如果不能继承一个类，则不能重写该类的方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;<span class="comment">//Overload</span></span><br><span class="line">        <span class="comment">//implement</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多态-Polymorphism"><a href="#多态-Polymorphism" class="headerlink" title="多态 $(Polymorphism)$"></a>多态 $(Polymorphism)$</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承</span></span><br><span class="line"><span class="comment">//重写</span></span><br><span class="line"><span class="comment">//父类引用子类对象 </span></span><br><span class="line"><span class="type">Parent</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//同 C++</span></span><br></pre></td></tr></table></figure><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">catch</span>(ExceptionName var_name1) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">catch</span>(ExceptionName var_name2) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"> </span><br><span class="line"><span class="keyword">throws</span> ExceptionName;<span class="comment">//抛出异常</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span> &#123; <span class="comment">//无论是否异常 finally 内的语句 总会被执行</span></span><br><span class="line">    <span class="comment">//code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="I-O"><a href="#I-O" class="headerlink" title="$I &#x2F; O$"></a>$I &#x2F; O$</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//to do</span></span><br></pre></td></tr></table></figure><h1 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ArrayList;</span><br><span class="line"><span class="comment">// 操作</span></span><br><span class="line">size(); <span class="comment">//</span></span><br><span class="line">sort(); <span class="comment">// sort</span></span><br><span class="line">add(x); <span class="comment">// = append(x)</span></span><br><span class="line">remove(index); <span class="comment">// remove list[index]</span></span><br><span class="line"></span><br><span class="line">get(index); <span class="comment">// = list[index]</span></span><br><span class="line">set(index, x); <span class="comment">// set list[index] = x</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// T</span></span><br><span class="line">Integer;</span><br><span class="line">Double;</span><br><span class="line">Long;</span><br><span class="line">Short;</span><br><span class="line">String;</span><br><span class="line">Boolean;</span><br></pre></td></tr></table></figure><h1 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">add();<span class="comment">//</span></span><br><span class="line">remove(x);</span><br><span class="line">contains(x);<span class="comment">// 是否包含x</span></span><br><span class="line"></span><br><span class="line">size();</span><br><span class="line">clear();</span><br><span class="line">clone();</span><br><span class="line">isEmpty();</span><br></pre></td></tr></table></figure><h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">size();</span><br><span class="line">clear();</span><br><span class="line">clone();</span><br><span class="line">isEmpty();</span><br><span class="line"></span><br><span class="line">get(key);</span><br><span class="line">put(key, value);</span><br><span class="line"></span><br><span class="line">remove(key);</span><br><span class="line">replace(key, new_value);</span><br><span class="line"></span><br><span class="line">containsKey(); <span class="literal">true</span> / <span class="literal">false</span></span><br><span class="line"><span class="title function_">containsValue</span><span class="params">()</span>; <span class="literal">true</span> / <span class="literal">false</span></span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>一天速通 $Java$ 考试 。</p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
          <category> Languages </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown</title>
      <link href="/2023/12/13/Learning/Markdown/Markdown/"/>
      <url>/2023/12/13/Learning/Markdown/Markdown/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Markdown/1.gif" alt="1"></p><p><img src="/images/Markdown/2.gif" alt="2"></p><p><img src="/images/Markdown/3.gif" alt="3"></p><p><img src="/images/Markdown/4.gif" alt="4"></p><p><img src="/images/Markdown/5.gif" alt="5"></p><p><img src="/images/Markdown/6.gif" alt="6"></p><p><img src="/images/Markdown/7.gif" alt="7"></p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Discrete mathematics</title>
      <link href="/2023/12/12/Learning/Course/Discrete%20mathematics/"/>
      <url>/2023/12/12/Learning/Course/Discrete%20mathematics/</url>
      
        <content type="html"><![CDATA[<h1 id="逻辑和证明"><a href="#逻辑和证明" class="headerlink" title="逻辑和证明"></a>逻辑和证明</h1><h2 id="命题逻辑"><a href="#命题逻辑" class="headerlink" title="命题逻辑"></a>命题逻辑</h2><h3 id="命题（-proposition-）"><a href="#命题（-proposition-）" class="headerlink" title="命题（$proposition$）"></a>命题（$proposition$）</h3><p>命题是一个陈述语句（即陈述事实的语句），它或真或假，但不能既真又假。</p><h3 id="条件（-implies-）"><a href="#条件（-implies-）" class="headerlink" title="条件（$implies$）"></a>条件（$implies$）</h3><p>令 $p$ 和 $q$ 为命题。条件语句 $p \rightarrow q$ 是命题“如果 $p$，则 $q$ ”。当 $p$ 为真而 $q$ 为假时，条件语句 $p \rightarrow q$ 为假，否则为真。在条件语句 $p \rightarrow q$ 中，$p$ 称为假设(前件、前提)，$q$ 称为结论(后件)。</p><table><thead><tr><th align="center">$p$</th><th align="center">$q$</th><th align="center">$p \rightarrow  q$</th></tr></thead><tbody><tr><td align="center">T</td><td align="center">T</td><td align="center">T</td></tr><tr><td align="center">T</td><td align="center">F</td><td align="center">F</td></tr><tr><td align="center">F</td><td align="center">T</td><td align="center">T</td></tr><tr><td align="center">F</td><td align="center">F</td><td align="center">T</td></tr></tbody></table><p>原命题：$p \rightarrow q$</p><p>逆命题（$converse$）：$q \rightarrow p$ </p><p>逆否命题（$contrapositive$）：$\neg q \rightarrow \neg p$ </p><p>反命题（$inverse$）：$\neg p \rightarrow \neg q$</p><h3 id="双条件（-biconditional-）"><a href="#双条件（-biconditional-）" class="headerlink" title="双条件（$biconditional$）"></a>双条件（$biconditional$）</h3><p>令 $p$ 和 $q$ 为命题。双条件语句 $p \leftrightarrow q$ 是命题“ $p$ 当且仅当 $q$ ”。当 $p$ 和 $q$ 有同样的真值时，双条件语句为真，否则为假。双条件语句也称为双向蕴含。</p><table><thead><tr><th align="center">$p$</th><th align="center">$q$</th><th align="center">$p \leftrightarrow q$</th></tr></thead><tbody><tr><td align="center">T</td><td align="center">T</td><td align="center">T</td></tr><tr><td align="center">T</td><td align="center">F</td><td align="center">F</td></tr><tr><td align="center">F</td><td align="center">T</td><td align="center">F</td></tr><tr><td align="center">F</td><td align="center">F</td><td align="center">T</td></tr></tbody></table><h3 id="逻辑运算符的优先级"><a href="#逻辑运算符的优先级" class="headerlink" title="逻辑运算符的优先级"></a>逻辑运算符的优先级</h3><table><thead><tr><th align="center">运算符</th><th align="center">优先级</th></tr></thead><tbody><tr><td align="center">$\neg$</td><td align="center">1</td></tr><tr><td align="center">$\wedge$</td><td align="center">2</td></tr><tr><td align="center">$\vee$</td><td align="center">3</td></tr><tr><td align="center">$\rightarrow$</td><td align="center">4</td></tr><tr><td align="center">$\leftrightarrow$</td><td align="center">5</td></tr></tbody></table><h3 id="永真式（重言式）-矛盾式-可能式"><a href="#永真式（重言式）-矛盾式-可能式" class="headerlink" title="永真式（重言式） &amp; 矛盾式 &amp;可能式"></a>永真式（重言式） &amp; 矛盾式 &amp;可能式</h3><p><strong>永真式</strong>（$tautology$）：一个真值永远是真的复合命题（无论其中出现的命题变元的真值是什么），也称为<strong>重言式</strong>。</p><p><strong>矛盾式</strong>（$contradiction$）：一个真值永远为假的复合命题。</p><p><strong>可能式</strong>（$contingency$）：既不是永真式又不是矛盾式的复合命题。</p><h2 id="命题等价式（-equivalent-）"><a href="#命题等价式（-equivalent-）" class="headerlink" title="命题等价式（$equivalent$）"></a>命题等价式（$equivalent$）</h2><h3 id="逻辑等价式"><a href="#逻辑等价式" class="headerlink" title="逻辑等价式"></a>逻辑等价式</h3><p>如果 $p \leftrightarrow q$ 是永真式，则复合命题 $p$ 和 $q$ 称为是逻辑等价的。用记号 $p \equiv q$ 表示 $p$ 和 $q$ 是逻辑等价的。</p><h2 id="谓词（-predicate-）与量词（-quantifier-）"><a href="#谓词（-predicate-）与量词（-quantifier-）" class="headerlink" title="谓词（$predicate$）与量词（$quantifier$）"></a>谓词（$predicate$）与量词（$quantifier$）</h2><h3 id="全称量化"><a href="#全称量化" class="headerlink" title="全称量化"></a>全称量化</h3><p>$P(x)$ 的全称量化是语句：“ $P(x)$ 对 $x$ 在其论域的所有值为真。”</p><p>符号 $\forall x P(x)$ 表示 $P(x)$ 的全称量化，其中 $\forall$ 称为全称量词。</p><p>命题 $\forall x P(x)$ 读做“对所有 $x$ , $P(x)$ ”或“对每个 $x$ ，$P(x)$”。一个使 $P(x)$ 为假的个体称为 $\forall x P(x)$ 的<strong>反例</strong>。</p><h3 id="存在量化"><a href="#存在量化" class="headerlink" title="存在量化"></a>存在量化</h3><p>$P(x)$ 的存在量化是语句：“论域中存在一个个体 $x$ 满足 $P(x)$ 。”</p><p>符号 $\exists x P(x)$ 表示 $P(x)$ 的存在量化，其中 $\exists$ 称为存在量词。</p><h3 id="量词优先级"><a href="#量词优先级" class="headerlink" title="量词优先级"></a>量词优先级</h3><p>$\forall &gt; \exists$</p><p><strong>注意</strong></p><p>$\forall x P(x) \vee Q(x)$ 是 $\forall x P(x)$ 和 $Q(x)$ 的析取</p><p>$\forall x (P(x) \vee Q(x))$ 是 $\forall x$ 对 $(P(x) \vee Q(x))$ 的析取</p><h3 id="涉及量词的逻辑等价式"><a href="#涉及量词的逻辑等价式" class="headerlink" title="涉及量词的逻辑等价式"></a>涉及量词的逻辑等价式</h3><p>涉及谓词和量词的语句是逻辑等价的当且仅当无论用什么谓词代入这些语句，也无论为这些命题函数里的变量指定什么论域，它们都有相同的真值。我们用 $S \equiv T$ 表示涉及谓词和量词的两个语句 $S$ 和 $T$ 是逻辑等价的。</p><p><strong>证明两个语句逻辑等价</strong> $P(x) \equiv Q(x)$</p><ol><li>$(P(x) &#x3D; T) \rightarrow (Q(x) &#x3D; T)$</li><li>$(Q(x) &#x3D; T) \rightarrow (P(x) &#x3D; T)$</li><li>$P(x) \equiv Q(x)$</li></ol><h3 id="量词的否定（德-cdot-摩根律）"><a href="#量词的否定（德-cdot-摩根律）" class="headerlink" title="量词的否定（德 $\cdot$ 摩根律）"></a>量词的否定（德 $\cdot$ 摩根律）</h3><table><thead><tr><th align="center">否定</th><th align="center">等价语句</th></tr></thead><tbody><tr><td align="center">$\neg \exists x P(x)$</td><td align="center">$\forall x \neg P(x)$</td></tr><tr><td align="center">$\neg \forall x P(x)$</td><td align="center">$\exists x \neg P(x)$</td></tr></tbody></table><h2 id="推理规则（-rule-of-inference-）"><a href="#推理规则（-rule-of-inference-）" class="headerlink" title="推理规则（$rule \ of \ inference$）"></a>推理规则（$rule \ of \ inference$）</h2><table><thead><tr><th align="left">推理规则</th><th align="center">永真式</th><th align="center">名称</th></tr></thead><tbody><tr><td align="left">$\quad p$<br>$\quad p \rightarrow q$<br>$\therefore q$</td><td align="center">$(p \wedge (p \rightarrow q)) \rightarrow q$</td><td align="center">假言推理</td></tr><tr><td align="left">$\quad \neg q$<br>$\quad p \rightarrow q$<br>$\therefore \neg p$</td><td align="center">$(\neg q \wedge (p \rightarrow q)) \rightarrow \neg p$</td><td align="center">取拒式</td></tr><tr><td align="left">$\quad p \rightarrow q$<br>$\quad q \rightarrow r$<br>$\therefore p \rightarrow r$</td><td align="center">$((p \rightarrow q) \wedge (q \rightarrow r)) \rightarrow (p \rightarrow r)$</td><td align="center">假言三段论</td></tr><tr><td align="left">$\quad p \vee q$<br>$\quad \neg p$<br>$\therefore q$</td><td align="center">$((p \vee q) \wedge \neg p) \rightarrow q$</td><td align="center">析取三段论</td></tr><tr><td align="left">$\quad p$<br>$\therefore p \vee q$</td><td align="center">$p \rightarrow (p \vee q)$</td><td align="center">附加律</td></tr><tr><td align="left">$\quad p \wedge q$<br>$\therefore p$</td><td align="center">$(p \wedge q) \rightarrow p$</td><td align="center">化简律</td></tr><tr><td align="left">$\quad p$<br>$\quad q$<br>$\therefore p \wedge q$</td><td align="center">$((p) \wedge (q)) \rightarrow (p \wedge q)$</td><td align="center">合取律</td></tr><tr><td align="left">$\quad p \vee q$<br>$\quad \neg p \vee r$<br>$\therefore q \vee r$</td><td align="center">$((p \vee q) \wedge (\neg p \vee r)) \rightarrow (q \vee r)$</td><td align="center">消解律</td></tr></tbody></table><p><strong>格式</strong></p><table><thead><tr><th align="center">步骤</th><th align="center">理由</th></tr></thead><tbody><tr><td align="center">1.表达式</td><td align="center">前提引入</td></tr><tr><td align="center">2.结论式</td><td align="center">XX律，用XX步</td></tr></tbody></table><p><strong>一次一条结论， 不可跳步骤</strong></p><p><strong>量化命题的推理规则</strong></p><table><thead><tr><th align="left">推理规则</th><th align="center">名称</th></tr></thead><tbody><tr><td align="left">$\quad \forall x P(x)$<br>$\therefore P(c)$</td><td align="center">全称实例</td></tr><tr><td align="left">$\quad P(c)$，任意 $c$<br>$\therefore \forall x P(x)$</td><td align="center">全称引入</td></tr><tr><td align="left">$\quad \exists x P(x)$<br>$\therefore P(c)$，对某个元素 $c$</td><td align="center">存在实例</td></tr><tr><td align="left">$\quad P(c)$，对某个元素 $c$<br>$\therefore \exists x P(x)$</td><td align="center">存在引入</td></tr></tbody></table><h2 id="推理表"><a href="#推理表" class="headerlink" title="推理表"></a>推理表</h2><p><img src="/images/Discretemathematics/expressions_page_one.jpg" alt="expressions_page_one"></p><p><img src="/images/Discretemathematics/expression_page_two.jpg" alt="expression_page_two"></p><h1 id="集合、函数"><a href="#集合、函数" class="headerlink" title="集合、函数"></a>集合、函数</h1><h2 id="集合（-set-）"><a href="#集合（-set-）" class="headerlink" title="集合（$set$）"></a>集合（$set$）</h2><p>集合是对象的一个无序的聚集，对象也称为集合的元素（element）或成员（member）。集合包含（contain）它的元素。我们用 $a \in A$ 来表示 $a$ 是集合 $A$ 中一个元素。而记号 $a \notin A$ 表示 $a$ 不是集合 $A$ 中的一个元素。</p><p><strong>证明集合相等</strong> （$A &#x3D; B$）</p><ol><li>$A \subseteq B$</li><li>$B \subseteq A$</li><li>$A &#x3D; B$</li></ol><h3 id="集合的大小"><a href="#集合的大小" class="headerlink" title="集合的大小"></a>集合的大小</h3><p>$|S|$ 表示集合的大小</p><h3 id="幂集（-power-set-）"><a href="#幂集（-power-set-）" class="headerlink" title="幂集（$power \ set$）"></a>幂集（$power \ set$）</h3><p>给定集合 $S$，$S$ 的幂集（$power \ set$）是集合 $S$ 所有子集的集合。$S$ 的幂集记为 $\mathcal{P} (S)$</p><h3 id="笛卡尔积（-Cartesian-product-）"><a href="#笛卡尔积（-Cartesian-product-）" class="headerlink" title="笛卡尔积（$Cartesian \ product$）"></a>笛卡尔积（$Cartesian \ product$）</h3><p>令 $A$ 和 $B$ 为集合。$A$ 和 $B$ 的笛卡儿积（$Cartesian \ product$）用 $A \times B$ 表示，是所有序偶 $(a, b)$ 的集合，其中 $a \in A, b \in B$。于是，$A \times B &#x3D; {(a, b) | a \in A \wedge b \in B }$</p><h2 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h2><p>$A \cup B &#x3D; \lbrace x | x \in A \vee x \in B \rbrace$</p><p>$A \cap B &#x3D; \lbrace x | x \in A \wedge x \in B \rbrace$</p><p>$A - B &#x3D; \lbrace x | x \in A \wedge x \notin B \rbrace &#x3D; A \cap \overline{B}$</p><p>$\overline{A} \quad \quad &#x3D; \lbrace x | x \in U \wedge x \notin A \rbrace$</p><h3 id="集合恒等式"><a href="#集合恒等式" class="headerlink" title="集合恒等式"></a>集合恒等式</h3><table><thead><tr><th align="left">恒等式</th><th align="center">名称</th></tr></thead><tbody><tr><td align="left">$A \cap U &#x3D; A$<br>$A \cup \varnothing &#x3D; A$</td><td align="center">恒等律</td></tr><tr><td align="left">$A \cup U &#x3D; U$<br>$A \cap \varnothing &#x3D; \varnothing $</td><td align="center">支配律</td></tr><tr><td align="left">$A \cup A &#x3D; A$<br>$A \cap A &#x3D; A$</td><td align="center">幂等律</td></tr><tr><td align="left">$\overline{(\overline{A})} &#x3D; A$</td><td align="center">补律</td></tr><tr><td align="left">$A \cup B &#x3D; B \cup A$<br>$A \cap B &#x3D; B \cap A$</td><td align="center">交换律</td></tr><tr><td align="left">$A \cup (B \cup C) &#x3D; (A \cup B) \cup C$<br>$A \cap (B \cap C) &#x3D; (A \cap B) \cap C$</td><td align="center">结合律</td></tr><tr><td align="left">$A \cup (B \cap C) &#x3D; (A \cup B) \cap (A \cup C)$<br>$A \cap (B \cup C) &#x3D; (A \cap B) \cup (A \cap C)$</td><td align="center">分配律</td></tr><tr><td align="left">$\overline{A \cap B} &#x3D; \overline{A} \cup \overline{B}$<br>$\overline{A \cup B} &#x3D; \overline{A} \cap \overline{B}$</td><td align="center">德 $\cdot$ 摩根律</td></tr><tr><td align="left">$A \cup (A \cap B) &#x3D; A$<br>$A \cap (A \cup B) &#x3D; A$</td><td align="center">吸收律</td></tr><tr><td align="left">$A \cup \overline{A} &#x3D; U$<br>$A \cap \overline{A} &#x3D; \varnothing$</td><td align="center">互补律</td></tr></tbody></table><h3 id="扩展并集和交集"><a href="#扩展并集和交集" class="headerlink" title="扩展并集和交集"></a>扩展并集和交集</h3><p>$\bigcup\limits_{i &#x3D; 1}^{n} A_{i} &#x3D; A_{1} \cup A_{2} \cup \cdot \cdot \cdot \cup A_{n}$</p><p>$\bigcap\limits_{i &#x3D; 1}^{n} A_{i} &#x3D; A_{1} \cap A_{2} \cap \cdot \cdot \cdot \cap A_{n}$</p><p>$\overline{\bigcup\limits_{i &#x3D; 1}^{n} A_{i}} &#x3D; \overline{A_{1}} \cap \overline{A_{2}} \cap \cdot \cdot \cdot \cap \overline{A_{n}}$</p><p>$\overline{\bigcap\limits_{i &#x3D; 1}^{n} A_{i}} &#x3D; \overline{A_{1}} \cup \overline{A_{2}} \cup \cdot \cdot \cdot \cup \overline{A_{n}}$</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="一对一-（单射）"><a href="#一对一-（单射）" class="headerlink" title="一对一 （单射）"></a>一对一 （单射）</h3><p>函数 $f$ 称为是一对一（$one-to-one$）或单射函数（$injection$），当且仅当对于 $f$ 的定义域中的所有 $a$ 和 $b$ 有 $f(a)&#x3D;f(b)$ 蕴含 $a &#x3D; b$。一个函数如果是一对一的，就称为是单射的（$injective$）。</p><p><img src="/images/Discretemathematics/one-to-one.png" alt="one-to-one"></p><h3 id="映上（满射）"><a href="#映上（满射）" class="headerlink" title="映上（满射）"></a>映上（满射）</h3><p>一个从 $A$ 到 $B$ 的函数 $f$ 称为映上（$onto$）或满射（$surjection$）函数，当且仅当对每个 $b \in B$ 有元素 $a \in A$ 使得 $f(a)&#x3D;b$。一个函数如果是映上的就称为是满射的（$surjective$）。</p><p><img src="/images/Discretemathematics/onto.png" alt="onto"></p><h3 id="一一对应（双射）"><a href="#一一对应（双射）" class="headerlink" title="一一对应（双射）"></a>一一对应（双射）</h3><p>函数 $f$ 是一一对应（$one-to-one correspondance$）或双射（$bijection$）函数，如果它既是一对一的又是映上的。这样的函数称为是双射的（$bijective$）。</p><p><img src="/images/Discretemathematics/sample.png" alt="sample"></p><h3 id="合成（-composition-）"><a href="#合成（-composition-）" class="headerlink" title="合成（$composition$）"></a>合成（$composition$）</h3><p>令 $g$ 为从集合 $A$ 到集合 $B$ 的函数，$f$ 是从集合 $B$ 到集合 $C$ 的函数，函数 $f$ 和 $g$ 的合成（$composition$），记作 $f \ o \ g$，定义为对任意$a \in A \quad (f \ o \ g)(a) &#x3D; f(g(a))$</p><p><img src="/images/Discretemathematics/composition.png" alt="composition"></p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="大-O-记号"><a href="#大-O-记号" class="headerlink" title="大 $O$ 记号"></a>大 $O$ 记号</h2><p>令 $f$ 和 $g$ 为从整数集或实数集到实数集的函数。如果存在常数 $C$ 和 $k$ 使得只要当定义 $x &gt; k$ 时就有<br> $|f(x)| \le C|g(x)|$ 我们就说 $f(x)$ 是 $O(g(x))$ 的。</p><p><strong>逻辑语言</strong></p><p>$\exists C \in R^{+} \quad \exists k \in Z^{+} \quad \forall x &gt; k : f(x) \le C \times g(x)$</p><p><strong>性质</strong></p><p>$f \preceq g$</p><p>$f &#x3D; O(g)$</p><p>$f \in O(g)$</p><h1 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h1><h2 id="关系及其性质"><a href="#关系及其性质" class="headerlink" title="关系及其性质"></a>关系及其性质</h2><p>设 $A$ 和 $B$ 是集合，一个从 $A$ 到 $B$ 的二元关系 $R$ 是 $A \times B$ 的子集</p><h3 id="自反（-reflexive-）"><a href="#自反（-reflexive-）" class="headerlink" title="自反（$reflexive$）"></a>自反（$reflexive$）</h3><p>若对每个元素 $a \in A$ 有 $(a,a) \in R$，那么定义在集合 $A$ 上的关系 $R$ 称为自反的。</p><p><strong>逻辑语言</strong></p><p>$\forall a (a \in A \rightarrow (a, a) \in R)$</p><h3 id="反自反（-irreflexive-）"><a href="#反自反（-irreflexive-）" class="headerlink" title="反自反（$irreflexive$）"></a>反自反（$irreflexive$）</h3><p>若对每个元素 $a \in A$ 有 $(a,a) \notin R$，那么定义在集合 $A$ 上的关系 $R$ 称为反自反的。</p><p><strong>逻辑语言</strong></p><p>$\forall a (a \in A \rightarrow (a, a) \notin R)$</p><h3 id="对称（-symmetric-）"><a href="#对称（-symmetric-）" class="headerlink" title="对称（$symmetric$）"></a>对称（$symmetric$）</h3><p>对于任意 $a,b \in A$，若只要 $(a,b) \in R$ 就有 $(b,a) \in R$，则称定义在集合 $A$ 上的关系 $R$ 为对称的。</p><p><strong>逻辑语言</strong></p><p>$\forall a \forall b ((a, b) \in R \rightarrow (b, a) \in R)$</p><h3 id="反对称（-antisymmetric-）"><a href="#反对称（-antisymmetric-）" class="headerlink" title="反对称（$antisymmetric$）"></a>反对称（$antisymmetric$）</h3><p>对于任意 $a,b \in A$，若 $(a,b) \in R$ 且 $(b,a) \in R$，一定有 $a &#x3D; b$ 则称定义在集合 $A$ 上的关系 $R$ 为反对称的。</p><p><strong>逻辑语言</strong></p><p>$\forall a \forall b (((a, b) \in R \wedge (b, a) \in R) \rightarrow (a &#x3D; b))$</p><h3 id="传递（-transitive-）"><a href="#传递（-transitive-）" class="headerlink" title="传递（$transitive$）"></a>传递（$transitive$）</h3><p>若对于任意 $a,b,c \in A$，$(a,b) \in R$ 并且 $(b,c)\in R$ 则 $(a,c) \in R$，那么定义在集合 $A$ 上的关系 $R$ 称为传递的。</p><p><strong>逻辑语言</strong></p><p>$\forall a \forall b \forall c (((a, b) \in R \wedge (b, c) \in R ) \rightarrow (a, b) \in R)$</p><h3 id="合成（-composition-）-1"><a href="#合成（-composition-）-1" class="headerlink" title="合成（$composition$）"></a>合成（$composition$）</h3><p>设 $R$ 是从集合 $A$ 到集合 $B$ 的关系，$S$ 是从集合 $B$ 到集合 $C$ 的关系。$R$ 与 $S$ 的合成是由有序对 $(a,c)$ 的集合构成的关系，其中 $a \in A,c \in C$，并且存在一个 $b \in B$ 的元素，使得 $(a,b) \in R$ 且 $(b,c) \in S$。我们用 $S \ o \ R$ 表示 $R$ 与 $S$ 的合成。</p><h3 id="幂（-power-）"><a href="#幂（-power-）" class="headerlink" title="幂（$power$）"></a>幂（$power$）</h3><p>设 $R$ 是集合 $A$ 上的关系。$R$ 的 $n$ 次幂 $R^{n} (n &#x3D; 1,2,3, \cdot \cdot \cdot)$ 递归地定义为 $R^{1} &#x3D; R$ 和 $R^{n + 1} &#x3D; R^{n} \ o \ R$</p><h2 id="关系（-relation-）的表示"><a href="#关系（-relation-）的表示" class="headerlink" title="关系（$relation$）的表示"></a>关系（$relation$）的表示</h2><h3 id="矩阵（-matrix-）表示"><a href="#矩阵（-matrix-）表示" class="headerlink" title="矩阵（$matrix$）表示"></a>矩阵（$matrix$）表示</h3><p>可以用 0-1 矩阵表示有穷集之间的关系</p><p><img src="/images/Discretemathematics/matrix.png" alt="matrix"></p><p><strong>部分关系矩阵形式</strong></p><p><img src="/images/Discretemathematics/matrix_of_relation.png" alt="matrix_of_relation"></p><h3 id="图（-graph-）表示"><a href="#图（-graph-）表示" class="headerlink" title="图（$graph$）表示"></a>图（$graph$）表示</h3><p>一个有向图由顶点（或结点）集 $V$ 和边（或弧）集 $E$ 组成，其中边集是 $V$ 中元素的有序对的集合。顶点 $a$ 叫做边 $(a,b)$ 的始点，而顶点 $b$ 叫做这条边的终点。形如 $(a,a)$ 的边用一条从顶点 $a$ 到自身的弧表示。这种边叫做<strong>环</strong>。</p><p><img src="/images/Discretemathematics/graph_of_relation.png" alt="graph_of_relation"></p><h2 id="关系的闭包（-closure-）"><a href="#关系的闭包（-closure-）" class="headerlink" title="关系的闭包（$closure$）"></a>关系的闭包（$closure$）</h2><p><strong>自反闭包 $r(R)$ ：</strong>包含 $R$ 关系，向 $R$ 关系中，添加有序对，变成<strong>自反</strong>的<strong>最小</strong>的二元关系。</p><p><strong>对称闭包 $s(R)$ ：</strong>包含 $R$ 关系，向 $R$ 关系中，添加有序对，变成<strong>对称</strong>的<strong>最小</strong>的二元关系。</p><p><strong>传递闭包 $t (R)$ ：</strong>包含 $R$ 关系，向 $R$ 关系中，添加有序对，变成<strong>传递</strong>的<strong>最小</strong>的二元关系。</p><h3 id="沃舍尔算法（-Warshall-）"><a href="#沃舍尔算法（-Warshall-）" class="headerlink" title="沃舍尔算法（$Warshall$）"></a>沃舍尔算法（$Warshall$）</h3><p><strong>求传递闭包</strong></p><p><img src="/images/Discretemathematics/Warshall.png" alt="Warshall"></p><p>注意首先<strong>枚举中间</strong>的 $k$ </p><h2 id="等价关系（-equivalence-relation-）"><a href="#等价关系（-equivalence-relation-）" class="headerlink" title="等价关系（$equivalence \ relation$）"></a>等价关系（$equivalence \ relation$）</h2><h3 id="等价关系"><a href="#等价关系" class="headerlink" title="等价关系"></a>等价关系</h3><p>定义在集合 $A$ 上的关系叫做等价关系，如果它是<strong>自反</strong>的、<strong>对称</strong>的和<strong>传递</strong>的。</p><p><strong>证明等价关系即证明该关系具有自反，对称，传递性质</strong></p><h3 id="等价类"><a href="#等价类" class="headerlink" title="等价类"></a>等价类</h3><p>设 $R$ 是定义在集合 $A$ 上的等价关系。与 $A$ 中的一个元素 $a$ 有关系的<strong>所有元素的集合</strong>叫做 $a$ 的<strong>等价类</strong>。 $A$ 的关于 $R$ 的等价类记作 $[a]_{R}$。当只考虑一个关系时，我们将省去下标 $R$ 并把这个等价类写作 $[a]$。</p><p>换句话说，如果 $R$ 是定义在集合 $A$ 上的等价关系，则元素 $a$ 的等价类是 $[a]_{R} &#x3D; \lbrace s| (a, s) \in R \rbrace$</p><p>如果 $b \in [a]_{R}$，$b$ 叫做这个等价类的<strong>代表元</strong>。</p><h2 id="偏序（-partial-ordering-）"><a href="#偏序（-partial-ordering-）" class="headerlink" title="偏序（$partial \ ordering$）"></a>偏序（$partial \ ordering$）</h2><h3 id="偏序集"><a href="#偏序集" class="headerlink" title="偏序集"></a>偏序集</h3><p>定义在集合 $S$上的关系 $R$，如果它是<strong>自反</strong>的、<strong>反对称</strong>的和<strong>传递</strong>的，就称为偏序。集合 $S$ 与定义在其上的偏序 $R$ 一起称为偏序集，记作 $(S,R)$。集合 $S$ 中的成员称为偏序集的元素</p><p>偏序集 $(S, \preccurlyeq )$中的元素 $a$ 和 $b$ 称为可比的，如果 $a \preccurlyeq b$ 或 $b \preccurlyeq a$ 。当 $a$ 和 $b$ 是 $S$ 中<br>的元素并且既没有 $a \preccurlyeq b$ ，也没有 $b \preccurlyeq a$ ，则称 $a$ 与是不可比的。</p><h3 id="全序集"><a href="#全序集" class="headerlink" title="全序集"></a>全序集</h3><p>如果 $(S, \preccurlyeq )$ 是偏序集，且 $S$ 中的<strong>每对元素都是可比</strong>的，则 $S$ 称为全序集或线序集，且 $\preccurlyeq$ 称为全序或线序。一个全序集也称为链。</p><h3 id="良序集（-well-ordered-set-）"><a href="#良序集（-well-ordered-set-）" class="headerlink" title="良序集（$well-ordered \ set$）"></a>良序集（$well-ordered \ set$）</h3><p>对于偏序集 $(S, \preccurlyeq )$ ，如果 $\preccurlyeq$ 是全序，并且 $S$ 的每个非空子集都有一个<strong>最小元素</strong>，就称它为良序集。</p><h3 id="哈塞图"><a href="#哈塞图" class="headerlink" title="哈塞图"></a>哈塞图</h3><p><img src="/images/Discretemathematics/Hasse.png" alt="Hasse"></p><p>偏序集 $(S, \preccurlyeq )$ 构造哈塞图 （<strong>上大下小，没有边则不可比较</strong>）</p><h3 id="极大元（-maximal-element-）与极小元（-minimal-element-）"><a href="#极大元（-maximal-element-）与极小元（-minimal-element-）" class="headerlink" title="极大元（$maximal \ element$）与极小元（$minimal \ element$）"></a>极大元（$maximal \ element$）与极小元（$minimal \ element$）</h3><p><strong>极大元：</strong> 当不存在 $b \in S$ 使得 $a \prec b$ ， $a$ 在偏序集 $(S, \preccurlyeq )$ 中是极大元。</p><p><strong>极小元：</strong> 当不存在 $b \in S$ 使得 $b \prec a$ ， $a$ 在偏序集 $(S, \preccurlyeq )$ 中是极小元。</p><h3 id="最大元（-greatest-element-）与最小元（-least-element-）"><a href="#最大元（-greatest-element-）与最小元（-least-element-）" class="headerlink" title="最大元（$greatest \ element$）与最小元（$least \ element$）"></a>最大元（$greatest \ element$）与最小元（$least \ element$）</h3><p><strong>最大元：</strong>偏序集内元素 $a$ 大于<strong>每个其他的元素</strong>， $a$ 在偏序集 $(S, \preccurlyeq )$ 中是最大元。</p><p><strong>最小元：</strong>偏序集内元素 $a$ 小于<strong>每个其他的元素</strong>， $a$ 在偏序集 $(S, \preccurlyeq )$ 中是最小元。</p><h3 id="格（-lattice-）"><a href="#格（-lattice-）" class="headerlink" title="格（$lattice$）"></a>格（$lattice$）</h3><p>如果一个偏序集的<strong>每对元素都有最小上界和最大下界</strong>，就称这个偏序集为格</p><h3 id="拓扑排序（-topological-sort-）"><a href="#拓扑排序（-topological-sort-）" class="headerlink" title="拓扑排序（$topological \ sort$）"></a>拓扑排序（$topological \ sort$）</h3><p><img src="/images/Discretemathematics/toposort.png" alt="toposort"></p><p><strong>引理：</strong>每个有穷非空偏序集 $(S, \preccurlyeq )$ 至少有一个极小元。</p><h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h2 id="图和图模型"><a href="#图和图模型" class="headerlink" title="图和图模型"></a>图和图模型</h2><p>一个图 $G&#x3D;(V,E)$ 由顶点（或结点）的非空集 $V$ 和边的集合 $E$ 构成，每条边有一个或两个顶点与它相连，这样的顶点称为边的端点。边连接它的端点。</p><h2 id="图的术语和几种特殊的图"><a href="#图的术语和几种特殊的图" class="headerlink" title="图的术语和几种特殊的图"></a>图的术语和几种特殊的图</h2><h3 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h3><p>若 $u$ 和 $v$ 是无向图 $G$ 中的一条边 $e$ 的端点，则称两个顶点 $u$ 和 $v$ 在 $G$ 里邻接（或相邻）。这样的边 $e$ 称为关联顶点 $u$ 和 $v$ ，也可以说边 $e$ 连接 $u$ 和 $v$ 。</p><p>图 $G&#x3D;(V,E)$ 中，顶点 $v$ 的所有相邻顶点的集合，记作 $N(v)$ ，称为顶点 $v$ 的邻居。若 $A$ 是 $V$ 的子集，我们用 $N(A)$ 表示图 $G$ 中至少和 $A$ 中一个顶点相邻的所有顶点的集合。所以 $N(A)&#x3D;\bigcup\limits_{v \in A} N(v)$。</p><p>在无向图中，顶点的度是与该顶点相关联的边的数目，例外的情形是，<strong>顶点上的环</strong>为顶点的度做出<strong>双倍贡献</strong>。顶点 $v$ 的度表示成 $deg(v)$ 。</p><h3 id="握手定理"><a href="#握手定理" class="headerlink" title="握手定理"></a>握手定理</h3><p>设 $G &#x3D; (V, E)$ 是有 $m$ 条边的无向图，则 $2m &#x3D; \sum\limits_{v \in V} deg(v)$</p><p><strong>无向图有偶数个度为奇数的顶点</strong>。</p><p><strong>证明：</strong></p><p>$2m &#x3D; \sum\limits_{v \in V} deg(v) &#x3D; \sum\limits_{v \in V_{1}} deg(v) + \sum\limits_{v \in V_{2}} deg(v)$</p><p>设 $V_{1}$ 是度数为偶数的集合， $V_{2}$ 是度数为奇数的集合</p><p>$2m$ 和 $\sum\limits_{v \in V_{1}} deg(v)$ 都是偶数，故 $\sum\limits_{v \in V_{2}} deg(v)$ 为偶数。</p><h3 id="出度与入度（-degree-）"><a href="#出度与入度（-degree-）" class="headerlink" title="出度与入度（$degree$）"></a>出度与入度（$degree$）</h3><p>$deg^{+}(v)$ 表示 $v$ 的出度。</p><p>$deg^{-}(v)$ 表示 $v$ 的入度。</p><h3 id="完全图（-K-n-）"><a href="#完全图（-K-n-）" class="headerlink" title="完全图（$K_{n}$）"></a>完全图（$K_{n}$）</h3><p><img src="/images/Discretemathematics/%E5%AE%8C%E5%85%A8%E5%9B%BE.png" alt="完全图"></p><h3 id="圈图（-C-n-）"><a href="#圈图（-C-n-）" class="headerlink" title="圈图（$C_{n}$）"></a>圈图（$C_{n}$）</h3><p><img src="/images/Discretemathematics/%E5%9C%88%E5%9B%BE.png" alt="圈图"></p><h3 id="轮图（-W-n-）"><a href="#轮图（-W-n-）" class="headerlink" title="轮图（$W_{n}$）"></a>轮图（$W_{n}$）</h3><p><img src="/images/Discretemathematics/%E8%BD%AE%E5%9B%BE.png" alt="轮图"></p><h3 id="立方体图（-Q-n-）"><a href="#立方体图（-Q-n-）" class="headerlink" title="立方体图（$Q_{n}$）"></a>立方体图（$Q_{n}$）</h3><p><img src="/images/Discretemathematics/%E7%AB%8B%E6%96%B9%E5%9B%BE.png" alt="立方图"></p><h3 id="二分图（-bipartite-graph-）"><a href="#二分图（-bipartite-graph-）" class="headerlink" title="二分图（$bipartite \ graph$）"></a>二分图（$bipartite \ graph$）</h3><p>若把简单图 $G$ 的顶点集分成两个不相交的非空集合 $V_{1}$ 和 $V_{2}$ ，使得图中的每一条边都连接 $V_{1}$ 中的一个顶点与 $V_{2}$ 中的一个顶点（因此 $G$ 中没有边连接 $V_{1}$ 中的两个顶点或 $V_{2}$ 中的两个顶点），则 $G$ 称为二分图。当此条件成立时，称 $(V_{1},V_{2})$ 为 $G$ 的顶点集的一个<br>二部划分。</p><p><img src="/images/Discretemathematics/C6_%E4%BA%8C%E5%88%86%E5%9B%BE.png" alt="C6_二分图"></p><h3 id="完全二分图（-K-m-n-）"><a href="#完全二分图（-K-m-n-）" class="headerlink" title="完全二分图（$K_{m, n}$）"></a>完全二分图（$K_{m, n}$）</h3><p><img src="/images/Discretemathematics/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%88%86%E5%9B%BE.png" alt="完全二分图"></p><h3 id="二分图和匹配（-match-）"><a href="#二分图和匹配（-match-）" class="headerlink" title="二分图和匹配（$match$）"></a>二分图和匹配（$match$）</h3><p><strong>最大匹配：</strong>包含最多边数的一个匹配。</p><p><strong>霍尔婚姻定理：</strong> 带有二部划分 $(V_{1},V_{2})$ 的二分图 $G &#x3D; (V,E)$ 中有一个从 $V_{1}$ 到 $V_{2}$ 的完全匹配当且仅当对于 $V_{1}$ 的所有子集 $A$ ，有 $|N(A)| \ge |A|$ 。</p><p><strong>真子图：</strong>图 $G&#x3D;(V,E)$ 的子图是图 $H &#x3D; (W,F)$，其中 $W \subseteq V$ 且 $F \subseteq E$ 。若 $H \neq G$ ，则称图 $G$ 的子图 $H$ 是 $G$ 的真子图。</p><p><strong>子图：</strong>令 $G&#x3D;(V,E)$ 是一个简单图。图 $(W,F)$ 是由顶点集 $V$ 的子集 $W$ <strong>导出的子图</strong>，其中边集 $F$ 包含 $E$ 中的一条边当且仅当这条边的两个端点都在 $W$ 中。</p><p><img src="/images/Discretemathematics/%E5%AD%90%E5%9B%BE.png" alt="子图"></p><p><strong>图的并集：</strong>两个简单图 $G_{1} &#x3D; (V_{1},E_{1})$ 和 $G_{2} &#x3D; (V_{2}, E_{2})$ 的并图是带有顶点集 $V_{1} U V_{2}$ 和边集 $E_{1} U E_{2}$ 的简单图。 $G_{1}$ 和 $G_{2}$ 的并图表示成 $G_{1} U G_{2}$ 。</p><h2 id="图的同构"><a href="#图的同构" class="headerlink" title="图的同构"></a>图的同构</h2><h3 id="图的表示"><a href="#图的表示" class="headerlink" title="图的表示"></a>图的表示</h3><p><strong>邻接表</strong>（适用稀疏图）（$adjacency \ table$）</p><p><img src="/images/Discretemathematics/%E6%97%A0%E5%90%91%E5%9B%BE%E9%82%BB%E6%8E%A5%E8%A1%A8.png" alt="无向图邻接表"></p><p><img src="/images/Discretemathematics/%E6%9C%89%E5%90%91%E5%9B%BE%E9%82%BB%E6%8E%A5%E8%A1%A8.png" alt="有向图邻接表"></p><p><strong>邻接矩阵</strong>（适用稠密图）（$adjacency \ matrix$）</p><p><img src="/images/Discretemathematics/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5.png" alt="邻接矩阵"></p><p><strong>关联矩阵</strong>（$incidence \ matrix$）</p><p><img src="/images/Discretemathematics/%E5%85%B3%E8%81%94%E7%9F%A9%E9%98%B5.png" alt="关联矩阵"></p><p><img src="/images/Discretemathematics/%E5%85%B3%E8%81%94%E7%9F%A9%E9%98%B5%E7%A4%BA%E4%BE%8B.png" alt="关联矩阵示例"></p><h3 id="图的同构（-isomorphism-）"><a href="#图的同构（-isomorphism-）" class="headerlink" title="图的同构（$isomorphism$）"></a>图的同构（$isomorphism$）</h3><p>设 $G &#x3D; (V_{1},E_{1})$ 和 $G &#x3D; (V_{2}, E_{2})$ 是简单图，若存在一对一的和映上的从 $V_{1}$ 到 $V_{2}$ 的函数 $f$ ，且 $f$ 具有这样的性质：对 $V_{1}$ 中所有的 $a$ 和 $b$ 来说， $a$ 和 $b$ 在 $G_{1}$ 中相邻当且仅当 $f(a)$ 和 $f(b)$ 在 $G_{2}$ 中相邻，则称 $G_{1}$ 与 $G_{2}$ 是同构的。这样的函数 $f$ 称为同构。两个不同构的简单图称为非同构的。</p><p>(同构：两个图更换顶点和边名字后完全一样，可以移动顶点和边的位置)</p><p><img src="/images/Discretemathematics/%E5%90%8C%E6%9E%84%E5%9B%BE.png" alt="同构图"></p><h3 id="图同构的判定"><a href="#图同构的判定" class="headerlink" title="图同构的判定"></a>图同构的判定</h3><p><strong>必要条件</strong></p><p>顶点数相等。</p><p>边数相等。</p><p>对应顶点的度数相等。</p><p>判定时先看<strong>必要条件</strong>，若相同，暴力移动一个图顶点的位置，看是否可以移动成另一个图。</p><p><img src="/images/Discretemathematics/%E4%BE%8B%E9%A2%98.png" alt="例题"></p><p>该图是同构的，可尝试同构。</p><h2 id="连通性（-connectivity-）"><a href="#连通性（-connectivity-）" class="headerlink" title="连通性（$connectivity$）"></a>连通性（$connectivity$）</h2><h3 id="无向图连通性"><a href="#无向图连通性" class="headerlink" title="无向图连通性"></a>无向图连通性</h3><p>若无向图中每一对不同的顶点之间都有通路，则该图称为连通的。</p><p><img src="/images/Discretemathematics/%E6%97%A0%E5%90%91%E5%9B%BE%E8%BF%9E%E9%80%9A%E6%80%A7.png" alt="无向图连通性"></p><p>$G_{1}$ 连通， $G_{2}$ 不连通。</p><h3 id="有向图连通性"><a href="#有向图连通性" class="headerlink" title="有向图连通性"></a>有向图连通性</h3><p>若对于有向图中的任意顶点 $a$ 和 $b$ ，都有从 $a$ 到 $b$ 和从 $b$ 到 $a$ 的通路，则该图是强连通的。（同一个强连通分量内，任意两点可互达）</p><p><img src="/images/Discretemathematics/%E6%9C%89%E5%90%91%E5%9B%BE%E8%BF%9E%E9%80%9A%E6%80%A7.png" alt="有向图连通性"></p><p>$G$ 是强连通的， $H$ 不是强连通的。（$H$ 中 $b$ 可以到 $a$ ， $a$ 不可以到 $b$ ）</p><h3 id="通路与同构"><a href="#通路与同构" class="headerlink" title="通路与同构"></a>通路与同构</h3><p>判断是否都具有<strong>特定长度的简单回路</strong>，来证明两个图是不是同构的。还可以用通路求出潜在的同构映射。</p><h3 id="计算顶点间的通路数"><a href="#计算顶点间的通路数" class="headerlink" title="计算顶点间的通路数"></a>计算顶点间的通路数</h3><p>设 $G$ 是一个图，该图的<strong>邻接矩阵</strong> $A$ 相对于图中的顶点顺序 $v_{1}, v_{2}, ··· , v_{n}$ （允许带有无向或有向边、带有多重边和环）。从 $v_{i}$ 到 $v_{j}$ 长度为 $r$ 的不同通路的数目等于 $A^{r}$ 的第 $(i,j)$ 项，其中 $r$ 是正整数。</p><p><strong>证明</strong></p><p>用数学归纳法证明。设 $G$ 是带有邻接矩阵 $A$ 的图（假设 $G$ 的顶点具有顺序 $v_{1}, v_{2}, ··· , v_{n}$ ）。从 $v_{i}$ 到 $v_{j}$ 长度为 $1$ 的通路数是 $A$ 的第  $(i,j)$ 项，因为该项是从 $v_{i}$ 到 $v_{j}$ 的边数。</p><p>假设 $A^{r}$ 的第 $(i,j)$ 项是从 $v_{i}$ 到 $v_{j}$ 长度为 $r$ 的不同通路的个数。这是归纳假设。因为 $A^{r + 1} &#x3D; A^{r}A$ ，所以 $A^{r + 1}$ 的第 $(i,j)$ 项等于 $<br>b_{i1} a_{1j} + b_{i2} a_{2j} + ··· + b_{in} a_{nj}$ </p><p>其中 $b_{ik}$ 是 $A^{r}$ 的第 $(i,k)$ 项。根据归纳假设， $b_{ik}$ 是从 $v_{i}$ 到 $v_{k}$ 长度为 $r$ 的通路数。</p><p>从 $v_{i}$ 到 $v_{j}$ 长度为 $r+1$ 的通路，包括从 $v_{i}$ 到某个中间顶点 $v_{k}$ 长度为 $r$ 的通路以及从 $v_{k}$ 到 $v_{j}$ 的边。根据计数的乘积法则，这样的通路个数是从 $v_{i}$ 到 $v_{k}$ 长度为 $r$ 的通路数（即 $b_{ik}$ ）与从 $v_{k}$ 到 $v_{j}$ 的边数（即 $a_{kj}$）积。当对所有可能的中间顶点 $v_{k}$ 求这些乘积之和时，根据计数的求和法则，就可以得出所需要的结果。</p><h2 id="欧拉通路（-Euler-path-）与哈密顿通路-（-Hamilton-path-）"><a href="#欧拉通路（-Euler-path-）与哈密顿通路-（-Hamilton-path-）" class="headerlink" title="欧拉通路（$Euler \ path$）与哈密顿通路 （$Hamilton \ path$）"></a>欧拉通路（$Euler \ path$）与哈密顿通路 （$Hamilton \ path$）</h2><h3 id="欧拉回路和欧拉通路"><a href="#欧拉回路和欧拉通路" class="headerlink" title="欧拉回路和欧拉通路"></a>欧拉回路和欧拉通路</h3><p><strong>欧拉回路（$Euler \ circuit$）：</strong>图 $G$ 中的欧拉回路是包含 $G$ 的每一条<strong>边</strong>的<strong>简单回路</strong>。</p><p><strong>欧拉通路（$Euler \ path$）：</strong>图 $G$ 中的欧拉通路是包含 $G$ 的每一条<strong>边</strong>的<strong>简单通路</strong>。</p><h3 id="欧拉回路和欧拉通路充要条件"><a href="#欧拉回路和欧拉通路充要条件" class="headerlink" title="欧拉回路和欧拉通路充要条件"></a>欧拉回路和欧拉通路充要条件</h3><p><strong>欧拉回路</strong></p><p>含有至少 $2$ 个顶点的连通多重图具有欧拉回路当且仅当它的<strong>每个顶点的度都为偶数</strong>。</p><p><strong>欧拉通路</strong></p><p>连通多重图具有欧拉通路但无欧拉回路当且仅当它<strong>恰有 $2$ 个度为奇数</strong>的顶点。</p><p><strong>（欧拉回路与欧拉通路不共存）</strong></p><h3 id="哈密顿回路和哈密顿通路"><a href="#哈密顿回路和哈密顿通路" class="headerlink" title="哈密顿回路和哈密顿通路"></a>哈密顿回路和哈密顿通路</h3><p><strong>哈密顿回路（$Hamilton \ circuit$）：</strong>经过图 $G$ 中每一个<strong>顶点</strong>恰好一次的<strong>简单回路</strong>称为哈密顿回路。</p><p><strong>哈密顿通路（$Hamilton \ path$）：</strong>经过图 $G$ 中每一个<strong>顶点</strong>恰好一次的<strong>简单通路</strong>称为哈密顿通路。</p><h3 id="哈密顿回路的充分条件"><a href="#哈密顿回路的充分条件" class="headerlink" title="哈密顿回路的充分条件"></a>哈密顿回路的充分条件</h3><p>（注意是<strong>充分条件</strong>）</p><p><strong>狄拉克定理：</strong> 如果 $G$ 是有 $n$ 个顶点的简单图，其中 $n \ge 3$ ，并且 $G$ 中每个顶点的度都至少为 $n&#x2F;2$ ，则 $G$ 有哈密顿回路。</p><p><strong>欧尔定理：</strong>如果 $G$ 是有 $n$ 个顶点的简单图，其中 $n \ge 3$ ，并且对于 $G$ 中<strong>每一对不相邻</strong>的顶点 $u$ 和 $v$ 来说，都有 $deg(u) + deg(v) \ge n$ ，则 $G$ 有哈密顿回路。</p><h2 id="最短通路问题"><a href="#最短通路问题" class="headerlink" title="最短通路问题"></a>最短通路问题</h2><h3 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h3><p><img src="/images/Discretemathematics/Dijkstra.png" alt="Dijkstra"></p><h2 id="平面图（-planar-graph-）"><a href="#平面图（-planar-graph-）" class="headerlink" title="平面图（$planar \ graph$）"></a>平面图（$planar \ graph$）</h2><p>若可以在平面中画出一个图而边没有任何交叉（其中边的交叉是表示边的直线或弧线在它们的公共端点以外的地方相交），则这个图是平面图。这种画法称为这个图的平面表示。</p><p><img src="/images/Discretemathematics/%E5%B9%B3%E9%9D%A2%E5%9B%BE.png" alt="平面图"></p><h3 id="欧拉公式"><a href="#欧拉公式" class="headerlink" title="欧拉公式"></a>欧拉公式</h3><p>设 $G$ 是带 $e$ 条边和 $v$ 个顶点的连通平面简单图。设 $r$ 是 $G$ 的平面图表示中的面数。则 $r &#x3D; e - v + 2$ 。</p><p><strong>推论 $1$ ：</strong>若 $G$ 是 $e$ 条边和 $v$ 个顶点的连通平面简单图，其中 $v \ge 3$ ，则 $e \le 3v - 6$ 。</p><p><strong>推论 $2$ ：</strong>若 $G$ 是连通平面简单图，则 $G$ 中有度数不超过 $5$ 的顶点。</p><p><strong>推论 $3$ ：</strong>若连通平面简单图有 $e$ 条边和 $v$ 个顶点， $v \ge 3$ 并且没有长度为 $3$ 的回路，则 $e \le 2v - 4$ 。</p><p><strong>推论 $4$ ：</strong>若连通平面简单图有 $e$ 条边和 $v$ 个顶点， $v \ge 3$ 并且没有长度为 $x$ 的回路，则 $e \le \frac {x + 1}{x - 1} (v - 2)$ 。</p><p><strong>证明推论 $4$ ：</strong></p><p>握手定理： $2e &#x3D; \sum\limits_{v \in V} deg(v)$ 。</p><p>面的度数之和等于边数的两倍 $2e &#x3D; \sum\limits_{所有区域R} deg(R)$ 。</p><p>没有长度为 $x$ 的回路意味着面的度必然至少为 $x + 1$ 。（该条件需要证明，本证明直接使用结论）</p><p>$\sum\limits_{所有区域R} deg(R) \ge (x + 1) * r$</p><p>因此，$\frac {2e}{x + 1} \ge r$ 。</p><p>欧拉公式：$r &#x3D; e - v + 2$ 。</p><p>所以，$e \le \frac {x + 1}{x - 1} (v - 2)$ 。</p><h3 id="库拉图斯基定理"><a href="#库拉图斯基定理" class="headerlink" title="库拉图斯基定理"></a>库拉图斯基定理</h3><p>一个图是非平面图当且仅当它包含一个同胚于 $K_{3,3}$ 或 $K_{5}$ 的子图。（<strong>判定平面图重要定理</strong>）</p><p>若一个图是平面图，则通过删除一条边 $\lbrace u,v \rbrace$ 并且添加一个新顶点 $w$ 和两条边 $\lbrace u,w \rbrace$与 $\lbrace w, v \rbrace$ 获得的任何图也是平面图。这样的操作称为<strong>初等细分</strong>。若可以从相同的图通过一系列初等细分来获得图 $G &#x3D; (V_{1},E_{1})$ 和图 $G &#x3D; {V_{2},E_{2}}$ ，则称它们是<strong>同胚</strong>的。</p><p><img src="/images/Discretemathematics/%E5%90%8C%E8%83%9A%E7%9A%84%E5%9B%BE.png" alt="同胚的图"></p><h2 id="图着色（-Coloring-）"><a href="#图着色（-Coloring-）" class="headerlink" title="图着色（$Coloring$）"></a>图着色（$Coloring$）</h2><p>简单图的着色是对该图的每个顶点都指定一种颜色，使得<strong>没有两个相邻的顶点颜色相同</strong>。</p><p><strong>图的着色数</strong>是着色这个图所需要的<strong>最少颜色数</strong>。图 $G$ 的着色数记作 $\chi (G)$ 。</p><h3 id="四色定理"><a href="#四色定理" class="headerlink" title="四色定理"></a>四色定理</h3><p>平面图的着色数不超过 $4$ 。（可用于证反）</p><h3 id="图着色应用"><a href="#图着色应用" class="headerlink" title="图着色应用"></a>图着色应用</h3><p>把<strong>互斥</strong>的两个顶点建边，求着色。</p><p>例：安排期末考试，频率分配等。</p><h1 id="树（-tree-）"><a href="#树（-tree-）" class="headerlink" title="树（$tree$）"></a>树（$tree$）</h1><h2 id="树的概述"><a href="#树的概述" class="headerlink" title="树的概述"></a>树的概述</h2><p>树是没有简单回路的连通无向图。</p><p>一个无向图是树当且仅当在它的每对顶点之间<strong>存在唯一简单通路</strong>。</p><h3 id="有根树-（-rooted-tree-）"><a href="#有根树-（-rooted-tree-）" class="headerlink" title="有根树 （$rooted \ tree$）"></a>有根树 （$rooted \ tree$）</h3><p>有根树是指定一个顶点作为根并且每条边的方向都离开根的树。</p><p><strong>树叶：</strong>没有孩子的节点。</p><p>若有根树的每个内点都有不超过 $m$ 个孩子，则称它为 $m$ 叉树。若该树的每个内点都恰好有 $m$ 个孩子，则称它为满 $m$ 叉树。把 $m &#x3D; 2$ 的 $m$ 叉树称为二叉树。</p><h3 id="树的性质"><a href="#树的性质" class="headerlink" title="树的性质"></a>树的性质</h3><p>带有 $n$ 个顶点的树含有 $n - 1$ 条边。</p><p><strong>计算满 $m$ 叉树中的顶点数</strong></p><p>带有 $i$ 个内点的满 $m$ 叉树含有 $n &#x3D; mi + 1$ 个顶点。</p><p><strong>证</strong>除了根之外的每个顶点都是内点的孩子。因为每个内点有 $m$ 个孩子，所以在树中除了根之外还有 $mi$ 个顶点。因此，该树含有 $n &#x3D; mi + 1$ 个顶点。</p><p>假定 $T$ 是满 $m$ 叉树。设 $n$ 是树的顶点数， $i$ 是该树的内点数， $l$ 是树叶数。一旦 $n, i, l$ 中的一个已知，另外的两个量就随之确定了。</p><ol><li>$n$ 确定， $i &#x3D; (n - 1) &#x2F; m \quad \quad \quad \quad l &#x3D; [(m - 1)n + 1] &#x2F; m$ </li><li>$i$ 确定， $n &#x3D; mi + 1 \quad \quad \quad \quad \quad \ \ l &#x3D; (m - 1)i + 1$ </li><li>$l$ 确定， $n &#x3D; (ml - 1) &#x2F; (m - 1) \quad i &#x3D; (l - 1) &#x2F; (m - 1)$</li></ol><p>在高度为 $h$ 的 $m$  叉树中至多有 $m^{h}$ 个树叶。</p><h2 id="树的应用"><a href="#树的应用" class="headerlink" title="树的应用"></a>树的应用</h2><h3 id="二叉搜索树-（-binary-search-tree-）"><a href="#二叉搜索树-（-binary-search-tree-）" class="headerlink" title="二叉搜索树 （$binary \ search \ tree$）"></a><a href="https://oi-wiki.org/ds/bst">二叉搜索树</a> （$binary \ search \ tree$）</h3><h3 id="决策树（-decision-tree-）"><a href="#决策树（-decision-tree-）" class="headerlink" title="决策树（$decision \ tree$）"></a>决策树（$decision \ tree$）</h3><p>基于二元比较的排序算法至少需要 $\lceil logn! \rceil$ 次比较。（即 $nlogn$ ）</p><h3 id="前缀码（-prefix-code-）"><a href="#前缀码（-prefix-code-）" class="headerlink" title="前缀码（$prefix \ code$）"></a>前缀码（$prefix \ code$）</h3><p>$Huffman$ 编码。</p><h3 id="博弈树-（-game-tree-）"><a href="#博弈树-（-game-tree-）" class="headerlink" title="博弈树 （$game \ tree$ ）"></a>博弈树 （$game \ tree$ ）</h3><p><strong>对称状态要剪枝</strong></p><p>掌握决策树画法</p><p><strong>石子游戏</strong></p><p><img src="/images/Discretemathematics/%E7%9F%B3%E5%AD%90%E6%B8%B8%E6%88%8F.png" alt="石子游戏"></p><p><strong>井字游戏</strong></p><p><img src="/images/Discretemathematics/%E4%BA%95%E5%AD%97%E6%B8%B8%E6%88%8F.png" alt="井字游戏"></p><h2 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h2><h3 id="前序遍历（-preorder-）"><a href="#前序遍历（-preorder-）" class="headerlink" title="前序遍历（$preorder$）"></a>前序遍历（$preorder$）</h3><p><img src="/images/Discretemathematics/%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86.png" alt="前序遍历"></p><h3 id="中序遍历（-inorder-）"><a href="#中序遍历（-inorder-）" class="headerlink" title="中序遍历（$inorder$）"></a>中序遍历（$inorder$）</h3><p><img src="/images/Discretemathematics/%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86.png" alt="中序遍历"></p><h3 id="后序遍历（-postorder-）"><a href="#后序遍历（-postorder-）" class="headerlink" title="后序遍历（$postorder$）"></a>后序遍历（$postorder$）</h3><p><img src="/images/Discretemathematics/%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86.png" alt="后序遍历"></p><h2 id="生成树（-spanning-tree-）"><a href="#生成树（-spanning-tree-）" class="headerlink" title="生成树（$spanning \ tree$）"></a>生成树（$spanning \ tree$）</h2><p>设 $G$ 是简单图。 $G$ 的生成树是包舍 $G$ 的每个顶点的 $G$ 的子图。</p><p>简单图是连通的当且仅当它有生成树。</p><h3 id="深度优先搜索（-dfs-）"><a href="#深度优先搜索（-dfs-）" class="headerlink" title="深度优先搜索（$dfs$）"></a>深度优先搜索（$dfs$）</h3><p><img src="/images/Discretemathematics/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2.png" alt="深度优先搜索"></p><h3 id="宽度优先搜索（-bfs-）"><a href="#宽度优先搜索（-bfs-）" class="headerlink" title="宽度优先搜索（$bfs$）"></a>宽度优先搜索（$bfs$）</h3><p><img src="/images/Discretemathematics/%E5%AE%BD%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2.png" alt="宽度优先搜索"></p><h2 id="最小生成树-MST"><a href="#最小生成树-MST" class="headerlink" title="最小生成树 ($MST$)"></a><a href="https://oi-wiki.org/graph/mst/">最小生成树</a> ($MST$)</h2><p>连通加权图里的最小生成树是具有边的权之和最小的生成树。</p><h3 id="普林算法（-Prim-）"><a href="#普林算法（-Prim-）" class="headerlink" title="普林算法（$Prim$）"></a>普林算法（$Prim$）</h3><p><img src="/images/Discretemathematics/Prim.png" alt="Prim"></p><h3 id="克鲁斯卡尔算法（-Kruskal-）"><a href="#克鲁斯卡尔算法（-Kruskal-）" class="headerlink" title="克鲁斯卡尔算法（$Kruskal$）"></a>克鲁斯卡尔算法（$Kruskal$）</h3><p><img src="/images/Discretemathematics/Kruskal.png" alt="Kruskal"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>$Created by GitSteve1025$ </p><p>祝大家取得理想成绩！！！</p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
          <category> Course </category>
          
          <category> Discrete mathematics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Discrete mathematics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 CCPC Guilin C.Master of Both IV</title>
      <link href="/2023/12/11/ACM/CCPC/2023%20CCPC%20Guilin%20C/"/>
      <url>/2023/12/11/ACM/CCPC/2023%20CCPC%20Guilin%20C/</url>
      
        <content type="html"><![CDATA[<h1 id="C-Master-of-Both-IV"><a href="#C-Master-of-Both-IV" class="headerlink" title="C. Master of Both IV"></a><a href="https://codeforces.com/gym/104768/problem/C">C. Master of Both IV</a></h1><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>前置知识：线性基</p><p>线性基内的基元异或不会为 0 ，线性基<strong>插入失败</strong>等价于<strong>当前数与线性基的某些基元异或为 0</strong></p><p>由此我们可以记录 插入失败的个数，记为$c$，则任选数异或为 0 的种类为 $2^c - 1$（排除空集)</p><p>题目要求：$\forall x\in[1,m],a_{i_x}|\bigoplus\limits_{j&#x3D;1}^m a_{i_j}$</p><p>我们将<strong>异或结果</strong>分为两种：等于 0， 不等于 0</p><p>一、等于 0</p><p>0 是任何数的倍数， 把所有数插入线性基求插入失败次数 $c$ 贡献 $2^c - 1$</p><p>二、不等于 0</p><p>假设结果为 $f$，因为要整除，选的数必须为它的因子，</p><p>设因子为$f_1, f_2, f_3,…,f_n$ （不包括自己）</p><p>个数记为$c_1, c_2, c_3,…,c_n$ （不包括自己）</p><p>让因子的异或结果为 0， 再异或自己， 结果就是 $f$， 满足题目要求</p><p>把所有因子插入进线性基，同种数必定插入失败，直接加 </p><p>插入失败的次数等于：$\sum\limits_{i &#x3D; 1}^{n}(c_i - 1) + k$  (k为因子插入失败次数)</p><p>假设自己有 $c$ 个 要让结果不为 0 ，我们必须选<strong>奇数</strong>个， 有 $2^{c - 1}$ 种选法</p><p>贡献：$2^{c - 1} * 2^{(\sum\limits_{i &#x3D; 1}^{n}(c_i - 1) + k)} &#x3D; 2^{(\sum\limits_{i &#x3D; 1}^{n}(c_i - 1) + k + c - 1)}$</p><p>二者相加即为结果</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> N&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">linear_basis</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> siz;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> basis[N];</span><br><span class="line">    <span class="built_in">linear_basis</span>()&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; N;i++)&#123;</span><br><span class="line">            basis[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        siz = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = N - <span class="number">1</span>;~i;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>((x &gt;&gt; i) &amp; <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(basis[i] == <span class="number">0</span>)&#123;</span><br><span class="line">                    siz += <span class="number">1</span>;</span><br><span class="line">                    basis[i] = x;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    x ^= basis[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> P = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> P2[M];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prepare</span><span class="params">()</span></span>&#123;</span><br><span class="line">    P2[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; M;i++)&#123;</span><br><span class="line">        P2[i] = P2[i - <span class="number">1</span>] * <span class="number">2</span> % P;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">power</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span> p)</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">1</span>;</span><br><span class="line">    a %= p;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>)&#123;</span><br><span class="line">            ans = ans * a % p;</span><br><span class="line">        &#125;</span><br><span class="line">        a = a * a % p;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cnt</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        cnt[a[i]] += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&gt; <span class="built_in">val</span>(n + <span class="number">1</span>); </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt[i])&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i * <span class="number">2</span>;j &lt;= n;j += i)&#123;</span><br><span class="line">                val[j].<span class="built_in">push_back</span>(&#123;i, cnt[i]&#125;);</span><br><span class="line">            &#125;            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt[i])&#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> c = <span class="number">0</span>;</span><br><span class="line">            linear_basis&lt;N&gt; line;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; [x, y] : val[i])&#123;</span><br><span class="line">                c += y - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(!line.<span class="built_in">insert</span>(x))&#123;</span><br><span class="line">                    c += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> tep = P2[cnt[i] - <span class="number">1</span>];</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> tmp = P2[c] * tep % P;</span><br><span class="line">            ans = (ans + tmp) % P;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> c = <span class="number">0</span>;</span><br><span class="line">    linear_basis&lt;N&gt; line;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!line.<span class="built_in">insert</span>(a[i]))&#123;</span><br><span class="line">            c += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = (ans + P2[c] - <span class="number">1</span>) % P;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">prepare</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> CCPC </category>
          
          <category> Guilin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性基 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frieren Beyond Journey&#39;s End Solution</title>
      <link href="/2023/12/02/ACM/SCUT%E6%A0%A1%E8%B5%9B/Frieren%20Beyond%20Journey&#39;s%20End%20Solution/"/>
      <url>/2023/12/02/ACM/SCUT%E6%A0%A1%E8%B5%9B/Frieren%20Beyond%20Journey&#39;s%20End%20Solution/</url>
      
        <content type="html"><![CDATA[<h1 id="Frieren-Beyond-Journey’s-End-Solution"><a href="#Frieren-Beyond-Journey’s-End-Solution" class="headerlink" title="Frieren Beyond Journey’s End Solution"></a>Frieren Beyond Journey’s End Solution</h1><p>考虑对a前缀和得s<br>$$<br>\sum_{i&#x3D;1}^{n}\sum_{l&#x3D;1}^{i}\sum_{r&#x3D;i}^{n}\sum_{k&#x3D;l}^{r}a_k<br>$$</p><p>$$<br>&#x3D; \sum_{i&#x3D;1}^{n}\sum_{l&#x3D;1}^{i}\sum_{r&#x3D;i}^{n}(s[r] - s[l - 1])<br>$$</p><p>$$<br>&#x3D; \sum_{i&#x3D;1}^{n}(\sum_{l&#x3D;1}^{i}\sum_{r&#x3D;i}^ns[r] - \sum_{l&#x3D;1}^{i}\sum_{r&#x3D;i}^ns[l - 1])<br>$$</p><p>$$<br>&#x3D; \sum_{i&#x3D;1}^{n}(\sum_{l&#x3D;1}^{i}\sum_{r&#x3D;i}^ns[r] - \sum_{r&#x3D;i}^{n}\sum_{l&#x3D;1}^is[l - 1])<br>$$</p><p>$$<br>&#x3D; \sum_{i&#x3D;1}^{n}(i  * \sum_{r&#x3D;i}^ns[r] - (n - i + 1) * \sum_{l&#x3D;1}^is[l - 1])<br>$$</p><p>可以看出这两公式又可以前缀和 即对s前缀和得ss<br>$$<br>\sum_{r&#x3D;i}^n s[r] &#x3D; ss[n] - ss[i - 1]<br>$$</p><p>$$<br>\sum_{l&#x3D;1}^i s[l - 1] &#x3D;  \sum_{l&#x3D;0}^{i - 1}s[l] &#x3D; ss[i - 1]<br>$$</p><p>带入进去</p><p>$$<br>&#x3D; \sum_{i&#x3D;1}^{n}(i * (ss[n] - ss[i - 1]) - (n - i + 1) * ss[i - 1])<br>$$</p><p>这个是公式变量只有 $i$， $O(N)$ 累加即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> p = <span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">val</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">s</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">ss</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">cin &gt;&gt; val[i];</span><br><span class="line">s[i] = (s[i - <span class="number">1</span>] + val[i]) % p;</span><br><span class="line">ss[i] = (ss[i - <span class="number">1</span>] + s[i]) % p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">res += (ss[n] - ss[i - <span class="number">1</span>]) * i - ss[i - <span class="number">1</span>] * (n - i + <span class="number">1</span>);</span><br><span class="line">res %= p;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; (res % p + p) % p &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复杂度$O(T * n)$</p><h1 id="杂记"><a href="#杂记" class="headerlink" title="杂记"></a>杂记</h1><p>本道题在比赛两次被删， 在第三场比赛才放上去，呜呜，赛时过了4个（大佬前几场打了，后面就不打了，来了几个，估计是他们做出来的），本题是在学习单调栈时想到的题，用了该题的公式，简化了该题</p><p><a href="https://leetcode.cn/problems/sum-of-total-strength-of-wizards/">2281. 巫师的总力量和 - 力扣（LeetCode）</a></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> SCUT校赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frieren and Rotating Calipers Solution</title>
      <link href="/2023/12/02/ACM/SCUT%E6%A0%A1%E8%B5%9B/Frieren%20and%20Rotating%20Calipers%20Solution/"/>
      <url>/2023/12/02/ACM/SCUT%E6%A0%A1%E8%B5%9B/Frieren%20and%20Rotating%20Calipers%20Solution/</url>
      
        <content type="html"><![CDATA[<h1 id="Frieren-and-Rotating-Calipers-Solution"><a href="#Frieren-and-Rotating-Calipers-Solution" class="headerlink" title="Frieren and Rotating Calipers Solution"></a>Frieren and Rotating Calipers Solution</h1><p>由题矩形长和宽需要与$x$轴或 $y$轴平行</p><p>找到最大，最小的$x$， $y$记为$max_x, min_x, max_y, min_y$</p><p>答案$(max_x - min_x) * (max_y - min_y)$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">x</span><span class="params">(n)</span>, <span class="title">y</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            cin &gt;&gt; x[i] &gt;&gt; y[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> max_x = *<span class="built_in">max_element</span>(x.<span class="built_in">begin</span>(), x.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> max_y = *<span class="built_in">max_element</span>(y.<span class="built_in">begin</span>(), y.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> min_x = *<span class="built_in">min_element</span>(x.<span class="built_in">begin</span>(), x.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> min_y = *<span class="built_in">min_element</span>(y.<span class="built_in">begin</span>(), y.<span class="built_in">end</span>());</span><br><span class="line">        cout &lt;&lt; (max_x - min_x) * (max_y - min_y) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复杂度$O(T * n)$</p><h1 id="杂记"><a href="#杂记" class="headerlink" title="杂记"></a>杂记</h1><p>学习旋转卡壳时想到的签到题，赛时凡过题者都过了这题</p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> SCUT校赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在blog写作</title>
      <link href="/2023/12/02/Learning/Build%20Hexo/Write%20On%20Hexo/"/>
      <url>/2023/12/02/Learning/Build%20Hexo/Write%20On%20Hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="在blog写作"><a href="#在blog写作" class="headerlink" title="在blog写作"></a>在blog写作</h1><h2 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h2><p>正常写完md后 放到post下</p><p><strong>注意md Front-matter</strong></p><p><a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter | Hexo</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g </span><br></pre></td></tr></table></figure><p>然后本地启动就可以看到文章</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s </span><br></pre></td></tr></table></figure><p>上传到自己的网站要部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d </span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">常用命令</th><th align="left">简写</th><th align="left">中文含义</th></tr></thead><tbody><tr><td align="left">hexo server</td><td align="left">hexo s</td><td align="left">本地启动</td></tr><tr><td align="left">hexo generate</td><td align="left">hexo g</td><td align="left">生成静态文件</td></tr><tr><td align="left">hexo deploy</td><td align="left">hexo d</td><td align="left">部署网站</td></tr><tr><td align="left">hexo clean</td><td align="left">hexo cl</td><td align="left">清除缓存和已经生成的静态文件</td></tr></tbody></table><p>一般情况，我们先依次输入<code>hexo clean</code>、 <code>hexo g</code> 、 <code>hexo s</code> ，没问题再 <code>hexo d</code>就行。</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="图片未显示"><a href="#图片未显示" class="headerlink" title="图片未显示"></a>图片未显示</h3><ol><li><strong>图片名</strong>和<strong>路径</strong>不能有空格</li><li>本地图片要<strong>相对路径</strong> 以blog为根目录</li></ol><p>typora + hexo</p><p>在Front-matter加上</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typora-root-url: ..</span><br></pre></td></tr></table></figure><p><img src="/images/WriteOnHexo/root.png" alt="root"></p><p>写作时把图片拖入即可</p><p><img src="/images/WriteOnHexo/write.png" alt="write"></p><p>解释：在source下创建images放所有文章图片 WriteOnHexo是本文的图片文件夹， 拖入即可显示，并且网站上也可正常显示</p><p>markdown具体如下</p><p><img src="/images/WriteOnHexo/concrete.png" alt="concrete"></p><h3 id="数学表达式乱码"><a href="#数学表达式乱码" class="headerlink" title="数学表达式乱码"></a>数学表达式乱码</h3><p>需要安装和配置 hexo-math 具体可看他人教程</p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
          <category> Build blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地hexo部署</title>
      <link href="/2023/12/02/Learning/Build%20Hexo/Local%20Hexo/"/>
      <url>/2023/12/02/Learning/Build%20Hexo/Local%20Hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="本地hexo部署"><a href="#本地hexo部署" class="headerlink" title="本地hexo部署"></a>本地hexo部署</h1><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>Git下载地址：<a href="https://git-scm.com/download/">https://git-scm.com/download/</a></p><p><img src="/images/LocalHexo/gitdownload.png" alt="gitdownload"></p><p>直接安装即可，网站会自动匹配合适版本（一直点next， 安装位置可自定义）</p><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>Node.js下载地址： <a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p><p><img src="/images/LocalHexo/nodejsdownload.png" alt="nodejsdownload"></p><p>选择合适的installer直接安装即可</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>新建文件夹blog</p><p>该<strong>blog文件夹作为blog根目录</strong>， 此后所有git bash 都在这操作</p><p><strong>blog内</strong>右键可以看到 git bash here</p><p><img src="/images/LocalHexo/gitbash.png" alt="gitbash"></p><p>安装hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><img src="/images/LocalHexo/hexodownload.png" alt="hexodownload"></p><p>初始化hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p><img src="/images/LocalHexo/hexoinit.png" alt="hexoinit"></p><p>安装相关依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p><img src="/images/LocalHexo/hexoinstall.png" alt="hexoinstall"></p><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="/images/LocalHexo/hexostart.png" alt="hexostart"></p><p>输入后可以看到这个本地静态网站open即可</p><p><img src="/images/LocalHexo/hexolocal.png" alt="hexolocal"></p><p>网站界面可以用butterfly 和 Next 美化</p><p><img src="/images/LocalHexo/webpage.png" alt="webpage"></p><p>利用butterfly美化后，具体可参考</p><p><a href="https://butterfly.js.org/">https://butterfly.js.org/</a></p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
          <category> Build blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frieren and Rotating Calipers</title>
      <link href="/2023/12/01/ACM/SCUT%E6%A0%A1%E8%B5%9B/Frieren%20and%20Rotating%20Calipers/"/>
      <url>/2023/12/01/ACM/SCUT%E6%A0%A1%E8%B5%9B/Frieren%20and%20Rotating%20Calipers/</url>
      
        <content type="html"><![CDATA[<h1 id="Frieren-and-Rotating-Calipers"><a href="#Frieren-and-Rotating-Calipers" class="headerlink" title="Frieren and Rotating Calipers"></a><a href="https://www.luogu.com.cn/problem/U382825">Frieren and Rotating Calipers</a></h1><p><strong>时间限制：1s</strong><br><strong>空间限制：256MB</strong></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>​芙莉莲正在学习旋转卡壳，但是字不会念，你能告诉她正确的读音吗？</p><p>学习过程中看到最小矩形覆盖问题，即给你<strong>n</strong>个点，求最小的矩形使得覆盖所有点。她发现最小的矩形的长和宽不一定与$x$轴，$y$轴平行，她认为这些矩形非常无聊，你能找到面积最小的<strong>有趣矩形</strong>使得覆盖所有点吗？</p><p><strong>有趣矩形</strong>：长和宽与$x$轴或$y$轴平行的矩形</p><h3 id="Input-Description"><a href="#Input-Description" class="headerlink" title="Input Description"></a>Input Description</h3><p>第一行一个正整数<strong>T</strong>表示测试数 $1 \le T \le 10^2$</p><p>每个测试的第一行有一个正整数<strong>n</strong>表示点的数量 $1 \le n \le 10^4$</p><p>每个测试接下来有n行，每行两个整数 $(x, y) $   $0 \le x \le 10^4 $，$0 \le y \le 10^4 $</p><h3 id="Output-Description"><a href="#Output-Description" class="headerlink" title="Output Description"></a>Output Description</h3><p>每行输出符合条件的<strong>有趣矩形</strong>的面积</p><h3 id="Input-Sample"><a href="#Input-Sample" class="headerlink" title="Input Sample"></a>Input Sample</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">0 0</span><br><span class="line">1 0</span><br><span class="line">0 1</span><br><span class="line">4</span><br><span class="line">0 0</span><br><span class="line">1 0</span><br><span class="line">0 1</span><br><span class="line">1 1</span><br></pre></td></tr></table></figure><h3 id="Output-Sample"><a href="#Output-Sample" class="headerlink" title="Output Sample"></a>Output Sample</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> SCUT校赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frieren Beyond Journey&#39;s End</title>
      <link href="/2023/12/01/ACM/SCUT%E6%A0%A1%E8%B5%9B/Frieren%20Beyond%20Journey&#39;s%20End/"/>
      <url>/2023/12/01/ACM/SCUT%E6%A0%A1%E8%B5%9B/Frieren%20Beyond%20Journey&#39;s%20End/</url>
      
        <content type="html"><![CDATA[<h1 id="Frieren-Beyond-Journey’s-End"><a href="#Frieren-Beyond-Journey’s-End" class="headerlink" title="Frieren Beyond Journey’s End"></a><a href="https://www.luogu.com.cn/problem/U367574">Frieren Beyond Journey’s End</a></h1><p><strong>时间限制：1s</strong><br><strong>空间限制：256MB</strong></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>&emsp;&emsp;芙莉莲热衷周游各方搜集奇怪的魔法，某一天她得到一个有趣的魔法公式,  </p><p>$$<br> \sum_{i&#x3D;1}^n\sum_{l&#x3D;1}^i\sum_{r&#x3D;i}^n\sum_{k&#x3D;l}^r a_k<br>$$</p><p>同时为此搜集了<strong>n</strong>个魔法单元。由于种族的长寿天性导致她对时间的感觉不同于一般人，所以她请求你来帮忙。她估算结果可能很大，请你告诉她结果对<strong>1000000007</strong>取余后的数</p><h3 id="Input-Description"><a href="#Input-Description" class="headerlink" title="Input Description"></a>Input Description</h3><p>第一行一个正整数<strong>T</strong>表示测试数 $ 1 \le T \le 10^5 $</p><p>每个测试的第一行有一个正整数<strong>n</strong>表示魔法单元的数量 $ 1 \le n \le 10^5 $</p><p>每个测试的第二行有<strong>n</strong>个整数 $ a_1, a_2, … , a_n  \quad 0 \le a_i \le 10^9 $</p><p>题目保证总的所有n的和不会超过 $ 2 \times 10^5 $</p><h3 id="Output-Description"><a href="#Output-Description" class="headerlink" title="Output Description"></a>Output Description</h3><p>对于每个测试输出一个整数 即结果对  $ 1000000007 $ 取余后的数</p><h3 id="Input-Sample"><a href="#Input-Sample" class="headerlink" title="Input Sample"></a>Input Sample</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">4</span><br><span class="line">2 0 2 3</span><br><span class="line">4</span><br><span class="line">1 0 2 5</span><br></pre></td></tr></table></figure><h3 id="Output-Sample"><a href="#Output-Sample" class="headerlink" title="Output Sample"></a>Output Sample</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">80</span><br><span class="line">90</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> SCUT校赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>usage</title>
      <link href="/2023/12/01/Other/usage/"/>
      <url>/2023/12/01/Other/usage/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="Load-images"><a href="#Load-images" class="headerlink" title="Load images"></a>Load images</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><h3 id="Tags"><a href="#Tags" class="headerlink" title="Tags"></a>Tags</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tags: [1, 2, 3] //标签1， 2， 3</span><br></pre></td></tr></table></figure><h3 id="Categories"><a href="#Categories" class="headerlink" title="Categories"></a>Categories</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">categories: //分类 </span><br><span class="line">-[1]//属于分类1</span><br><span class="line">-[2]//属于分类1</span><br><span class="line">-[3, 4]//属于分类3下的分类4</span><br></pre></td></tr></table></figure><h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><h3 id="大括号语法"><a href="#大括号语法" class="headerlink" title="大括号语法"></a>大括号语法</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125;  \lbrace \rbrace  </span><br><span class="line">//用 \&#123; \&#125; 会失效</span><br></pre></td></tr></table></figure><h3 id="公式换行失效"><a href="#公式换行失效" class="headerlink" title="公式换行失效"></a>公式换行失效</h3>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>About</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Movies</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Music</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
