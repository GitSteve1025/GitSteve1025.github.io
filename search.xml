<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python</title>
      <link href="/2023/12/19/Learning/Languages/Python/"/>
      <url>/2023/12/19/Learning/Languages/Python/</url>
      
        <content type="html"><![CDATA[<h1 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h1><h2 id="exegesis"><a href="#exegesis" class="headerlink" title="exegesis"></a>exegesis</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">多行注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">多行注释</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># print 语法</span></span><br><span class="line"><span class="comment"># print(value, ... , sep = &#x27; &#x27;, end = &#x27;\n&#x27;, file = None)</span></span><br><span class="line"><span class="comment"># sep 表示分割符 end 表示换行 file 文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print 字符串 写法</span></span><br><span class="line">S = <span class="string">&quot;SCUT&quot;</span> <span class="comment"># 定义字符串 S</span></span><br><span class="line"><span class="built_in">print</span>(S)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;SCUT&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;SCUT&quot;</span>) <span class="comment"># 建议和 cpp 保持一致</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;SCUT&#x27;&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;SCUT&quot;&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;S&#x27;</span> + <span class="string">&#x27;C&#x27;</span> + <span class="string">&#x27;U&#x27;</span> + <span class="string">&#x27;T&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(S, S, S) <span class="comment">#中间会有空格</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># file output</span></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&quot;data.txt&quot;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="comment"># w 写操作</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;SCUT&quot;</span>, file = fp) <span class="comment"># 输出到 data.txt</span></span><br><span class="line">fp.close() <span class="comment"># close file</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义 sep end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;SCUT&quot;</span>, <span class="string">&quot;SCUT&quot;</span>, sep = <span class="string">&#x27;####&#x27;</span>, end = <span class="string">&quot;@@@@\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line"><span class="built_in">print</span>(keyword.kwlist) <span class="comment"># 输出 python 的关键字集合 </span></span><br></pre></td></tr></table></figure><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var = <span class="built_in">input</span>(<span class="string">&quot;input Tips: &quot;</span>) <span class="comment"># 以字符串读入 # input Tips 是 读入提示用户</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(var)</span><br></pre></td></tr></table></figure><h2 id="variable-constant"><a href="#variable-constant" class="headerlink" title="variable &amp; constant"></a>variable &amp; constant</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">S = <span class="string">&quot;SCUT&quot;</span> <span class="comment"># 大写一般定义为常量</span></span><br><span class="line">s = <span class="string">&quot;SCUT&quot;</span> <span class="comment"># 小写一般定义为边量</span></span><br></pre></td></tr></table></figure><h2 id="type"><a href="#type" class="headerlink" title="type"></a>type</h2><h3 id="digit"><a href="#digit" class="headerlink" title="digit"></a>digit</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数默认十进制</span></span><br><span class="line">a = <span class="number">1918</span> <span class="comment"># 十进制</span></span><br><span class="line">b = <span class="number">0b011101111110</span> <span class="comment"># 二进制</span></span><br><span class="line">c = <span class="number">0o3576</span> <span class="comment"># 八进制</span></span><br><span class="line">d = <span class="number">0x77E</span> <span class="comment"># 16进制</span></span><br><span class="line"><span class="built_in">print</span>(a, b, c, d, sep = <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复数</span></span><br><span class="line">e = <span class="number">19</span> + <span class="number">18j</span></span><br><span class="line"><span class="built_in">print</span>(e) <span class="comment"># 整个打印</span></span><br><span class="line"><span class="built_in">print</span>(e.real) <span class="comment"># 实数部分</span></span><br><span class="line"><span class="built_in">print</span>(e.imag) <span class="comment"># 虚数部分</span></span><br></pre></td></tr></table></figure><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># string</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># \ 的转义用法</span></span><br><span class="line"><span class="comment"># \n 换行</span></span><br><span class="line"><span class="comment"># \t 制表</span></span><br><span class="line"><span class="comment"># \\ 一个反斜杠</span></span><br><span class="line"><span class="comment"># \&quot; 双引号</span></span><br><span class="line"><span class="comment"># \&#x27; 单引号</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\&quot;SCUT\&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\&#x27;SCUT\&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line">Sc = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">S</span></span><br><span class="line"><span class="string">C</span></span><br><span class="line"><span class="string">U</span></span><br><span class="line"><span class="string">T</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(Sc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0 1 2 3 4 5 6 7 正序下标</span></span><br><span class="line"><span class="comment"># SCUT1918</span></span><br><span class="line"><span class="comment"># -8 -7 -6 -5 -4 -3 -2 -1 逆序</span></span><br><span class="line">SchoolTime = <span class="string">&quot;SCUT1918&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># length</span></span><br><span class="line"><span class="comment"># len()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(SchoolTime))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切片 得到str区间[l, r] stringname[N:M] 得到区间[N, M - 1] !!!</span></span><br><span class="line"><span class="built_in">print</span>(SchoolTime[<span class="number">2</span> : <span class="number">6</span>]) <span class="comment"># 区间 [2, 5]</span></span><br><span class="line"><span class="built_in">print</span>(SchoolTime[-<span class="number">6</span> : -<span class="number">2</span>]) <span class="comment"># 区间 [-6, -3]</span></span><br><span class="line"><span class="built_in">print</span>(SchoolTime[:<span class="number">4</span>]) <span class="comment"># [0, 3] 前者默认 头部</span></span><br><span class="line"><span class="built_in">print</span>(SchoolTime[<span class="number">4</span>:]) <span class="comment"># [4, 7] 后者默认 尾部</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串常规操作</span></span><br><span class="line"><span class="comment"># x + y 拼接</span></span><br><span class="line"><span class="comment"># x * n 复制 n 次 x</span></span><br><span class="line"><span class="comment"># x in s 如果 x 是 s 的子串 结果为 True 否则为 False</span></span><br><span class="line">School = <span class="string">&quot;SCUT&quot;</span></span><br><span class="line">Time = <span class="string">&quot;1918&quot;</span></span><br><span class="line"><span class="built_in">print</span>(School + Time)</span><br><span class="line"><span class="built_in">print</span>(School * <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;AB&quot;</span> <span class="keyword">in</span> School)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;SC&quot;</span> <span class="keyword">in</span> School)</span><br></pre></td></tr></table></figure><h3 id="bool"><a href="#bool" class="headerlink" title="bool"></a>bool</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bool</span></span><br><span class="line">flag = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">10</span>)) <span class="comment"># 非 0 True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">0</span>)) </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="string">&quot;SCUT&quot;</span>)) <span class="comment"># 非 空 True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="string">&quot;&quot;</span>))</span><br></pre></td></tr></table></figure><h2 id="code-format"><a href="#code-format" class="headerlink" title="code format"></a>code format</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在文件最前面加上下面一句话 （包括 #）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># coding = utf-8</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># coding = gbk</span></span><br></pre></td></tr></table></figure><h2 id="type-transform"><a href="#type-transform" class="headerlink" title="type transform"></a>type transform</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get type</span></span><br><span class="line"><span class="comment"># type()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">&quot;SCUT&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># int to char </span></span><br><span class="line"><span class="comment"># chr()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">83</span>) + <span class="built_in">chr</span>(<span class="number">67</span>) + <span class="built_in">chr</span>(<span class="number">85</span>) + <span class="built_in">chr</span>(<span class="number">84</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># chr to int</span></span><br><span class="line"><span class="comment"># ord()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">&#x27;S&#x27;</span>), <span class="built_in">ord</span>(<span class="string">&#x27;C&#x27;</span>), <span class="built_in">ord</span>(<span class="string">&#x27;U&#x27;</span>), <span class="built_in">ord</span>(<span class="string">&#x27;T&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># to strting </span></span><br><span class="line"><span class="comment"># str()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(<span class="number">1918</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># to float</span></span><br><span class="line"><span class="comment"># float()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(<span class="number">1918</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># to hex</span></span><br><span class="line"><span class="comment"># hex()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="number">1918</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># to oct</span></span><br><span class="line"><span class="comment"># oct()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">oct</span>(<span class="number">1918</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># to bin</span></span><br><span class="line"><span class="comment"># bin()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="number">1918</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># eval</span></span><br><span class="line"><span class="comment"># 去除字符串引号 等价于执行内部语句</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">&quot;1 + 9 * 1 + 8&quot;</span>))</span><br><span class="line">S = <span class="string">&quot;1 + 9 * 1 + 8&quot;</span></span><br><span class="line">X = <span class="built_in">eval</span>(S)</span><br><span class="line"><span class="built_in">print</span>(X, <span class="built_in">type</span>(X)) <span class="comment"># 类型变化</span></span><br></pre></td></tr></table></figure><h2 id="compute"><a href="#compute" class="headerlink" title="compute"></a>compute</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1900</span> + <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 减</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1920</span> - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 乘</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">959</span> * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 除</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3836</span> / <span class="number">2</span>) <span class="comment"># float 类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 整除</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3836</span> // <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取余</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1918</span> % <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 幂运算 </span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span>**<span class="number">2</span>) <span class="comment"># = 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -=    x -= y  x = x - y</span></span><br><span class="line"><span class="comment"># +=    x += y  x = x + y</span></span><br><span class="line"><span class="comment"># *=    x *= y  x = x * y</span></span><br><span class="line"><span class="comment"># /=    x /= y  x = x / y</span></span><br><span class="line"><span class="comment"># %=    x %= y  x = x % y</span></span><br><span class="line"><span class="comment"># //=   x //= y  x = x // y</span></span><br><span class="line"><span class="comment"># **=   x **= y  x = x ** y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># swap</span></span><br><span class="line">a = <span class="string">&quot;SCUT&quot;</span></span><br><span class="line">b = <span class="string">&quot;1918&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a, b)</span><br><span class="line">a, b = b, a</span><br><span class="line"><span class="built_in">print</span>(a, b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较运算</span></span><br><span class="line"><span class="comment"># &gt;</span></span><br><span class="line"><span class="comment"># &lt;</span></span><br><span class="line"><span class="comment"># &gt;=</span></span><br><span class="line"><span class="comment"># &lt;=</span></span><br><span class="line"><span class="comment"># ==</span></span><br><span class="line"><span class="comment"># !=</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 逻辑运算</span></span><br><span class="line"><span class="comment"># and   = C++ &amp;&amp;</span></span><br><span class="line"><span class="comment"># or    = C++ ||</span></span><br><span class="line"><span class="comment"># not   = C++ !</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 位运算 (bit op)</span></span><br><span class="line"><span class="comment"># &amp;     且 </span></span><br><span class="line"><span class="comment"># |     或</span></span><br><span class="line"><span class="comment"># ^     异或</span></span><br><span class="line"><span class="comment"># ~     取反</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
          <category> Languages </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java</title>
      <link href="/2023/12/19/Learning/Languages/Java/"/>
      <url>/2023/12/19/Learning/Languages/Java/</url>
      
        <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>基本和 $C++$ 一样</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>;</span><br><span class="line"><span class="type">long</span>;</span><br><span class="line"><span class="type">short</span>;</span><br><span class="line"><span class="type">float</span>;</span><br><span class="line"><span class="type">double</span>;</span><br><span class="line"><span class="type">byte</span>;</span><br><span class="line"><span class="type">boolean</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="comment">// = C++ const</span></span><br></pre></td></tr></table></figure><h2 id="循环-条件"><a href="#循环-条件" class="headerlink" title="循环 &amp; 条件"></a>循环 &amp; 条件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//和 C++ 一样</span></span><br><span class="line"><span class="keyword">while</span>;</span><br><span class="line"><span class="keyword">do</span>-<span class="keyword">while</span>;</span><br><span class="line"><span class="keyword">for</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>-<span class="keyword">else</span>;</span><br><span class="line"><span class="keyword">switch</span>;</span><br></pre></td></tr></table></figure><h2 id="函数-function"><a href="#函数-function" class="headerlink" title="函数 $(function)$"></a>函数 $(function)$</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title function_">function_name</span> <span class="params">(parameters)</span> &#123;</span><br><span class="line"><span class="comment">//implement   </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重载 同 C++</span></span><br></pre></td></tr></table></figure><h2 id="基础类"><a href="#基础类" class="headerlink" title="基础类"></a>基础类</h2><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">abs(); <span class="comment">// 绝对值</span></span><br><span class="line">ceil(); <span class="comment">// 向上取整</span></span><br><span class="line">floor(); <span class="comment">// 向下取整</span></span><br><span class="line">round(); <span class="comment">// 四舍五入</span></span><br><span class="line">max();</span><br><span class="line">min();</span><br><span class="line">pow();</span><br><span class="line">log();</span><br><span class="line">sin();</span><br><span class="line">cos();</span><br><span class="line">sqrt();</span><br><span class="line">atan();</span><br><span class="line">atan2();</span><br><span class="line">random();</span><br></pre></td></tr></table></figure><h3 id="Character"><a href="#Character" class="headerlink" title="Character"></a>Character</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">isLetter();</span><br><span class="line">isDigit();</span><br><span class="line">isUpperCase();</span><br><span class="line">isLowerCase();</span><br><span class="line">toUpperCase();</span><br><span class="line">toLowerCase();</span><br><span class="line">toString();</span><br></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">charAt(index); <span class="comment">//return s[index]</span></span><br><span class="line">concat(str); <span class="comment">// append str to s</span></span><br><span class="line">equals(); <span class="comment">// == is incorrect!!!</span></span><br><span class="line">length();</span><br><span class="line">toUpperCase();</span><br><span class="line">toLowerCase();</span><br></pre></td></tr></table></figure><h3 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">append(str);</span><br><span class="line">reverse();</span><br><span class="line">delete(l, r); <span class="comment">// delete s[l - r]</span></span><br><span class="line">replace(l, r, str); <span class="comment">//replace s[l - r] with str </span></span><br></pre></td></tr></table></figure><h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><h3 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line"><span class="type">int</span> <span class="variable">dataname</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line"><span class="type">long</span> <span class="variable">dataname</span> <span class="operator">=</span> input.nextLong();</span><br><span class="line"><span class="type">short</span> <span class="variable">dataname</span> <span class="operator">=</span> input.nextShort();</span><br><span class="line"><span class="type">float</span> <span class="variable">dataname</span> <span class="operator">=</span> input.nextFloat();</span><br><span class="line"><span class="type">double</span> <span class="variable">dataname</span> <span class="operator">=</span> input.nextDouble();</span><br><span class="line"><span class="type">byte</span> <span class="variable">dataname</span> <span class="operator">=</span> input.nextByte();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">dataname</span> <span class="operator">=</span> input.nextBoolean();</span><br><span class="line"><span class="type">String</span> <span class="variable">dataname</span> <span class="operator">=</span> input.next();<span class="comment">//read a string</span></span><br><span class="line"><span class="type">String</span> <span class="variable">dataname</span> <span class="operator">=</span> input.nextLine();<span class="comment">//read a line</span></span><br></pre></td></tr></table></figure><h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(dataname); <span class="comment">// endl</span></span><br><span class="line">System.out.print(dataname); <span class="comment">// no endl</span></span><br></pre></td></tr></table></figure><h1 id="类-class"><a href="#类-class" class="headerlink" title="类 $(class)$"></a>类 $(class)$</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同 C++</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造 同 C++</span></span><br></pre></td></tr></table></figure><h2 id="继承-Inheritance"><a href="#继承-Inheritance" class="headerlink" title="继承 $(Inheritance)$"></a>继承 $(Inheritance)$</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extends</span> <span class="title class_">classname</span><span class="comment">// 表示继承 classname</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类不会自动调用父类构造函数！！！ </span></span><br><span class="line"><span class="built_in">super</span>(parameters); <span class="comment">//调用父类构造函数！！！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// java 不支持多继承 即一个类只能继承一个类，不能继承多个类</span></span><br></pre></td></tr></table></figure><h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数列表与被重写方法的参数列表必须完全相同</span></span><br><span class="line"><span class="comment">//构造方法不能被重写</span></span><br><span class="line"><span class="comment">//如果不能继承一个类，则不能重写该类的方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;<span class="comment">//Overload</span></span><br><span class="line">        <span class="comment">//implement</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多态-Polymorphism"><a href="#多态-Polymorphism" class="headerlink" title="多态 $(Polymorphism)$"></a>多态 $(Polymorphism)$</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承</span></span><br><span class="line"><span class="comment">//重写</span></span><br><span class="line"><span class="comment">//父类引用子类对象 </span></span><br><span class="line"><span class="type">Parent</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//同 C++</span></span><br></pre></td></tr></table></figure><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">catch</span>(ExceptionName var_name1) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">catch</span>(ExceptionName var_name2) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"> </span><br><span class="line"><span class="keyword">throws</span> ExceptionName;<span class="comment">//抛出异常</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span> &#123; <span class="comment">//无论是否异常 finally 内的语句 总会被执行</span></span><br><span class="line">    <span class="comment">//code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="I-O"><a href="#I-O" class="headerlink" title="$I &#x2F; O$"></a>$I &#x2F; O$</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//to do</span></span><br></pre></td></tr></table></figure><h1 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ArrayList;</span><br><span class="line"><span class="comment">// 操作</span></span><br><span class="line">size(); <span class="comment">//</span></span><br><span class="line">sort(); <span class="comment">// sort</span></span><br><span class="line">add(x); <span class="comment">// = append(x)</span></span><br><span class="line">remove(index); <span class="comment">// remove list[index]</span></span><br><span class="line"></span><br><span class="line">get(index); <span class="comment">// = list[index]</span></span><br><span class="line">set(index, x); <span class="comment">// set list[index] = x</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// T</span></span><br><span class="line">Integer;</span><br><span class="line">Double;</span><br><span class="line">Long;</span><br><span class="line">Short;</span><br><span class="line">String;</span><br><span class="line">Boolean;</span><br></pre></td></tr></table></figure><h1 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">add();<span class="comment">//</span></span><br><span class="line">remove(x);</span><br><span class="line">contains(x);<span class="comment">// 是否包含x</span></span><br><span class="line"></span><br><span class="line">size();</span><br><span class="line">clear();</span><br><span class="line">clone();</span><br><span class="line">isEmpty();</span><br></pre></td></tr></table></figure><h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">size();</span><br><span class="line">clear();</span><br><span class="line">clone();</span><br><span class="line">isEmpty();</span><br><span class="line"></span><br><span class="line">get(key);</span><br><span class="line">put(key, value);</span><br><span class="line"></span><br><span class="line">remove(key);</span><br><span class="line">replace(key, new_value);</span><br><span class="line"></span><br><span class="line">containsKey(); <span class="literal">true</span> / <span class="literal">false</span></span><br><span class="line"><span class="title function_">containsValue</span><span class="params">()</span>; <span class="literal">true</span> / <span class="literal">false</span></span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>一天速通 $Java$ 考试 。</p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
          <category> Languages </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown</title>
      <link href="/2023/12/13/Learning/Markdown/Markdown/"/>
      <url>/2023/12/13/Learning/Markdown/Markdown/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/Markdown/1.gif" alt="1"></p><p><img src="/images/Markdown/2.gif" alt="2"></p><p><img src="/images/Markdown/3.gif" alt="3"></p><p><img src="/images/Markdown/4.gif" alt="4"></p><p><img src="/images/Markdown/5.gif" alt="5"></p><p><img src="/images/Markdown/6.gif" alt="6"></p><p><img src="/images/Markdown/7.gif" alt="7"></p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Discrete mathematics</title>
      <link href="/2023/12/12/Learning/Course/Discrete%20mathematics/"/>
      <url>/2023/12/12/Learning/Course/Discrete%20mathematics/</url>
      
        <content type="html"><![CDATA[<h1 id="逻辑和证明"><a href="#逻辑和证明" class="headerlink" title="逻辑和证明"></a>逻辑和证明</h1><h2 id="命题逻辑"><a href="#命题逻辑" class="headerlink" title="命题逻辑"></a>命题逻辑</h2><h3 id="命题（-proposition-）"><a href="#命题（-proposition-）" class="headerlink" title="命题（$proposition$）"></a>命题（$proposition$）</h3><p>命题是一个陈述语句（即陈述事实的语句），它或真或假，但不能既真又假。</p><h3 id="条件（-implies-）"><a href="#条件（-implies-）" class="headerlink" title="条件（$implies$）"></a>条件（$implies$）</h3><p>令 $p$ 和 $q$ 为命题。条件语句 $p \rightarrow q$ 是命题“如果 $p$，则 $q$ ”。当 $p$ 为真而 $q$ 为假时，条件语句 $p \rightarrow q$ 为假，否则为真。在条件语句 $p \rightarrow q$ 中，$p$ 称为假设(前件、前提)，$q$ 称为结论(后件)。</p><table><thead><tr><th align="center">$p$</th><th align="center">$q$</th><th align="center">$p \rightarrow  q$</th></tr></thead><tbody><tr><td align="center">T</td><td align="center">T</td><td align="center">T</td></tr><tr><td align="center">T</td><td align="center">F</td><td align="center">F</td></tr><tr><td align="center">F</td><td align="center">T</td><td align="center">T</td></tr><tr><td align="center">F</td><td align="center">F</td><td align="center">T</td></tr></tbody></table><p>原命题：$p \rightarrow q$</p><p>逆命题（$converse$）：$q \rightarrow p$ </p><p>逆否命题（$contrapositive$）：$\neg q \rightarrow \neg p$ </p><p>反命题（$inverse$）：$\neg p \rightarrow \neg q$</p><h3 id="双条件（-biconditional-）"><a href="#双条件（-biconditional-）" class="headerlink" title="双条件（$biconditional$）"></a>双条件（$biconditional$）</h3><p>令 $p$ 和 $q$ 为命题。双条件语句 $p \leftrightarrow q$ 是命题“ $p$ 当且仅当 $q$ ”。当 $p$ 和 $q$ 有同样的真值时，双条件语句为真，否则为假。双条件语句也称为双向蕴含。</p><table><thead><tr><th align="center">$p$</th><th align="center">$q$</th><th align="center">$p \leftrightarrow q$</th></tr></thead><tbody><tr><td align="center">T</td><td align="center">T</td><td align="center">T</td></tr><tr><td align="center">T</td><td align="center">F</td><td align="center">F</td></tr><tr><td align="center">F</td><td align="center">T</td><td align="center">F</td></tr><tr><td align="center">F</td><td align="center">F</td><td align="center">T</td></tr></tbody></table><h3 id="逻辑运算符的优先级"><a href="#逻辑运算符的优先级" class="headerlink" title="逻辑运算符的优先级"></a>逻辑运算符的优先级</h3><table><thead><tr><th align="center">运算符</th><th align="center">优先级</th></tr></thead><tbody><tr><td align="center">$\neg$</td><td align="center">1</td></tr><tr><td align="center">$\wedge$</td><td align="center">2</td></tr><tr><td align="center">$\vee$</td><td align="center">3</td></tr><tr><td align="center">$\rightarrow$</td><td align="center">4</td></tr><tr><td align="center">$\leftrightarrow$</td><td align="center">5</td></tr></tbody></table><h3 id="永真式（重言式）-矛盾式-可能式"><a href="#永真式（重言式）-矛盾式-可能式" class="headerlink" title="永真式（重言式） &amp; 矛盾式 &amp;可能式"></a>永真式（重言式） &amp; 矛盾式 &amp;可能式</h3><p><strong>永真式</strong>（$tautology$）：一个真值永远是真的复合命题（无论其中出现的命题变元的真值是什么），也称为<strong>重言式</strong>。</p><p><strong>矛盾式</strong>（$contradiction$）：一个真值永远为假的复合命题。</p><p><strong>可能式</strong>（$contingency$）：既不是永真式又不是矛盾式的复合命题。</p><h2 id="命题等价式（-equivalent-）"><a href="#命题等价式（-equivalent-）" class="headerlink" title="命题等价式（$equivalent$）"></a>命题等价式（$equivalent$）</h2><h3 id="逻辑等价式"><a href="#逻辑等价式" class="headerlink" title="逻辑等价式"></a>逻辑等价式</h3><p>如果 $p \leftrightarrow q$ 是永真式，则复合命题 $p$ 和 $q$ 称为是逻辑等价的。用记号 $p \equiv q$ 表示 $p$ 和 $q$ 是逻辑等价的。</p><h2 id="谓词（-predicate-）与量词（-quantifier-）"><a href="#谓词（-predicate-）与量词（-quantifier-）" class="headerlink" title="谓词（$predicate$）与量词（$quantifier$）"></a>谓词（$predicate$）与量词（$quantifier$）</h2><h3 id="全称量化"><a href="#全称量化" class="headerlink" title="全称量化"></a>全称量化</h3><p>$P(x)$ 的全称量化是语句：“ $P(x)$ 对 $x$ 在其论域的所有值为真。”</p><p>符号 $\forall x P(x)$ 表示 $P(x)$ 的全称量化，其中 $\forall$ 称为全称量词。</p><p>命题 $\forall x P(x)$ 读做“对所有 $x$ , $P(x)$ ”或“对每个 $x$ ，$P(x)$”。一个使 $P(x)$ 为假的个体称为 $\forall x P(x)$ 的<strong>反例</strong>。</p><h3 id="存在量化"><a href="#存在量化" class="headerlink" title="存在量化"></a>存在量化</h3><p>$P(x)$ 的存在量化是语句：“论域中存在一个个体 $x$ 满足 $P(x)$ 。”</p><p>符号 $\exists x P(x)$ 表示 $P(x)$ 的存在量化，其中 $\exists$ 称为存在量词。</p><h3 id="量词优先级"><a href="#量词优先级" class="headerlink" title="量词优先级"></a>量词优先级</h3><p>$\forall &gt; \exists$</p><p><strong>注意</strong></p><p>$\forall x P(x) \vee Q(x)$ 是 $\forall x P(x)$ 和 $Q(x)$ 的析取</p><p>$\forall x (P(x) \vee Q(x))$ 是 $\forall x$ 对 $(P(x) \vee Q(x))$ 的析取</p><h3 id="涉及量词的逻辑等价式"><a href="#涉及量词的逻辑等价式" class="headerlink" title="涉及量词的逻辑等价式"></a>涉及量词的逻辑等价式</h3><p>涉及谓词和量词的语句是逻辑等价的当且仅当无论用什么谓词代入这些语句，也无论为这些命题函数里的变量指定什么论域，它们都有相同的真值。我们用 $S \equiv T$ 表示涉及谓词和量词的两个语句 $S$ 和 $T$ 是逻辑等价的。</p><p><strong>证明两个语句逻辑等价</strong> $P(x) \equiv Q(x)$</p><ol><li>$(P(x) &#x3D; T) \rightarrow (Q(x) &#x3D; T)$</li><li>$(Q(x) &#x3D; T) \rightarrow (P(x) &#x3D; T)$</li><li>$P(x) \equiv Q(x)$</li></ol><h3 id="量词的否定（德-cdot-摩根律）"><a href="#量词的否定（德-cdot-摩根律）" class="headerlink" title="量词的否定（德 $\cdot$ 摩根律）"></a>量词的否定（德 $\cdot$ 摩根律）</h3><table><thead><tr><th align="center">否定</th><th align="center">等价语句</th></tr></thead><tbody><tr><td align="center">$\neg \exists x P(x)$</td><td align="center">$\forall x \neg P(x)$</td></tr><tr><td align="center">$\neg \forall x P(x)$</td><td align="center">$\exists x \neg P(x)$</td></tr></tbody></table><h2 id="推理规则（-rule-of-inference-）"><a href="#推理规则（-rule-of-inference-）" class="headerlink" title="推理规则（$rule \ of \ inference$）"></a>推理规则（$rule \ of \ inference$）</h2><table><thead><tr><th align="left">推理规则</th><th align="center">永真式</th><th align="center">名称</th></tr></thead><tbody><tr><td align="left">$\quad p$<br>$\quad p \rightarrow q$<br>$\therefore q$</td><td align="center">$(p \wedge (p \rightarrow q)) \rightarrow q$</td><td align="center">假言推理</td></tr><tr><td align="left">$\quad \neg q$<br>$\quad p \rightarrow q$<br>$\therefore \neg p$</td><td align="center">$(\neg q \wedge (p \rightarrow q)) \rightarrow \neg p$</td><td align="center">取拒式</td></tr><tr><td align="left">$\quad p \rightarrow q$<br>$\quad q \rightarrow r$<br>$\therefore p \rightarrow r$</td><td align="center">$((p \rightarrow q) \wedge (q \rightarrow r)) \rightarrow (p \rightarrow r)$</td><td align="center">假言三段论</td></tr><tr><td align="left">$\quad p \vee q$<br>$\quad \neg p$<br>$\therefore q$</td><td align="center">$((p \vee q) \wedge \neg p) \rightarrow q$</td><td align="center">析取三段论</td></tr><tr><td align="left">$\quad p$<br>$\therefore p \vee q$</td><td align="center">$p \rightarrow (p \vee q)$</td><td align="center">附加律</td></tr><tr><td align="left">$\quad p \wedge q$<br>$\therefore p$</td><td align="center">$(p \wedge q) \rightarrow p$</td><td align="center">化简律</td></tr><tr><td align="left">$\quad p$<br>$\quad q$<br>$\therefore p \wedge q$</td><td align="center">$((p) \wedge (q)) \rightarrow (p \wedge q)$</td><td align="center">合取律</td></tr><tr><td align="left">$\quad p \vee q$<br>$\quad \neg p \vee r$<br>$\therefore q \vee r$</td><td align="center">$((p \vee q) \wedge (\neg p \vee r)) \rightarrow (q \vee r)$</td><td align="center">消解律</td></tr></tbody></table><p><strong>格式</strong></p><table><thead><tr><th align="center">步骤</th><th align="center">理由</th></tr></thead><tbody><tr><td align="center">1.表达式</td><td align="center">前提引入</td></tr><tr><td align="center">2.结论式</td><td align="center">XX律，用XX步</td></tr></tbody></table><p><strong>一次一条结论， 不可跳步骤</strong></p><p><strong>量化命题的推理规则</strong></p><table><thead><tr><th align="left">推理规则</th><th align="center">名称</th></tr></thead><tbody><tr><td align="left">$\quad \forall x P(x)$<br>$\therefore P(c)$</td><td align="center">全称实例</td></tr><tr><td align="left">$\quad P(c)$，任意 $c$<br>$\therefore \forall x P(x)$</td><td align="center">全称引入</td></tr><tr><td align="left">$\quad \exists x P(x)$<br>$\therefore P(c)$，对某个元素 $c$</td><td align="center">存在实例</td></tr><tr><td align="left">$\quad P(c)$，对某个元素 $c$<br>$\therefore \exists x P(x)$</td><td align="center">存在引入</td></tr></tbody></table><h2 id="推理表"><a href="#推理表" class="headerlink" title="推理表"></a>推理表</h2><p><img src="/images/Discretemathematics/expressions_page_one.jpg" alt="expressions_page_one"></p><p><img src="/images/Discretemathematics/expression_page_two.jpg" alt="expression_page_two"></p><h1 id="集合、函数"><a href="#集合、函数" class="headerlink" title="集合、函数"></a>集合、函数</h1><h2 id="集合（-set-）"><a href="#集合（-set-）" class="headerlink" title="集合（$set$）"></a>集合（$set$）</h2><p>集合是对象的一个无序的聚集，对象也称为集合的元素（element）或成员（member）。集合包含（contain）它的元素。我们用 $a \in A$ 来表示 $a$ 是集合 $A$ 中一个元素。而记号 $a \notin A$ 表示 $a$ 不是集合 $A$ 中的一个元素。</p><p><strong>证明集合相等</strong> （$A &#x3D; B$）</p><ol><li>$A \subseteq B$</li><li>$B \subseteq A$</li><li>$A &#x3D; B$</li></ol><h3 id="集合的大小"><a href="#集合的大小" class="headerlink" title="集合的大小"></a>集合的大小</h3><p>$|S|$ 表示集合的大小</p><h3 id="幂集（-power-set-）"><a href="#幂集（-power-set-）" class="headerlink" title="幂集（$power \ set$）"></a>幂集（$power \ set$）</h3><p>给定集合 $S$，$S$ 的幂集（$power \ set$）是集合 $S$ 所有子集的集合。$S$ 的幂集记为 $\mathcal{P} (S)$</p><h3 id="笛卡尔积（-Cartesian-product-）"><a href="#笛卡尔积（-Cartesian-product-）" class="headerlink" title="笛卡尔积（$Cartesian \ product$）"></a>笛卡尔积（$Cartesian \ product$）</h3><p>令 $A$ 和 $B$ 为集合。$A$ 和 $B$ 的笛卡儿积（$Cartesian \ product$）用 $A \times B$ 表示，是所有序偶 $(a, b)$ 的集合，其中 $a \in A, b \in B$。于是，$A \times B &#x3D; {(a, b) | a \in A \wedge b \in B }$</p><h2 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h2><p>$A \cup B &#x3D; \lbrace x | x \in A \vee x \in B \rbrace$</p><p>$A \cap B &#x3D; \lbrace x | x \in A \wedge x \in B \rbrace$</p><p>$A - B &#x3D; \lbrace x | x \in A \wedge x \notin B \rbrace &#x3D; A \cap \overline{B}$</p><p>$\overline{A} \quad \quad &#x3D; \lbrace x | x \in U \wedge x \notin A \rbrace$</p><h3 id="集合恒等式"><a href="#集合恒等式" class="headerlink" title="集合恒等式"></a>集合恒等式</h3><table><thead><tr><th align="left">恒等式</th><th align="center">名称</th></tr></thead><tbody><tr><td align="left">$A \cap U &#x3D; A$<br>$A \cup \varnothing &#x3D; A$</td><td align="center">恒等律</td></tr><tr><td align="left">$A \cup U &#x3D; U$<br>$A \cap \varnothing &#x3D; \varnothing $</td><td align="center">支配律</td></tr><tr><td align="left">$A \cup A &#x3D; A$<br>$A \cap A &#x3D; A$</td><td align="center">幂等律</td></tr><tr><td align="left">$\overline{(\overline{A})} &#x3D; A$</td><td align="center">补律</td></tr><tr><td align="left">$A \cup B &#x3D; B \cup A$<br>$A \cap B &#x3D; B \cap A$</td><td align="center">交换律</td></tr><tr><td align="left">$A \cup (B \cup C) &#x3D; (A \cup B) \cup C$<br>$A \cap (B \cap C) &#x3D; (A \cap B) \cap C$</td><td align="center">结合律</td></tr><tr><td align="left">$A \cup (B \cap C) &#x3D; (A \cup B) \cap (A \cup C)$<br>$A \cap (B \cup C) &#x3D; (A \cap B) \cup (A \cap C)$</td><td align="center">分配律</td></tr><tr><td align="left">$\overline{A \cap B} &#x3D; \overline{A} \cup \overline{B}$<br>$\overline{A \cup B} &#x3D; \overline{A} \cap \overline{B}$</td><td align="center">德 $\cdot$ 摩根律</td></tr><tr><td align="left">$A \cup (A \cap B) &#x3D; A$<br>$A \cap (A \cup B) &#x3D; A$</td><td align="center">吸收律</td></tr><tr><td align="left">$A \cup \overline{A} &#x3D; U$<br>$A \cap \overline{A} &#x3D; \varnothing$</td><td align="center">互补律</td></tr></tbody></table><h3 id="扩展并集和交集"><a href="#扩展并集和交集" class="headerlink" title="扩展并集和交集"></a>扩展并集和交集</h3><p>$\bigcup\limits_{i &#x3D; 1}^{n} A_{i} &#x3D; A_{1} \cup A_{2} \cup \cdot \cdot \cdot \cup A_{n}$</p><p>$\bigcap\limits_{i &#x3D; 1}^{n} A_{i} &#x3D; A_{1} \cap A_{2} \cap \cdot \cdot \cdot \cap A_{n}$</p><p>$\overline{\bigcup\limits_{i &#x3D; 1}^{n} A_{i}} &#x3D; \overline{A_{1}} \cap \overline{A_{2}} \cap \cdot \cdot \cdot \cap \overline{A_{n}}$</p><p>$\overline{\bigcap\limits_{i &#x3D; 1}^{n} A_{i}} &#x3D; \overline{A_{1}} \cup \overline{A_{2}} \cup \cdot \cdot \cdot \cup \overline{A_{n}}$</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="一对一-（单射）"><a href="#一对一-（单射）" class="headerlink" title="一对一 （单射）"></a>一对一 （单射）</h3><p>函数 $f$ 称为是一对一（$one-to-one$）或单射函数（$injection$），当且仅当对于 $f$ 的定义域中的所有 $a$ 和 $b$ 有 $f(a)&#x3D;f(b)$ 蕴含 $a &#x3D; b$。一个函数如果是一对一的，就称为是单射的（$injective$）。</p><p><img src="/images/Discretemathematics/one-to-one.png" alt="one-to-one"></p><h3 id="映上（满射）"><a href="#映上（满射）" class="headerlink" title="映上（满射）"></a>映上（满射）</h3><p>一个从 $A$ 到 $B$ 的函数 $f$ 称为映上（$onto$）或满射（$surjection$）函数，当且仅当对每个 $b \in B$ 有元素 $a \in A$ 使得 $f(a)&#x3D;b$。一个函数如果是映上的就称为是满射的（$surjective$）。</p><p><img src="/images/Discretemathematics/onto.png" alt="onto"></p><h3 id="一一对应（双射）"><a href="#一一对应（双射）" class="headerlink" title="一一对应（双射）"></a>一一对应（双射）</h3><p>函数 $f$ 是一一对应（$one-to-one correspondance$）或双射（$bijection$）函数，如果它既是一对一的又是映上的。这样的函数称为是双射的（$bijective$）。</p><p><img src="/images/Discretemathematics/sample.png" alt="sample"></p><h3 id="合成（-composition-）"><a href="#合成（-composition-）" class="headerlink" title="合成（$composition$）"></a>合成（$composition$）</h3><p>令 $g$ 为从集合 $A$ 到集合 $B$ 的函数，$f$ 是从集合 $B$ 到集合 $C$ 的函数，函数 $f$ 和 $g$ 的合成（$composition$），记作 $f \ o \ g$，定义为对任意$a \in A \quad (f \ o \ g)(a) &#x3D; f(g(a))$</p><p><img src="/images/Discretemathematics/composition.png" alt="composition"></p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="大-O-记号"><a href="#大-O-记号" class="headerlink" title="大 $O$ 记号"></a>大 $O$ 记号</h2><p>令 $f$ 和 $g$ 为从整数集或实数集到实数集的函数。如果存在常数 $C$ 和 $k$ 使得只要当定义 $x &gt; k$ 时就有<br> $|f(x)| \le C|g(x)|$ 我们就说 $f(x)$ 是 $O(g(x))$ 的。</p><p><strong>逻辑语言</strong></p><p>$\exists C \in R^{+} \quad \exists k \in Z^{+} \quad \forall x &gt; k : f(x) \le C \times g(x)$</p><p><strong>性质</strong></p><p>$f \preceq g$</p><p>$f &#x3D; O(g)$</p><p>$f \in O(g)$</p><h1 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h1><h2 id="关系及其性质"><a href="#关系及其性质" class="headerlink" title="关系及其性质"></a>关系及其性质</h2><p>设 $A$ 和 $B$ 是集合，一个从 $A$ 到 $B$ 的二元关系 $R$ 是 $A \times B$ 的子集</p><h3 id="自反（-reflexive-）"><a href="#自反（-reflexive-）" class="headerlink" title="自反（$reflexive$）"></a>自反（$reflexive$）</h3><p>若对每个元素 $a \in A$ 有 $(a,a) \in R$，那么定义在集合 $A$ 上的关系 $R$ 称为自反的。</p><p><strong>逻辑语言</strong></p><p>$\forall a (a \in A \rightarrow (a, a) \in R)$</p><h3 id="反自反（-irreflexive-）"><a href="#反自反（-irreflexive-）" class="headerlink" title="反自反（$irreflexive$）"></a>反自反（$irreflexive$）</h3><p>若对每个元素 $a \in A$ 有 $(a,a) \notin R$，那么定义在集合 $A$ 上的关系 $R$ 称为反自反的。</p><p><strong>逻辑语言</strong></p><p>$\forall a (a \in A \rightarrow (a, a) \notin R)$</p><h3 id="对称（-symmetric-）"><a href="#对称（-symmetric-）" class="headerlink" title="对称（$symmetric$）"></a>对称（$symmetric$）</h3><p>对于任意 $a,b \in A$，若只要 $(a,b) \in R$ 就有 $(b,a) \in R$，则称定义在集合 $A$ 上的关系 $R$ 为对称的。</p><p><strong>逻辑语言</strong></p><p>$\forall a \forall b ((a, b) \in R \rightarrow (b, a) \in R)$</p><h3 id="反对称（-antisymmetric-）"><a href="#反对称（-antisymmetric-）" class="headerlink" title="反对称（$antisymmetric$）"></a>反对称（$antisymmetric$）</h3><p>对于任意 $a,b \in A$，若 $(a,b) \in R$ 且 $(b,a) \in R$，一定有 $a &#x3D; b$ 则称定义在集合 $A$ 上的关系 $R$ 为反对称的。</p><p><strong>逻辑语言</strong></p><p>$\forall a \forall b (((a, b) \in R \wedge (b, a) \in R) \rightarrow (a &#x3D; b))$</p><h3 id="传递（-transitive-）"><a href="#传递（-transitive-）" class="headerlink" title="传递（$transitive$）"></a>传递（$transitive$）</h3><p>若对于任意 $a,b,c \in A$，$(a,b) \in R$ 并且 $(b,c)\in R$ 则 $(a,c) \in R$，那么定义在集合 $A$ 上的关系 $R$ 称为传递的。</p><p><strong>逻辑语言</strong></p><p>$\forall a \forall b \forall c (((a, b) \in R \wedge (b, c) \in R ) \rightarrow (a, b) \in R)$</p><h3 id="合成（-composition-）-1"><a href="#合成（-composition-）-1" class="headerlink" title="合成（$composition$）"></a>合成（$composition$）</h3><p>设 $R$ 是从集合 $A$ 到集合 $B$ 的关系，$S$ 是从集合 $B$ 到集合 $C$ 的关系。$R$ 与 $S$ 的合成是由有序对 $(a,c)$ 的集合构成的关系，其中 $a \in A,c \in C$，并且存在一个 $b \in B$ 的元素，使得 $(a,b) \in R$ 且 $(b,c) \in S$。我们用 $S \ o \ R$ 表示 $R$ 与 $S$ 的合成。</p><h3 id="幂（-power-）"><a href="#幂（-power-）" class="headerlink" title="幂（$power$）"></a>幂（$power$）</h3><p>设 $R$ 是集合 $A$ 上的关系。$R$ 的 $n$ 次幂 $R^{n} (n &#x3D; 1,2,3, \cdot \cdot \cdot)$ 递归地定义为 $R^{1} &#x3D; R$ 和 $R^{n + 1} &#x3D; R^{n} \ o \ R$</p><h2 id="关系（-relation-）的表示"><a href="#关系（-relation-）的表示" class="headerlink" title="关系（$relation$）的表示"></a>关系（$relation$）的表示</h2><h3 id="矩阵（-matrix-）表示"><a href="#矩阵（-matrix-）表示" class="headerlink" title="矩阵（$matrix$）表示"></a>矩阵（$matrix$）表示</h3><p>可以用 0-1 矩阵表示有穷集之间的关系</p><p><img src="/images/Discretemathematics/matrix.png" alt="matrix"></p><p><strong>部分关系矩阵形式</strong></p><p><img src="/images/Discretemathematics/matrix_of_relation.png" alt="matrix_of_relation"></p><h3 id="图（-graph-）表示"><a href="#图（-graph-）表示" class="headerlink" title="图（$graph$）表示"></a>图（$graph$）表示</h3><p>一个有向图由顶点（或结点）集 $V$ 和边（或弧）集 $E$ 组成，其中边集是 $V$ 中元素的有序对的集合。顶点 $a$ 叫做边 $(a,b)$ 的始点，而顶点 $b$ 叫做这条边的终点。形如 $(a,a)$ 的边用一条从顶点 $a$ 到自身的弧表示。这种边叫做<strong>环</strong>。</p><p><img src="/images/Discretemathematics/graph_of_relation.png" alt="graph_of_relation"></p><h2 id="关系的闭包（-closure-）"><a href="#关系的闭包（-closure-）" class="headerlink" title="关系的闭包（$closure$）"></a>关系的闭包（$closure$）</h2><p><strong>自反闭包 $r(R)$ ：</strong>包含 $R$ 关系，向 $R$ 关系中，添加有序对，变成<strong>自反</strong>的<strong>最小</strong>的二元关系。</p><p><strong>对称闭包 $s(R)$ ：</strong>包含 $R$ 关系，向 $R$ 关系中，添加有序对，变成<strong>对称</strong>的<strong>最小</strong>的二元关系。</p><p><strong>传递闭包 $t (R)$ ：</strong>包含 $R$ 关系，向 $R$ 关系中，添加有序对，变成<strong>传递</strong>的<strong>最小</strong>的二元关系。</p><h3 id="沃舍尔算法（-Warshall-）"><a href="#沃舍尔算法（-Warshall-）" class="headerlink" title="沃舍尔算法（$Warshall$）"></a>沃舍尔算法（$Warshall$）</h3><p><strong>求传递闭包</strong></p><p><img src="/images/Discretemathematics/Warshall.png" alt="Warshall"></p><p>注意首先<strong>枚举中间</strong>的 $k$ </p><h2 id="等价关系（-equivalence-relation-）"><a href="#等价关系（-equivalence-relation-）" class="headerlink" title="等价关系（$equivalence \ relation$）"></a>等价关系（$equivalence \ relation$）</h2><h3 id="等价关系"><a href="#等价关系" class="headerlink" title="等价关系"></a>等价关系</h3><p>定义在集合 $A$ 上的关系叫做等价关系，如果它是<strong>自反</strong>的、<strong>对称</strong>的和<strong>传递</strong>的。</p><p><strong>证明等价关系即证明该关系具有自反，对称，传递性质</strong></p><h3 id="等价类"><a href="#等价类" class="headerlink" title="等价类"></a>等价类</h3><p>设 $R$ 是定义在集合 $A$ 上的等价关系。与 $A$ 中的一个元素 $a$ 有关系的<strong>所有元素的集合</strong>叫做 $a$ 的<strong>等价类</strong>。 $A$ 的关于 $R$ 的等价类记作 $[a]_{R}$。当只考虑一个关系时，我们将省去下标 $R$ 并把这个等价类写作 $[a]$。</p><p>换句话说，如果 $R$ 是定义在集合 $A$ 上的等价关系，则元素 $a$ 的等价类是 $[a]_{R} &#x3D; \lbrace s| (a, s) \in R \rbrace$</p><p>如果 $b \in [a]_{R}$，$b$ 叫做这个等价类的<strong>代表元</strong>。</p><h2 id="偏序（-partial-ordering-）"><a href="#偏序（-partial-ordering-）" class="headerlink" title="偏序（$partial \ ordering$）"></a>偏序（$partial \ ordering$）</h2><h3 id="偏序集"><a href="#偏序集" class="headerlink" title="偏序集"></a>偏序集</h3><p>定义在集合 $S$上的关系 $R$，如果它是<strong>自反</strong>的、<strong>反对称</strong>的和<strong>传递</strong>的，就称为偏序。集合 $S$ 与定义在其上的偏序 $R$ 一起称为偏序集，记作 $(S,R)$。集合 $S$ 中的成员称为偏序集的元素</p><p>偏序集 $(S, \preccurlyeq )$中的元素 $a$ 和 $b$ 称为可比的，如果 $a \preccurlyeq b$ 或 $b \preccurlyeq a$ 。当 $a$ 和 $b$ 是 $S$ 中<br>的元素并且既没有 $a \preccurlyeq b$ ，也没有 $b \preccurlyeq a$ ，则称 $a$ 与是不可比的。</p><h3 id="全序集"><a href="#全序集" class="headerlink" title="全序集"></a>全序集</h3><p>如果 $(S, \preccurlyeq )$ 是偏序集，且 $S$ 中的<strong>每对元素都是可比</strong>的，则 $S$ 称为全序集或线序集，且 $\preccurlyeq$ 称为全序或线序。一个全序集也称为链。</p><h3 id="良序集（-well-ordered-set-）"><a href="#良序集（-well-ordered-set-）" class="headerlink" title="良序集（$well-ordered \ set$）"></a>良序集（$well-ordered \ set$）</h3><p>对于偏序集 $(S, \preccurlyeq )$ ，如果 $\preccurlyeq$ 是全序，并且 $S$ 的每个非空子集都有一个<strong>最小元素</strong>，就称它为良序集。</p><h3 id="哈塞图"><a href="#哈塞图" class="headerlink" title="哈塞图"></a>哈塞图</h3><p><img src="/images/Discretemathematics/Hasse.png" alt="Hasse"></p><p>偏序集 $(S, \preccurlyeq )$ 构造哈塞图 （<strong>上大下小，没有边则不可比较</strong>）</p><h3 id="极大元（-maximal-element-）与极小元（-minimal-element-）"><a href="#极大元（-maximal-element-）与极小元（-minimal-element-）" class="headerlink" title="极大元（$maximal \ element$）与极小元（$minimal \ element$）"></a>极大元（$maximal \ element$）与极小元（$minimal \ element$）</h3><p><strong>极大元：</strong> 当不存在 $b \in S$ 使得 $a \prec b$ ， $a$ 在偏序集 $(S, \preccurlyeq )$ 中是极大元。</p><p><strong>极小元：</strong> 当不存在 $b \in S$ 使得 $b \prec a$ ， $a$ 在偏序集 $(S, \preccurlyeq )$ 中是极小元。</p><h3 id="最大元（-greatest-element-）与最小元（-least-element-）"><a href="#最大元（-greatest-element-）与最小元（-least-element-）" class="headerlink" title="最大元（$greatest \ element$）与最小元（$least \ element$）"></a>最大元（$greatest \ element$）与最小元（$least \ element$）</h3><p><strong>最大元：</strong>偏序集内元素 $a$ 大于<strong>每个其他的元素</strong>， $a$ 在偏序集 $(S, \preccurlyeq )$ 中是最大元。</p><p><strong>最小元：</strong>偏序集内元素 $a$ 小于<strong>每个其他的元素</strong>， $a$ 在偏序集 $(S, \preccurlyeq )$ 中是最小元。</p><h3 id="格（-lattice-）"><a href="#格（-lattice-）" class="headerlink" title="格（$lattice$）"></a>格（$lattice$）</h3><p>如果一个偏序集的<strong>每对元素都有最小上界和最大下界</strong>，就称这个偏序集为格</p><h3 id="拓扑排序（-topological-sort-）"><a href="#拓扑排序（-topological-sort-）" class="headerlink" title="拓扑排序（$topological \ sort$）"></a>拓扑排序（$topological \ sort$）</h3><p><img src="/images/Discretemathematics/toposort.png" alt="toposort"></p><p><strong>引理：</strong>每个有穷非空偏序集 $(S, \preccurlyeq )$ 至少有一个极小元。</p><h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h2 id="图和图模型"><a href="#图和图模型" class="headerlink" title="图和图模型"></a>图和图模型</h2><p>一个图 $G&#x3D;(V,E)$ 由顶点（或结点）的非空集 $V$ 和边的集合 $E$ 构成，每条边有一个或两个顶点与它相连，这样的顶点称为边的端点。边连接它的端点。</p><h2 id="图的术语和几种特殊的图"><a href="#图的术语和几种特殊的图" class="headerlink" title="图的术语和几种特殊的图"></a>图的术语和几种特殊的图</h2><h3 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h3><p>若 $u$ 和 $v$ 是无向图 $G$ 中的一条边 $e$ 的端点，则称两个顶点 $u$ 和 $v$ 在 $G$ 里邻接（或相邻）。这样的边 $e$ 称为关联顶点 $u$ 和 $v$ ，也可以说边 $e$ 连接 $u$ 和 $v$ 。</p><p>图 $G&#x3D;(V,E)$ 中，顶点 $v$ 的所有相邻顶点的集合，记作 $N(v)$ ，称为顶点 $v$ 的邻居。若 $A$ 是 $V$ 的子集，我们用 $N(A)$ 表示图 $G$ 中至少和 $A$ 中一个顶点相邻的所有顶点的集合。所以 $N(A)&#x3D;\bigcup\limits_{v \in A} N(v)$。</p><p>在无向图中，顶点的度是与该顶点相关联的边的数目，例外的情形是，<strong>顶点上的环</strong>为顶点的度做出<strong>双倍贡献</strong>。顶点 $v$ 的度表示成 $deg(v)$ 。</p><h3 id="握手定理"><a href="#握手定理" class="headerlink" title="握手定理"></a>握手定理</h3><p>设 $G &#x3D; (V, E)$ 是有 $m$ 条边的无向图，则 $2m &#x3D; \sum\limits_{v \in V} deg(v)$</p><p><strong>无向图有偶数个度为奇数的顶点</strong>。</p><p><strong>证明：</strong></p><p>$2m &#x3D; \sum\limits_{v \in V} deg(v) &#x3D; \sum\limits_{v \in V_{1}} deg(v) + \sum\limits_{v \in V_{2}} deg(v)$</p><p>设 $V_{1}$ 是度数为偶数的集合， $V_{2}$ 是度数为奇数的集合</p><p>$2m$ 和 $\sum\limits_{v \in V_{1}} deg(v)$ 都是偶数，故 $\sum\limits_{v \in V_{2}} deg(v)$ 为偶数。</p><h3 id="出度与入度（-degree-）"><a href="#出度与入度（-degree-）" class="headerlink" title="出度与入度（$degree$）"></a>出度与入度（$degree$）</h3><p>$deg^{+}(v)$ 表示 $v$ 的出度。</p><p>$deg^{-}(v)$ 表示 $v$ 的入度。</p><h3 id="完全图（-K-n-）"><a href="#完全图（-K-n-）" class="headerlink" title="完全图（$K_{n}$）"></a>完全图（$K_{n}$）</h3><p><img src="/images/Discretemathematics/%E5%AE%8C%E5%85%A8%E5%9B%BE.png" alt="完全图"></p><h3 id="圈图（-C-n-）"><a href="#圈图（-C-n-）" class="headerlink" title="圈图（$C_{n}$）"></a>圈图（$C_{n}$）</h3><p><img src="/images/Discretemathematics/%E5%9C%88%E5%9B%BE.png" alt="圈图"></p><h3 id="轮图（-W-n-）"><a href="#轮图（-W-n-）" class="headerlink" title="轮图（$W_{n}$）"></a>轮图（$W_{n}$）</h3><p><img src="/images/Discretemathematics/%E8%BD%AE%E5%9B%BE.png" alt="轮图"></p><h3 id="立方体图（-Q-n-）"><a href="#立方体图（-Q-n-）" class="headerlink" title="立方体图（$Q_{n}$）"></a>立方体图（$Q_{n}$）</h3><p><img src="/images/Discretemathematics/%E7%AB%8B%E6%96%B9%E5%9B%BE.png" alt="立方图"></p><h3 id="二分图（-bipartite-graph-）"><a href="#二分图（-bipartite-graph-）" class="headerlink" title="二分图（$bipartite \ graph$）"></a>二分图（$bipartite \ graph$）</h3><p>若把简单图 $G$ 的顶点集分成两个不相交的非空集合 $V_{1}$ 和 $V_{2}$ ，使得图中的每一条边都连接 $V_{1}$ 中的一个顶点与 $V_{2}$ 中的一个顶点（因此 $G$ 中没有边连接 $V_{1}$ 中的两个顶点或 $V_{2}$ 中的两个顶点），则 $G$ 称为二分图。当此条件成立时，称 $(V_{1},V_{2})$ 为 $G$ 的顶点集的一个<br>二部划分。</p><p><img src="/images/Discretemathematics/C6_%E4%BA%8C%E5%88%86%E5%9B%BE.png" alt="C6_二分图"></p><h3 id="完全二分图（-K-m-n-）"><a href="#完全二分图（-K-m-n-）" class="headerlink" title="完全二分图（$K_{m, n}$）"></a>完全二分图（$K_{m, n}$）</h3><p><img src="/images/Discretemathematics/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%88%86%E5%9B%BE.png" alt="完全二分图"></p><h3 id="二分图和匹配（-match-）"><a href="#二分图和匹配（-match-）" class="headerlink" title="二分图和匹配（$match$）"></a>二分图和匹配（$match$）</h3><p><strong>最大匹配：</strong>包含最多边数的一个匹配。</p><p><strong>霍尔婚姻定理：</strong> 带有二部划分 $(V_{1},V_{2})$ 的二分图 $G &#x3D; (V,E)$ 中有一个从 $V_{1}$ 到 $V_{2}$ 的完全匹配当且仅当对于 $V_{1}$ 的所有子集 $A$ ，有 $|N(A)| \ge |A|$ 。</p><p><strong>真子图：</strong>图 $G&#x3D;(V,E)$ 的子图是图 $H &#x3D; (W,F)$，其中 $W \subseteq V$ 且 $F \subseteq E$ 。若 $H \neq G$ ，则称图 $G$ 的子图 $H$ 是 $G$ 的真子图。</p><p><strong>子图：</strong>令 $G&#x3D;(V,E)$ 是一个简单图。图 $(W,F)$ 是由顶点集 $V$ 的子集 $W$ <strong>导出的子图</strong>，其中边集 $F$ 包含 $E$ 中的一条边当且仅当这条边的两个端点都在 $W$ 中。</p><p><img src="/images/Discretemathematics/%E5%AD%90%E5%9B%BE.png" alt="子图"></p><p><strong>图的并集：</strong>两个简单图 $G_{1} &#x3D; (V_{1},E_{1})$ 和 $G_{2} &#x3D; (V_{2}, E_{2})$ 的并图是带有顶点集 $V_{1} U V_{2}$ 和边集 $E_{1} U E_{2}$ 的简单图。 $G_{1}$ 和 $G_{2}$ 的并图表示成 $G_{1} U G_{2}$ 。</p><h2 id="图的同构"><a href="#图的同构" class="headerlink" title="图的同构"></a>图的同构</h2><h3 id="图的表示"><a href="#图的表示" class="headerlink" title="图的表示"></a>图的表示</h3><p><strong>邻接表</strong>（适用稀疏图）（$adjacency \ table$）</p><p><img src="/images/Discretemathematics/%E6%97%A0%E5%90%91%E5%9B%BE%E9%82%BB%E6%8E%A5%E8%A1%A8.png" alt="无向图邻接表"></p><p><img src="/images/Discretemathematics/%E6%9C%89%E5%90%91%E5%9B%BE%E9%82%BB%E6%8E%A5%E8%A1%A8.png" alt="有向图邻接表"></p><p><strong>邻接矩阵</strong>（适用稠密图）（$adjacency \ matrix$）</p><p><img src="/images/Discretemathematics/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5.png" alt="邻接矩阵"></p><p><strong>关联矩阵</strong>（$incidence \ matrix$）</p><p><img src="/images/Discretemathematics/%E5%85%B3%E8%81%94%E7%9F%A9%E9%98%B5.png" alt="关联矩阵"></p><p><img src="/images/Discretemathematics/%E5%85%B3%E8%81%94%E7%9F%A9%E9%98%B5%E7%A4%BA%E4%BE%8B.png" alt="关联矩阵示例"></p><h3 id="图的同构（-isomorphism-）"><a href="#图的同构（-isomorphism-）" class="headerlink" title="图的同构（$isomorphism$）"></a>图的同构（$isomorphism$）</h3><p>设 $G &#x3D; (V_{1},E_{1})$ 和 $G &#x3D; (V_{2}, E_{2})$ 是简单图，若存在一对一的和映上的从 $V_{1}$ 到 $V_{2}$ 的函数 $f$ ，且 $f$ 具有这样的性质：对 $V_{1}$ 中所有的 $a$ 和 $b$ 来说， $a$ 和 $b$ 在 $G_{1}$ 中相邻当且仅当 $f(a)$ 和 $f(b)$ 在 $G_{2}$ 中相邻，则称 $G_{1}$ 与 $G_{2}$ 是同构的。这样的函数 $f$ 称为同构。两个不同构的简单图称为非同构的。</p><p>(同构：两个图更换顶点和边名字后完全一样，可以移动顶点和边的位置)</p><p><img src="/images/Discretemathematics/%E5%90%8C%E6%9E%84%E5%9B%BE.png" alt="同构图"></p><h3 id="图同构的判定"><a href="#图同构的判定" class="headerlink" title="图同构的判定"></a>图同构的判定</h3><p><strong>必要条件</strong></p><p>顶点数相等。</p><p>边数相等。</p><p>对应顶点的度数相等。</p><p>判定时先看<strong>必要条件</strong>，若相同，暴力移动一个图顶点的位置，看是否可以移动成另一个图。</p><p><img src="/images/Discretemathematics/%E4%BE%8B%E9%A2%98.png" alt="例题"></p><p>该图是同构的，可尝试同构。</p><h2 id="连通性（-connectivity-）"><a href="#连通性（-connectivity-）" class="headerlink" title="连通性（$connectivity$）"></a>连通性（$connectivity$）</h2><h3 id="无向图连通性"><a href="#无向图连通性" class="headerlink" title="无向图连通性"></a>无向图连通性</h3><p>若无向图中每一对不同的顶点之间都有通路，则该图称为连通的。</p><p><img src="/images/Discretemathematics/%E6%97%A0%E5%90%91%E5%9B%BE%E8%BF%9E%E9%80%9A%E6%80%A7.png" alt="无向图连通性"></p><p>$G_{1}$ 连通， $G_{2}$ 不连通。</p><h3 id="有向图连通性"><a href="#有向图连通性" class="headerlink" title="有向图连通性"></a>有向图连通性</h3><p>若对于有向图中的任意顶点 $a$ 和 $b$ ，都有从 $a$ 到 $b$ 和从 $b$ 到 $a$ 的通路，则该图是强连通的。（同一个强连通分量内，任意两点可互达）</p><p><img src="/images/Discretemathematics/%E6%9C%89%E5%90%91%E5%9B%BE%E8%BF%9E%E9%80%9A%E6%80%A7.png" alt="有向图连通性"></p><p>$G$ 是强连通的， $H$ 不是强连通的。（$H$ 中 $b$ 可以到 $a$ ， $a$ 不可以到 $b$ ）</p><h3 id="通路与同构"><a href="#通路与同构" class="headerlink" title="通路与同构"></a>通路与同构</h3><p>判断是否都具有<strong>特定长度的简单回路</strong>，来证明两个图是不是同构的。还可以用通路求出潜在的同构映射。</p><h3 id="计算顶点间的通路数"><a href="#计算顶点间的通路数" class="headerlink" title="计算顶点间的通路数"></a>计算顶点间的通路数</h3><p>设 $G$ 是一个图，该图的<strong>邻接矩阵</strong> $A$ 相对于图中的顶点顺序 $v_{1}, v_{2}, ··· , v_{n}$ （允许带有无向或有向边、带有多重边和环）。从 $v_{i}$ 到 $v_{j}$ 长度为 $r$ 的不同通路的数目等于 $A^{r}$ 的第 $(i,j)$ 项，其中 $r$ 是正整数。</p><p><strong>证明</strong></p><p>用数学归纳法证明。设 $G$ 是带有邻接矩阵 $A$ 的图（假设 $G$ 的顶点具有顺序 $v_{1}, v_{2}, ··· , v_{n}$ ）。从 $v_{i}$ 到 $v_{j}$ 长度为 $1$ 的通路数是 $A$ 的第  $(i,j)$ 项，因为该项是从 $v_{i}$ 到 $v_{j}$ 的边数。</p><p>假设 $A^{r}$ 的第 $(i,j)$ 项是从 $v_{i}$ 到 $v_{j}$ 长度为 $r$ 的不同通路的个数。这是归纳假设。因为 $A^{r + 1} &#x3D; A^{r}A$ ，所以 $A^{r + 1}$ 的第 $(i,j)$ 项等于 $<br>b_{i1} a_{1j} + b_{i2} a_{2j} + ··· + b_{in} a_{nj}$ </p><p>其中 $b_{ik}$ 是 $A^{r}$ 的第 $(i,k)$ 项。根据归纳假设， $b_{ik}$ 是从 $v_{i}$ 到 $v_{k}$ 长度为 $r$ 的通路数。</p><p>从 $v_{i}$ 到 $v_{j}$ 长度为 $r+1$ 的通路，包括从 $v_{i}$ 到某个中间顶点 $v_{k}$ 长度为 $r$ 的通路以及从 $v_{k}$ 到 $v_{j}$ 的边。根据计数的乘积法则，这样的通路个数是从 $v_{i}$ 到 $v_{k}$ 长度为 $r$ 的通路数（即 $b_{ik}$ ）与从 $v_{k}$ 到 $v_{j}$ 的边数（即 $a_{kj}$）积。当对所有可能的中间顶点 $v_{k}$ 求这些乘积之和时，根据计数的求和法则，就可以得出所需要的结果。</p><h2 id="欧拉通路（-Euler-path-）与哈密顿通路-（-Hamilton-path-）"><a href="#欧拉通路（-Euler-path-）与哈密顿通路-（-Hamilton-path-）" class="headerlink" title="欧拉通路（$Euler \ path$）与哈密顿通路 （$Hamilton \ path$）"></a>欧拉通路（$Euler \ path$）与哈密顿通路 （$Hamilton \ path$）</h2><h3 id="欧拉回路和欧拉通路"><a href="#欧拉回路和欧拉通路" class="headerlink" title="欧拉回路和欧拉通路"></a>欧拉回路和欧拉通路</h3><p><strong>欧拉回路（$Euler \ circuit$）：</strong>图 $G$ 中的欧拉回路是包含 $G$ 的每一条<strong>边</strong>的<strong>简单回路</strong>。</p><p><strong>欧拉通路（$Euler \ path$）：</strong>图 $G$ 中的欧拉通路是包含 $G$ 的每一条<strong>边</strong>的<strong>简单通路</strong>。</p><h3 id="欧拉回路和欧拉通路充要条件"><a href="#欧拉回路和欧拉通路充要条件" class="headerlink" title="欧拉回路和欧拉通路充要条件"></a>欧拉回路和欧拉通路充要条件</h3><p><strong>欧拉回路</strong></p><p>含有至少 $2$ 个顶点的连通多重图具有欧拉回路当且仅当它的<strong>每个顶点的度都为偶数</strong>。</p><p><strong>欧拉通路</strong></p><p>连通多重图具有欧拉通路但无欧拉回路当且仅当它<strong>恰有 $2$ 个度为奇数</strong>的顶点。</p><p><strong>（欧拉回路与欧拉通路不共存）</strong></p><h3 id="哈密顿回路和哈密顿通路"><a href="#哈密顿回路和哈密顿通路" class="headerlink" title="哈密顿回路和哈密顿通路"></a>哈密顿回路和哈密顿通路</h3><p><strong>哈密顿回路（$Hamilton \ circuit$）：</strong>经过图 $G$ 中每一个<strong>顶点</strong>恰好一次的<strong>简单回路</strong>称为哈密顿回路。</p><p><strong>哈密顿通路（$Hamilton \ path$）：</strong>经过图 $G$ 中每一个<strong>顶点</strong>恰好一次的<strong>简单通路</strong>称为哈密顿通路。</p><h3 id="哈密顿回路的充分条件"><a href="#哈密顿回路的充分条件" class="headerlink" title="哈密顿回路的充分条件"></a>哈密顿回路的充分条件</h3><p>（注意是<strong>充分条件</strong>）</p><p><strong>狄拉克定理：</strong> 如果 $G$ 是有 $n$ 个顶点的简单图，其中 $n \ge 3$ ，并且 $G$ 中每个顶点的度都至少为 $n&#x2F;2$ ，则 $G$ 有哈密顿回路。</p><p><strong>欧尔定理：</strong>如果 $G$ 是有 $n$ 个顶点的简单图，其中 $n \ge 3$ ，并且对于 $G$ 中<strong>每一对不相邻</strong>的顶点 $u$ 和 $v$ 来说，都有 $deg(u) + deg(v) \ge n$ ，则 $G$ 有哈密顿回路。</p><h2 id="最短通路问题"><a href="#最短通路问题" class="headerlink" title="最短通路问题"></a>最短通路问题</h2><h3 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h3><p><img src="/images/Discretemathematics/Dijkstra.png" alt="Dijkstra"></p><h2 id="平面图（-planar-graph-）"><a href="#平面图（-planar-graph-）" class="headerlink" title="平面图（$planar \ graph$）"></a>平面图（$planar \ graph$）</h2><p>若可以在平面中画出一个图而边没有任何交叉（其中边的交叉是表示边的直线或弧线在它们的公共端点以外的地方相交），则这个图是平面图。这种画法称为这个图的平面表示。</p><p><img src="/images/Discretemathematics/%E5%B9%B3%E9%9D%A2%E5%9B%BE.png" alt="平面图"></p><h3 id="欧拉公式"><a href="#欧拉公式" class="headerlink" title="欧拉公式"></a>欧拉公式</h3><p>设 $G$ 是带 $e$ 条边和 $v$ 个顶点的连通平面简单图。设 $r$ 是 $G$ 的平面图表示中的面数。则 $r &#x3D; e - v + 2$ 。</p><p><strong>推论 $1$ ：</strong>若 $G$ 是 $e$ 条边和 $v$ 个顶点的连通平面简单图，其中 $v \ge 3$ ，则 $e \le 3v - 6$ 。</p><p><strong>推论 $2$ ：</strong>若 $G$ 是连通平面简单图，则 $G$ 中有度数不超过 $5$ 的顶点。</p><p><strong>推论 $3$ ：</strong>若连通平面简单图有 $e$ 条边和 $v$ 个顶点， $v \ge 3$ 并且没有长度为 $3$ 的回路，则 $e \le 2v - 4$ 。</p><p><strong>推论 $4$ ：</strong>若连通平面简单图有 $e$ 条边和 $v$ 个顶点， $v \ge 3$ 并且没有长度为 $x$ 的回路，则 $e \le \frac {x + 1}{x - 1} (v - 2)$ 。</p><p><strong>证明推论 $4$ ：</strong></p><p>握手定理： $2e &#x3D; \sum\limits_{v \in V} deg(v)$ 。</p><p>面的度数之和等于边数的两倍 $2e &#x3D; \sum\limits_{所有区域R} deg(R)$ 。</p><p>没有长度为 $x$ 的回路意味着面的度必然至少为 $x + 1$ 。（该条件需要证明，本证明直接使用结论）</p><p>$\sum\limits_{所有区域R} deg(R) \ge (x + 1) * r$</p><p>因此，$\frac {2e}{x + 1} \ge r$ 。</p><p>欧拉公式：$r &#x3D; e - v + 2$ 。</p><p>所以，$e \le \frac {x + 1}{x - 1} (v - 2)$ 。</p><h3 id="库拉图斯基定理"><a href="#库拉图斯基定理" class="headerlink" title="库拉图斯基定理"></a>库拉图斯基定理</h3><p>一个图是非平面图当且仅当它包含一个同胚于 $K_{3,3}$ 或 $K_{5}$ 的子图。（<strong>判定平面图重要定理</strong>）</p><p>若一个图是平面图，则通过删除一条边 $\lbrace u,v \rbrace$ 并且添加一个新顶点 $w$ 和两条边 $\lbrace u,w \rbrace$与 $\lbrace w, v \rbrace$ 获得的任何图也是平面图。这样的操作称为<strong>初等细分</strong>。若可以从相同的图通过一系列初等细分来获得图 $G &#x3D; (V_{1},E_{1})$ 和图 $G &#x3D; {V_{2},E_{2}}$ ，则称它们是<strong>同胚</strong>的。</p><p><img src="/images/Discretemathematics/%E5%90%8C%E8%83%9A%E7%9A%84%E5%9B%BE.png" alt="同胚的图"></p><h2 id="图着色（-Coloring-）"><a href="#图着色（-Coloring-）" class="headerlink" title="图着色（$Coloring$）"></a>图着色（$Coloring$）</h2><p>简单图的着色是对该图的每个顶点都指定一种颜色，使得<strong>没有两个相邻的顶点颜色相同</strong>。</p><p><strong>图的着色数</strong>是着色这个图所需要的<strong>最少颜色数</strong>。图 $G$ 的着色数记作 $\chi (G)$ 。</p><h3 id="四色定理"><a href="#四色定理" class="headerlink" title="四色定理"></a>四色定理</h3><p>平面图的着色数不超过 $4$ 。（可用于证反）</p><h3 id="图着色应用"><a href="#图着色应用" class="headerlink" title="图着色应用"></a>图着色应用</h3><p>把<strong>互斥</strong>的两个顶点建边，求着色。</p><p>例：安排期末考试，频率分配等。</p><h1 id="树（-tree-）"><a href="#树（-tree-）" class="headerlink" title="树（$tree$）"></a>树（$tree$）</h1><h2 id="树的概述"><a href="#树的概述" class="headerlink" title="树的概述"></a>树的概述</h2><p>树是没有简单回路的连通无向图。</p><p>一个无向图是树当且仅当在它的每对顶点之间<strong>存在唯一简单通路</strong>。</p><h3 id="有根树-（-rooted-tree-）"><a href="#有根树-（-rooted-tree-）" class="headerlink" title="有根树 （$rooted \ tree$）"></a>有根树 （$rooted \ tree$）</h3><p>有根树是指定一个顶点作为根并且每条边的方向都离开根的树。</p><p><strong>树叶：</strong>没有孩子的节点。</p><p>若有根树的每个内点都有不超过 $m$ 个孩子，则称它为 $m$ 叉树。若该树的每个内点都恰好有 $m$ 个孩子，则称它为满 $m$ 叉树。把 $m &#x3D; 2$ 的 $m$ 叉树称为二叉树。</p><h3 id="树的性质"><a href="#树的性质" class="headerlink" title="树的性质"></a>树的性质</h3><p>带有 $n$ 个顶点的树含有 $n - 1$ 条边。</p><p><strong>计算满 $m$ 叉树中的顶点数</strong></p><p>带有 $i$ 个内点的满 $m$ 叉树含有 $n &#x3D; mi + 1$ 个顶点。</p><p><strong>证</strong>除了根之外的每个顶点都是内点的孩子。因为每个内点有 $m$ 个孩子，所以在树中除了根之外还有 $mi$ 个顶点。因此，该树含有 $n &#x3D; mi + 1$ 个顶点。</p><p>假定 $T$ 是满 $m$ 叉树。设 $n$ 是树的顶点数， $i$ 是该树的内点数， $l$ 是树叶数。一旦 $n, i, l$ 中的一个已知，另外的两个量就随之确定了。</p><ol><li>$n$ 确定， $i &#x3D; (n - 1) &#x2F; m \quad \quad \quad \quad l &#x3D; [(m - 1)n + 1] &#x2F; m$ </li><li>$i$ 确定， $n &#x3D; mi + 1 \quad \quad \quad \quad \quad \ \ l &#x3D; (m - 1)i + 1$ </li><li>$l$ 确定， $n &#x3D; (ml - 1) &#x2F; (m - 1) \quad i &#x3D; (l - 1) &#x2F; (m - 1)$</li></ol><p>在高度为 $h$ 的 $m$  叉树中至多有 $m^{h}$ 个树叶。</p><h2 id="树的应用"><a href="#树的应用" class="headerlink" title="树的应用"></a>树的应用</h2><h3 id="二叉搜索树-（-binary-search-tree-）"><a href="#二叉搜索树-（-binary-search-tree-）" class="headerlink" title="二叉搜索树 （$binary \ search \ tree$）"></a><a href="https://oi-wiki.org/ds/bst">二叉搜索树</a> （$binary \ search \ tree$）</h3><h3 id="决策树（-decision-tree-）"><a href="#决策树（-decision-tree-）" class="headerlink" title="决策树（$decision \ tree$）"></a>决策树（$decision \ tree$）</h3><p>基于二元比较的排序算法至少需要 $\lceil logn! \rceil$ 次比较。（即 $nlogn$ ）</p><h3 id="前缀码（-prefix-code-）"><a href="#前缀码（-prefix-code-）" class="headerlink" title="前缀码（$prefix \ code$）"></a>前缀码（$prefix \ code$）</h3><p>$Huffman$ 编码。</p><h3 id="博弈树-（-game-tree-）"><a href="#博弈树-（-game-tree-）" class="headerlink" title="博弈树 （$game \ tree$ ）"></a>博弈树 （$game \ tree$ ）</h3><p><strong>对称状态要剪枝</strong></p><p>掌握决策树画法</p><p><strong>石子游戏</strong></p><p><img src="/images/Discretemathematics/%E7%9F%B3%E5%AD%90%E6%B8%B8%E6%88%8F.png" alt="石子游戏"></p><p><strong>井字游戏</strong></p><p><img src="/images/Discretemathematics/%E4%BA%95%E5%AD%97%E6%B8%B8%E6%88%8F.png" alt="井字游戏"></p><h2 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h2><h3 id="前序遍历（-preorder-）"><a href="#前序遍历（-preorder-）" class="headerlink" title="前序遍历（$preorder$）"></a>前序遍历（$preorder$）</h3><p><img src="/images/Discretemathematics/%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86.png" alt="前序遍历"></p><h3 id="中序遍历（-inorder-）"><a href="#中序遍历（-inorder-）" class="headerlink" title="中序遍历（$inorder$）"></a>中序遍历（$inorder$）</h3><p><img src="/images/Discretemathematics/%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86.png" alt="中序遍历"></p><h3 id="后序遍历（-postorder-）"><a href="#后序遍历（-postorder-）" class="headerlink" title="后序遍历（$postorder$）"></a>后序遍历（$postorder$）</h3><p><img src="/images/Discretemathematics/%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86.png" alt="后序遍历"></p><h2 id="生成树（-spanning-tree-）"><a href="#生成树（-spanning-tree-）" class="headerlink" title="生成树（$spanning \ tree$）"></a>生成树（$spanning \ tree$）</h2><p>设 $G$ 是简单图。 $G$ 的生成树是包舍 $G$ 的每个顶点的 $G$ 的子图。</p><p>简单图是连通的当且仅当它有生成树。</p><h3 id="深度优先搜索（-dfs-）"><a href="#深度优先搜索（-dfs-）" class="headerlink" title="深度优先搜索（$dfs$）"></a>深度优先搜索（$dfs$）</h3><p><img src="/images/Discretemathematics/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2.png" alt="深度优先搜索"></p><h3 id="宽度优先搜索（-bfs-）"><a href="#宽度优先搜索（-bfs-）" class="headerlink" title="宽度优先搜索（$bfs$）"></a>宽度优先搜索（$bfs$）</h3><p><img src="/images/Discretemathematics/%E5%AE%BD%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2.png" alt="宽度优先搜索"></p><h2 id="最小生成树-MST"><a href="#最小生成树-MST" class="headerlink" title="最小生成树 ($MST$)"></a><a href="https://oi-wiki.org/graph/mst/">最小生成树</a> ($MST$)</h2><p>连通加权图里的最小生成树是具有边的权之和最小的生成树。</p><h3 id="普林算法（-Prim-）"><a href="#普林算法（-Prim-）" class="headerlink" title="普林算法（$Prim$）"></a>普林算法（$Prim$）</h3><p><img src="/images/Discretemathematics/Prim.png" alt="Prim"></p><h3 id="克鲁斯卡尔算法（-Kruskal-）"><a href="#克鲁斯卡尔算法（-Kruskal-）" class="headerlink" title="克鲁斯卡尔算法（$Kruskal$）"></a>克鲁斯卡尔算法（$Kruskal$）</h3><p><img src="/images/Discretemathematics/Kruskal.png" alt="Kruskal"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>$Created by GitSteve1025$ </p><p>祝大家取得理想成绩！！！</p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
          <category> Course </category>
          
          <category> Discrete mathematics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Discrete mathematics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 CCPC Guilin C.Master of Both IV</title>
      <link href="/2023/12/11/ACM/CCPC/2023%20CCPC%20Guilin%20C/"/>
      <url>/2023/12/11/ACM/CCPC/2023%20CCPC%20Guilin%20C/</url>
      
        <content type="html"><![CDATA[<h1 id="C-Master-of-Both-IV"><a href="#C-Master-of-Both-IV" class="headerlink" title="C. Master of Both IV"></a><a href="https://codeforces.com/gym/104768/problem/C">C. Master of Both IV</a></h1><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>前置知识：线性基</p><p>线性基内的基元异或不会为 0 ，线性基<strong>插入失败</strong>等价于<strong>当前数与线性基的某些基元异或为 0</strong></p><p>由此我们可以记录 插入失败的个数，记为$c$，则任选数异或为 0 的种类为 $2^c - 1$（排除空集)</p><p>题目要求：$\forall x\in[1,m],a_{i_x}|\bigoplus\limits_{j&#x3D;1}^m a_{i_j}$</p><p>我们将<strong>异或结果</strong>分为两种：等于 0， 不等于 0</p><p>一、等于 0</p><p>0 是任何数的倍数， 把所有数插入线性基求插入失败次数 $c$ 贡献 $2^c - 1$</p><p>二、不等于 0</p><p>假设结果为 $f$，因为要整除，选的数必须为它的因子，</p><p>设因子为$f_1, f_2, f_3,…,f_n$ （不包括自己）</p><p>个数记为$c_1, c_2, c_3,…,c_n$ （不包括自己）</p><p>让因子的异或结果为 0， 再异或自己， 结果就是 $f$， 满足题目要求</p><p>把所有因子插入进线性基，同种数必定插入失败，直接加 </p><p>插入失败的次数等于：$\sum\limits_{i &#x3D; 1}^{n}(c_i - 1) + k$  (k为因子插入失败次数)</p><p>假设自己有 $c$ 个 要让结果不为 0 ，我们必须选<strong>奇数</strong>个， 有 $2^{c - 1}$ 种选法</p><p>贡献：$2^{c - 1} * 2^{(\sum\limits_{i &#x3D; 1}^{n}(c_i - 1) + k)} &#x3D; 2^{(\sum\limits_{i &#x3D; 1}^{n}(c_i - 1) + k + c - 1)}$</p><p>二者相加即为结果</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> N&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">linear_basis</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> siz;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> basis[N];</span><br><span class="line">    <span class="built_in">linear_basis</span>()&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; N;i++)&#123;</span><br><span class="line">            basis[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        siz = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = N - <span class="number">1</span>;~i;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>((x &gt;&gt; i) &amp; <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(basis[i] == <span class="number">0</span>)&#123;</span><br><span class="line">                    siz += <span class="number">1</span>;</span><br><span class="line">                    basis[i] = x;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    x ^= basis[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> P = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> P2[M];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prepare</span><span class="params">()</span></span>&#123;</span><br><span class="line">    P2[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; M;i++)&#123;</span><br><span class="line">        P2[i] = P2[i - <span class="number">1</span>] * <span class="number">2</span> % P;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">power</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span> p)</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">1</span>;</span><br><span class="line">    a %= p;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>)&#123;</span><br><span class="line">            ans = ans * a % p;</span><br><span class="line">        &#125;</span><br><span class="line">        a = a * a % p;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cnt</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        cnt[a[i]] += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&gt; <span class="built_in">val</span>(n + <span class="number">1</span>); </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt[i])&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i * <span class="number">2</span>;j &lt;= n;j += i)&#123;</span><br><span class="line">                val[j].<span class="built_in">push_back</span>(&#123;i, cnt[i]&#125;);</span><br><span class="line">            &#125;            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt[i])&#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> c = <span class="number">0</span>;</span><br><span class="line">            linear_basis&lt;N&gt; line;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; [x, y] : val[i])&#123;</span><br><span class="line">                c += y - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(!line.<span class="built_in">insert</span>(x))&#123;</span><br><span class="line">                    c += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> tep = P2[cnt[i] - <span class="number">1</span>];</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> tmp = P2[c] * tep % P;</span><br><span class="line">            ans = (ans + tmp) % P;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> c = <span class="number">0</span>;</span><br><span class="line">    linear_basis&lt;N&gt; line;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!line.<span class="built_in">insert</span>(a[i]))&#123;</span><br><span class="line">            c += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = (ans + P2[c] - <span class="number">1</span>) % P;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">prepare</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> CCPC </category>
          
          <category> Guilin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性基 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Splay</title>
      <link href="/2023/12/08/Learning/Data%20Structure/Splay/"/>
      <url>/2023/12/08/Learning/Data%20Structure/Splay/</url>
      
        <content type="html"><![CDATA[<h1 id="Splay"><a href="#Splay" class="headerlink" title="Splay"></a>Splay</h1><p>Splay 操作规定：每访问一个节点$x$后都要强制将其旋转到根节点。</p><p>每次对$x$做一次 splay 步骤，$x$到根节点的距离都会更近。</p><p>Splay 步骤有三种，具体分为六种情况：</p><h2 id="rotate"><a href="#rotate" class="headerlink" title="rotate"></a>rotate</h2><h3 id="zig"><a href="#zig" class="headerlink" title="zig"></a>zig</h3><p>当$p$是根节点，$x$是$p$的左子节点时操作。</p><p><img src="/images/DataStructure/Splay/zig.png" alt="zig"></p><h4 id="zig-code"><a href="#zig-code" class="headerlink" title="zig code"></a>zig code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//to do</span></span><br></pre></td></tr></table></figure><h3 id="zag"><a href="#zag" class="headerlink" title="zag"></a>zag</h3><p>当$p$是根节点，$x$是$p$的右子节点时操作。</p><p><img src="/images/DataStructure/Splay/zag.png" alt="zag"></p><h4 id="zag-code"><a href="#zag-code" class="headerlink" title="zag code"></a>zag code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//to do</span></span><br></pre></td></tr></table></figure><h3 id="zig-zig"><a href="#zig-zig" class="headerlink" title="zig-zig"></a>zig-zig</h3><p>当$p$不是根节点，$p$和$x$都是左子节点时操作。</p><p><img src="/images/DataStructure/Splay/zig-zig.png" alt="zig-zig"></p><h4 id="zig-zig-code"><a href="#zig-zig-code" class="headerlink" title="zig-zig code"></a>zig-zig code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//to do</span></span><br></pre></td></tr></table></figure><h3 id="zag-zag"><a href="#zag-zag" class="headerlink" title="zag-zag"></a>zag-zag</h3><p>当$p$不是根节点，$p$和$x$都是右子节点时操作。</p><p><img src="/images/DataStructure/Splay/zag-zag.png" alt="zag-zag"></p><h4 id="zag-zag-code"><a href="#zag-zag-code" class="headerlink" title="zag-zag code"></a>zag-zag code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//to do</span></span><br></pre></td></tr></table></figure><h3 id="zig-zag"><a href="#zig-zag" class="headerlink" title="zig-zag"></a>zig-zag</h3><p>当$p$不是根节点，$p$是左子节点，$x$是右子节点时操作。</p><p><img src="/images/DataStructure/Splay/zig-zag.png" alt="zig-zag"></p><h4 id="zig-zag-code"><a href="#zig-zag-code" class="headerlink" title="zig-zag code"></a>zig-zag code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//to do</span></span><br></pre></td></tr></table></figure><h3 id="zag-zig"><a href="#zag-zig" class="headerlink" title="zag-zig"></a>zag-zig</h3><p>当$p$不是根节点，$p$是右子节点，$x$是左子节点时操作。</p><p><img src="/images/DataStructure/Splay/zag-zig.png" alt="zag-zig"></p><h4 id="zag-zig-code"><a href="#zag-zig-code" class="headerlink" title="zag-zig code"></a>zag-zig code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//to do</span></span><br></pre></td></tr></table></figure><p>可以看出 zig 和 zag 互为<strong>镜像</strong>操作</p><h2 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h2><h3 id="insert-code"><a href="#insert-code" class="headerlink" title="insert code"></a>insert code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//to do</span></span><br></pre></td></tr></table></figure><h2 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h2><h3 id="remove-code"><a href="#remove-code" class="headerlink" title="remove code"></a>remove code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//to do</span></span><br></pre></td></tr></table></figure><h2 id="kth"><a href="#kth" class="headerlink" title="kth"></a>kth</h2><h3 id="kth-code"><a href="#kth-code" class="headerlink" title="kth code"></a>kth code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//to do</span></span><br></pre></td></tr></table></figure><h2 id="precursor"><a href="#precursor" class="headerlink" title="precursor"></a>precursor</h2><h3 id="precursor-code"><a href="#precursor-code" class="headerlink" title="precursor code"></a>precursor code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//to do</span></span><br></pre></td></tr></table></figure><h2 id="successor"><a href="#successor" class="headerlink" title="successor"></a>successor</h2><h3 id="successor-code"><a href="#successor-code" class="headerlink" title="successor code"></a>successor code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//to do</span></span><br></pre></td></tr></table></figure><h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><h3 id="Literary-Splay"><a href="#Literary-Splay" class="headerlink" title="Literary Splay"></a>Literary Splay</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//to do</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
          <category> Data Structure </category>
          
          <category> Splay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Template</title>
      <link href="/2023/12/03/ACM/Template/Template/"/>
      <url>/2023/12/03/ACM/Template/Template/</url>
      
        <content type="html"><![CDATA[<h1 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h1><h2 id="Data-Structures"><a href="#Data-Structures" class="headerlink" title="Data Structures"></a>Data Structures</h2><h3 id="Fenwick"><a href="#Fenwick" class="headerlink" title="Fenwick"></a>Fenwick</h3><h4 id="point-set-range-query"><a href="#point-set-range-query" class="headerlink" title="point set range query"></a>point set range query</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Fenwick</span> &#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">vector&lt;T&gt; sum;</span><br><span class="line"><span class="built_in">Fenwick</span>(<span class="type">int</span> _n = <span class="number">0</span>) &#123;</span><br><span class="line">n = _n;</span><br><span class="line">sum.<span class="built_in">resize</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p, T k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = p; i &lt; n; i += <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">sum[i] += k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">T <span class="title">query</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">T ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = p; i &gt; <span class="number">0</span>; i -= <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">ans += sum[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">T <span class="title">getsum</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">query</span>(r) - <span class="built_in">query</span>(l - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="range-set-range-query"><a href="#range-set-range-query" class="headerlink" title="range set range query"></a>range set range query</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fenwick</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line">vector&lt;T&gt; S;</span><br><span class="line">vector&lt;T&gt; C;</span><br><span class="line"><span class="built_in">Fenwick</span>(<span class="type">int</span> n = <span class="number">0</span>) &#123;</span><br><span class="line">N = n;</span><br><span class="line">S.<span class="built_in">resize</span>(N);</span><br><span class="line">C.<span class="built_in">resize</span>(N);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowerbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, T k)</span> </span>&#123;</span><br><span class="line"><span class="built_in">Add</span>(l, k);</span><br><span class="line"><span class="built_in">Add</span>(r + <span class="number">1</span>, -k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">T <span class="title">query</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Sum</span>(r) - <span class="built_in">Sum</span>(l - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> p, T k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = p; i &lt; N; i += <span class="built_in">lowerbit</span>(i)) &#123;</span><br><span class="line">S[i] += k;</span><br><span class="line">C[i] += k * p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">T <span class="title">Sum</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">T Ssum = <span class="number">0</span>;</span><br><span class="line">T Csum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = p; i &gt; <span class="number">0</span>; i -= <span class="built_in">lowerbit</span>(i)) &#123;</span><br><span class="line">Ssum += S[i] * (p + <span class="number">1</span>);</span><br><span class="line">Csum += C[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Ssum - Csum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Linear-basis"><a href="#Linear-basis" class="headerlink" title="Linear_basis"></a>Linear_basis</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> N&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">linear_basis</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> cnt;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> basis[N];</span><br><span class="line">    <span class="built_in">linear_basis</span>() &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            basis[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = N - <span class="number">1</span>; ~i; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((x &gt;&gt; i) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (basis[i]) &#123;</span><br><span class="line">                    x ^= basis[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    basis[i] = x;</span><br><span class="line">                    cnt++;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">max_val</span><span class="params">(<span class="type">long</span> <span class="type">long</span> k = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = N - <span class="number">1</span>; ~i; i--) &#123;</span><br><span class="line">            res = <span class="built_in">max</span>(res, res ^ basis[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">const</span> linear_basis&lt;N&gt;&amp; other)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="built_in">insert</span>(other.basis[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            basis[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">orthogonalize</span><span class="params">()</span> </span>&#123;<span class="comment">//正交化</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = N - <span class="number">1</span>; ~i; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i - <span class="number">1</span>; ~j; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((basis[i] &gt;&gt; j) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                    basis[i] ^= basis[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">kth</span><span class="params">(<span class="type">long</span> <span class="type">long</span> k)</span> </span>&#123;<span class="comment">//第k小</span></span><br><span class="line">        vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; tep;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (basis[i]) &#123;</span><br><span class="line">                tep.<span class="built_in">push_back</span>(basis[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; tep.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((k &gt;&gt; i) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                res ^= tep[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">rk</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span> </span>&#123;<span class="comment">//查数排名</span></span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> l = <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> r = (<span class="number">1ll</span> &lt;&lt; <span class="built_in">size</span>()) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> Mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> val = <span class="built_in">kth</span>(Mid);</span><br><span class="line">            <span class="keyword">if</span> (val == x) &#123;</span><br><span class="line">                <span class="keyword">return</span> Mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (val &gt; x) &#123;</span><br><span class="line">                r = Mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                l = Mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="DSU"><a href="#DSU" class="headerlink" title="DSU"></a>DSU</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DSU</span> &#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; f, siz;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">DSU</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">DSU</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        f.<span class="built_in">resize</span>(n);</span><br><span class="line">        std::<span class="built_in">iota</span>(f.<span class="built_in">begin</span>(), f.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        siz.<span class="built_in">assign</span>(n, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (x != f[x]) &#123;</span><br><span class="line">            x = f[x] = f[f[x]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">same</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        x = <span class="built_in">find</span>(x);</span><br><span class="line">        y = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (x == y) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        siz[x] += siz[y];</span><br><span class="line">        f[y] = x;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> siz[<span class="built_in">find</span>(x)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><h3 id="Exgcd"><a href="#Exgcd" class="headerlink" title="Exgcd"></a>Exgcd</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">Exgcd</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span>&amp; x, <span class="type">long</span> <span class="type">long</span>&amp; y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!b) &#123;</span><br><span class="line">x = <span class="number">1</span>;</span><br><span class="line">y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> c = <span class="built_in">Exgcd</span>(b, a % b, y, x);</span><br><span class="line">y -= (a / b) * x;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ModInt"><a href="#ModInt" class="headerlink" title="ModInt"></a>ModInt</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> MOD&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ModInt</span> &#123;</span><br><span class="line"><span class="type">unsigned</span> x;</span><br><span class="line"><span class="built_in">ModInt</span>() : <span class="built_in">x</span>(<span class="number">0</span>) &#123; &#125;</span><br><span class="line"><span class="built_in">ModInt</span>(<span class="type">signed</span> sig) : <span class="built_in">x</span>(sig) &#123;  &#125;</span><br><span class="line"><span class="built_in">ModInt</span>(<span class="type">signed</span> <span class="type">long</span> <span class="type">long</span> sig) : <span class="built_in">x</span>(sig% MOD) &#123; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)x; &#125;</span><br><span class="line"><span class="function">ModInt <span class="title">pow</span><span class="params">(<span class="type">long</span> <span class="type">long</span> p)</span> </span>&#123; ModInt res = <span class="number">1</span>, a = *<span class="keyword">this</span>; <span class="keyword">while</span> (p) &#123; <span class="keyword">if</span> (p &amp; <span class="number">1</span>) res *= a; a *= a; p &gt;&gt;= <span class="number">1</span>; &#125; <span class="keyword">return</span> res; &#125;</span><br><span class="line"></span><br><span class="line">ModInt&amp; <span class="keyword">operator</span>+=(ModInt that) &#123; <span class="keyword">if</span> ((x += that.x) &gt;= MOD) x -= MOD; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">ModInt&amp; <span class="keyword">operator</span>-=(ModInt that) &#123; <span class="keyword">if</span> ((x += MOD - that.x) &gt;= MOD) x -= MOD; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">ModInt&amp; <span class="keyword">operator</span>*=(ModInt that) &#123; x = (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)x * that.x % MOD; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">ModInt&amp; <span class="keyword">operator</span>/=(ModInt that) &#123; <span class="built_in">return</span> (*<span class="keyword">this</span>) *= that.<span class="built_in">pow</span>(MOD - <span class="number">2</span>); &#125;</span><br><span class="line"></span><br><span class="line">ModInt <span class="keyword">operator</span>+(ModInt that) <span class="type">const</span> &#123; <span class="keyword">return</span> <span class="built_in">ModInt</span>(*<span class="keyword">this</span>) += that; &#125;</span><br><span class="line">ModInt <span class="keyword">operator</span>-(ModInt that) <span class="type">const</span> &#123; <span class="keyword">return</span> <span class="built_in">ModInt</span>(*<span class="keyword">this</span>) -= that; &#125;</span><br><span class="line">ModInt <span class="keyword">operator</span>*(ModInt that) <span class="type">const</span> &#123; <span class="keyword">return</span> <span class="built_in">ModInt</span>(*<span class="keyword">this</span>) *= that; &#125;</span><br><span class="line">ModInt <span class="keyword">operator</span>/(ModInt that) <span class="type">const</span> &#123; <span class="keyword">return</span> <span class="built_in">ModInt</span>(*<span class="keyword">this</span>) /= that; &#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;(ModInt that) <span class="type">const</span> &#123; <span class="keyword">return</span> x &lt; that.x; &#125;</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, ModInt a) &#123; os &lt;&lt; a.x; <span class="keyword">return</span> os; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Game"><a href="#Game" class="headerlink" title="Game"></a>Game</h2><h3 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h3><p>$1$堆石子，$n$个， 每次每人能取$[1, m]$个石子，不能拿的输</p><h4 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h4><p>$(m + 1) \mid n$ 时，先手必败</p><p>$(m + 1) \nmid n$ 时， 先手必胜</p><h4 id="prove"><a href="#prove" class="headerlink" title="prove"></a>prove</h4><ol><li>当$n \le m$时， 先手可直接取走所有</li><li>当$n &#x3D; m + 1$时，先手无论取走多少个，后手都能取走剩下所有</li><li>当$n &#x3D; k \times(m + 1)$时，对于每$m+1$个石子，先手取$i$个，后手取的$m+1−i$个</li><li>当$n &#x3D; k \times (m + 1) + x (0 &lt; x &lt; m + 1)$时，先手取$x$个，局势回到上一种情况</li></ol><h3 id="Nim"><a href="#Nim" class="headerlink" title="Nim"></a>Nim</h3><p>$n$堆石子，每堆$a_i$个，每人每次能从一堆石子中取任意多个石子但不能不取，不能拿的输</p><h4 id="conclusion-1"><a href="#conclusion-1" class="headerlink" title="conclusion"></a>conclusion</h4><p>$\bigoplus\limits_{i &#x3D; 1}^{n}a_i &#x3D; 0 $时，先手必败</p><p>$\bigoplus\limits_{i &#x3D; 1}^{n}a_i \neq 0 $时，先手必胜</p><h4 id="prove-1"><a href="#prove-1" class="headerlink" title="prove"></a>prove</h4><h3 id="Wythoff"><a href="#Wythoff" class="headerlink" title="Wythoff"></a>Wythoff</h3><p>$2$堆石子，$x, y$个，每人每次能从任意一堆中拿任意数量的石子或在两堆石子中拿走相同数量的石子，不能拿的输</p><h4 id="conclusion-2"><a href="#conclusion-2" class="headerlink" title="conclusion"></a>conclusion</h4><p>$\lfloor {(y - x) \times \frac{1 + \sqrt{5}}{2}} \rfloor &#x3D; x$ 或 $\lfloor {(x - y) \times \frac{1 + \sqrt{5}}{2}} \rfloor &#x3D; y$时，先手必败</p><p>$\lfloor {(y - x) \times \frac{1 + \sqrt{5}}{2}} \rfloor \neq x$ 且 $\lfloor {(x - y) \times \frac{1 + \sqrt{5}}{2}} \rfloor \neq y$时，先手必胜</p><h4 id="prove-2"><a href="#prove-2" class="headerlink" title="prove"></a>prove</h4><h3 id="Fibonacci"><a href="#Fibonacci" class="headerlink" title="Fibonacci"></a>Fibonacci</h3><p>$1$堆石子， $n$个，先手第一次能取任意多个，但不能取完，以后每次取子数不能超过前一次取子数的2倍，不能拿的输</p><h4 id="conclusion-3"><a href="#conclusion-3" class="headerlink" title="conclusion"></a>conclusion</h4><p>$n &#x3D; fib_i$时，先手必败</p><p>$n \neq fib_i$时，先手必胜</p><h4 id="prove-3"><a href="#prove-3" class="headerlink" title="prove"></a>prove</h4><h3 id="ExNim"><a href="#ExNim" class="headerlink" title="ExNim"></a>ExNim</h3><p>$n$堆石子，每堆$a_i$个，每人每次能从$[1, d]$堆石子中取任意多个石子但不能不取，不能拿的输</p><h4 id="conclusion-4"><a href="#conclusion-4" class="headerlink" title="conclusion"></a>conclusion</h4><p>二进制展开，设$cnt_{bit_i}$为某位为$1$的个数</p><p>$\forall i \quad (d + 1) \mid cnt_{bit_i}$时， 先手必败</p><p>$\exists i \quad (d + 1) \nmid cnt_{bit_i}$时，先手必胜</p><h4 id="prove-4"><a href="#prove-4" class="headerlink" title="prove"></a>prove</h4><h3 id="Staircase-Nim"><a href="#Staircase-Nim" class="headerlink" title="Staircase Nim"></a>Staircase Nim</h3><p>$n$堆石子，每堆$a_i$个，每次每人可以把第$i(i &gt; 1)$堆的任意个放到第$i - 1$堆里，或取第一堆任意个，不能拿的输</p><h4 id="conclusion-5"><a href="#conclusion-5" class="headerlink" title="conclusion"></a>conclusion</h4><p>$\bigoplus\limits_{i &#x3D; 1}^{\lceil \frac{n}{2} \rceil}a_{2i - 1} &#x3D; 0$时，先手必败</p><p>$\bigoplus\limits_{i &#x3D; 1}^{\lceil \frac{n}{2} \rceil}a_{2i - 1} \neq 0 $时，先手必胜</p><h4 id="prove-5"><a href="#prove-5" class="headerlink" title="prove"></a>prove</h4><h2 id="Geometry"><a href="#Geometry" class="headerlink" title="Geometry"></a>Geometry</h2><h3 id="point"><a href="#point" class="headerlink" title="point"></a>point</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">double</span> eps = <span class="number">1e-9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> x;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">point</span>(<span class="type">long</span> <span class="type">double</span> _x = <span class="number">0</span>, <span class="type">long</span> <span class="type">double</span> _y = <span class="number">0</span>)&#123;</span><br><span class="line">        x = _x;</span><br><span class="line">        y = _y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">square_length</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x * x + y * y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//模长</span></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">length</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sqrtl</span>(x * x + y * y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> point <span class="keyword">operator</span>+(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">point</span>(lp.x + rp.x, lp.y + rp.y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> point <span class="keyword">operator</span>-(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">point</span>(lp.x - rp.x, lp.y - rp.y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> point <span class="keyword">operator</span>*(<span class="type">const</span> point&amp; p, <span class="type">const</span> <span class="type">long</span> <span class="type">double</span>&amp; k)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">point</span>(p.x * k, p.y * k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> point <span class="keyword">operator</span>*(<span class="type">const</span> <span class="type">long</span> <span class="type">double</span>&amp; k, <span class="type">const</span> point&amp; p)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">point</span>(p.x * k, p.y * k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> point <span class="keyword">operator</span>/(<span class="type">const</span> point&amp; p, <span class="type">const</span> <span class="type">long</span> <span class="type">double</span>&amp; k)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">point</span>(p.x / k, p.y / k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(lp.x - rp.x) &lt; eps &amp;&amp; <span class="built_in">abs</span>(lp.y - rp.y) &lt; eps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(lp.x - rp.x) &gt; eps || <span class="built_in">abs</span>(lp.y - rp.y) &gt; eps;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="dot-cross"><a href="#dot-cross" class="headerlink" title="dot &amp; cross"></a>dot &amp; cross</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//点乘</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">dot</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lp.x * rp.x + lp.y * rp.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//叉乘</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">cross</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lp.x * rp.y - lp.y * rp.x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="distance"><a href="#distance" class="headerlink" title="distance"></a>distance</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">square_distance</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (lp.x - rp.x) * (lp.x - rp.x) + (lp.y - rp.y) * (lp.y - rp.y);</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="comment">//两点距离</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">distance</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrtl</span>((lp.x - rp.x) * (lp.x - rp.x) + (lp.y - rp.y) * (lp.y - rp.y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rotate"><a href="#rotate" class="headerlink" title="rotate"></a>rotate</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">double</span> PI = <span class="number">3.141592653589793</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//矢量旋转 逆时针旋转 o (弧度制)</span></span><br><span class="line"><span class="function">point <span class="title">rotate</span><span class="params">(<span class="type">const</span> point&amp; v, <span class="type">long</span> <span class="type">double</span> o)</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> x = v.x * <span class="built_in">cos</span>(o) - v.y * <span class="built_in">sin</span>(o);</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> y = v.x * <span class="built_in">sin</span>(o) + v.y * <span class="built_in">cos</span>(o);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">point</span>(x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sin-cos-angle-polar-angle"><a href="#sin-cos-angle-polar-angle" class="headerlink" title="sin &amp; cos &amp; angle &amp; polar_angle"></a>sin &amp; cos &amp; angle &amp; polar_angle</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cos</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">cos</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dot</span>(lp, rp) / lp.<span class="built_in">length</span>() / rp.<span class="built_in">length</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//sin</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">sin</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">cross</span>(lp, rp) / lp.<span class="built_in">length</span>() / rp.<span class="built_in">length</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//angle</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">angle</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">acos</span>(<span class="built_in">cos</span>(lp, rp));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//极角 三 &lt; 四 &lt; 一 &lt; 二 (象限)</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">polar_angle</span><span class="params">(<span class="type">const</span> point&amp; p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">atan2</span>(p.y, p.x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="point-and-line"><a href="#point-and-line" class="headerlink" title="point and line"></a>point and line</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//点到直线的距离 p到lp--rp的距离</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">distance</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp, <span class="type">const</span> point&amp; p)</span></span>&#123;</span><br><span class="line">    point vl = rp - lp;</span><br><span class="line">    point vr = p - lp;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">cross</span>(vl, vr) / vl.<span class="built_in">length</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求垂点 p到直线lp--rp的垂点</span></span><br><span class="line"><span class="function">point <span class="title">foot</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp, <span class="type">const</span> point&amp; p)</span></span>&#123;</span><br><span class="line">    point vl = rp - lp;</span><br><span class="line">    point vr = p - lp;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> k = <span class="built_in">dot</span>(vl, vr) / vl.<span class="built_in">length</span>() / vl.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">return</span> lp + vl * k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="line-and-line"><a href="#line-and-line" class="headerlink" title="line and line"></a>line and line</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//两直线交点</span></span><br><span class="line"><span class="function">point <span class="title">intersect</span><span class="params">(<span class="type">const</span> point&amp; flp, <span class="type">const</span> point&amp; frp, <span class="type">const</span> point&amp; slp, <span class="type">const</span> point&amp; srp)</span></span>&#123;</span><br><span class="line">    point sf = flp - slp;</span><br><span class="line">    point vf = frp - flp;</span><br><span class="line">    point vs = srp - slp;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> k = <span class="built_in">cross</span>(sf, vs) / <span class="built_in">cross</span>(vs, vf);</span><br><span class="line">    <span class="keyword">return</span> flp + vf * k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="point-and-segment"><a href="#point-and-segment" class="headerlink" title="point and segment"></a>point and segment</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//符号判断</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sign</span><span class="params">(<span class="type">long</span> <span class="type">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; eps)&#123;<span class="comment">//正数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; -eps)&#123;<span class="comment">//负数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//点在线段上(含端点) lp rp 为线段端点</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">on_segment</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp, <span class="type">const</span> point&amp; p)</span></span>&#123;</span><br><span class="line">    point vl = rp - lp;</span><br><span class="line">    point vr = p - lp;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> sv = <span class="built_in">cross</span>(vl, vr);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">sign</span>(sv) != <span class="number">0</span>)&#123;<span class="comment">//不在直线上</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> cv = <span class="built_in">dot</span>(vl, vr);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">sign</span>(cv) == <span class="number">-1</span>)&#123;<span class="comment">//在线段外</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vr.<span class="built_in">length</span>() &lt;= vl.<span class="built_in">length</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//点在线段上(不含端点) lp rp 为线段端点</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">on_segment_strict</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp, <span class="type">const</span> point&amp; p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">on_segment</span>(lp, rp, p) &amp;&amp; lp != p &amp;&amp; rp != p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="circle"><a href="#circle" class="headerlink" title="circle"></a>circle</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">circle</span> &#123;</span><br><span class="line">    point o;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> r;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//垂直平分线 两点式</span></span><br><span class="line"><span class="function">pair&lt;point, point&gt; <span class="title">perpendicular</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; (lp + rp) / <span class="number">2</span>, (lp + rp) / <span class="number">2</span> + <span class="built_in">rotate</span>(rp - lp, PI / <span class="number">2</span>) &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//三点确定圆</span></span><br><span class="line"><span class="function">circle <span class="title">cover</span><span class="params">(<span class="type">const</span> point&amp; a, <span class="type">const</span> point&amp; b, <span class="type">const</span> point&amp; c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> lp = <span class="built_in">perpendicular</span>(a, b);</span><br><span class="line">    <span class="keyword">auto</span> rp = <span class="built_in">perpendicular</span>(a, c);</span><br><span class="line">    point o = <span class="built_in">intersect</span>(lp.first, lp.second, rp.first, rp.second);</span><br><span class="line">    <span class="keyword">return</span> &#123; o, <span class="built_in">distance</span>(o, a) &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="simpson"><a href="#simpson" class="headerlink" title="simpson"></a>simpson</h3><p>$$<br>\int_{l}^{r} f(x) dx \quad &#x3D; \quad (r - l) * {f(l) + f(r) + 4 * f({l + r \over 2}) \over 6}<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">double</span> eps = <span class="number">1e-9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">f</span><span class="params">(<span class="type">long</span> <span class="type">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ;<span class="comment">//f表达式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">simpon</span> <span class="params">(<span class="type">long</span> <span class="type">double</span> l, <span class="type">long</span> <span class="type">double</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">f</span>(l) + <span class="built_in">f</span>(r) + <span class="built_in">f</span>((l + r) / <span class="number">2</span>) * <span class="number">4</span>) * (r - l) / <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">get</span><span class="params">(<span class="type">long</span> <span class="type">double</span> l, <span class="type">long</span> <span class="type">double</span> r, <span class="type">long</span> <span class="type">double</span> ans)</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> lv = <span class="built_in">simpon</span>(l, m);</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> rv = <span class="built_in">simpon</span>(m, r);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabsl</span>(lv + rv - ans) &lt; eps)&#123;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">get</span>(l, m, lv) + <span class="built_in">get</span>(m, r, rv);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">get</span>(l, r, <span class="built_in">simpon</span>(l, r));</span><br></pre></td></tr></table></figure><h3 id="convex-hull"><a href="#convex-hull" class="headerlink" title="convex-hull"></a>convex-hull</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;point&gt; <span class="title">Andrew</span><span class="params">(vector&lt;point&gt; vp)</span></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(vp.<span class="built_in">begin</span>(), vp.<span class="built_in">end</span>(), [](<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp) -&gt; <span class="type">bool</span> &#123;<span class="comment">// X 第一关键字 Y 第二关键字</span></span><br><span class="line">        <span class="keyword">if</span>(lp.x == rp.x)&#123;</span><br><span class="line">            <span class="keyword">return</span> lp.y &lt; rp.y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lp.x &lt; rp.x;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">int</span> n = vp.<span class="built_in">size</span>();</span><br><span class="line">    vector&lt;point&gt; stk;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(stk.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">cross</span>(stk.<span class="built_in">back</span>() - stk[stk.<span class="built_in">size</span>() - <span class="number">2</span>], vp[i] - stk.<span class="built_in">back</span>()) &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            stk.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        stk.<span class="built_in">push_back</span>(vp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> k = stk.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = n - <span class="number">2</span>;i &gt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">while</span>(stk.<span class="built_in">size</span>() &gt; k &amp;&amp; <span class="built_in">cross</span>(stk.<span class="built_in">back</span>() - stk[stk.<span class="built_in">size</span>() - <span class="number">2</span>], vp[i] - stk.<span class="built_in">back</span>()) &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            stk.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        stk.<span class="built_in">push_back</span>(vp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    stk.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> stk;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="nearest-points"><a href="#nearest-points" class="headerlink" title="nearest-points"></a>nearest-points</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//平面最近点对</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">nearest_points</span><span class="params">(vector&lt;point&gt; vp)</span></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(vp.<span class="built_in">begin</span>(), vp.<span class="built_in">end</span>(), [](<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp) -&gt; <span class="type">bool</span> &#123;<span class="comment">// X 第一关键字 Y 第二关键字</span></span><br><span class="line">        <span class="keyword">if</span>(lp.x == rp.x)&#123;</span><br><span class="line">            <span class="keyword">return</span> lp.y &lt; rp.y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lp.x &lt; rp.x;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">long</span> <span class="type">double</span> inf = <span class="number">1e20</span>;<span class="comment">//最大值</span></span><br><span class="line">    function&lt;<span class="type">long</span> <span class="type">double</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; get = [&amp;](<span class="type">int</span> l, <span class="type">int</span> r) -&gt; <span class="type">long</span> <span class="type">double</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">            <span class="keyword">return</span> inf;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(l + <span class="number">1</span> == r)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">distance</span>(vp[l], vp[r]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">double</span> ans = <span class="built_in">min</span>(<span class="built_in">get</span>(l, mid), <span class="built_in">get</span>(mid + <span class="number">1</span>, r));<span class="comment">//merge</span></span><br><span class="line">        <span class="comment">//合并</span></span><br><span class="line">        vector&lt;point&gt; tmp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = l;i &lt;= r;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">fabsl</span>(vp[i].x - vp[mid].x) &lt; ans)&#123;</span><br><span class="line">                tmp.<span class="built_in">push_back</span>(vp[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(tmp.<span class="built_in">begin</span>(), tmp.<span class="built_in">end</span>(), [](<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp) -&gt; <span class="type">bool</span> &#123;<span class="comment">// Y 第一关键字 X 第二关键字</span></span><br><span class="line">            <span class="keyword">if</span>(lp.y == rp.y)&#123;</span><br><span class="line">                <span class="keyword">return</span> lp.x &lt; rp.x;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> lp.y &lt; rp.y;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; tmp.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>;j &lt; tmp.<span class="built_in">size</span>() &amp;&amp; tmp[j].y - tmp[i].y &lt; ans;j++)&#123;</span><br><span class="line">                ans = <span class="built_in">min</span>(ans, <span class="built_in">distance</span>(tmp[i], tmp[j]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">get</span>(<span class="number">0</span>, vp.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="half-plane"><a href="#half-plane" class="headerlink" title="half-plane"></a>half-plane</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span> &#123;</span><br><span class="line">    point lp;</span><br><span class="line">    point rp;</span><br><span class="line">    <span class="built_in">line</span>(point _lp, point _rp)&#123;</span><br><span class="line">        lp = _lp;</span><br><span class="line">        rp = _rp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_right</span><span class="params">(line a, line b, line c)</span></span>&#123;<span class="comment">//判断交点在直线右侧</span></span><br><span class="line">    point p = <span class="built_in">intersect</span>(b.lp, b.rp, c.lp, c.rp);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">cross</span>(a.rp - a.lp, p - a.lp) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">half_plane</span><span class="params">(vector&lt;line&gt; ve)</span></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(ve.<span class="built_in">begin</span>(), ve.<span class="built_in">end</span>(), [](<span class="type">const</span> line&amp; le, <span class="type">const</span> line&amp; re) -&gt; <span class="type">bool</span> &#123;<span class="comment">//极角排序 + 左侧排序</span></span><br><span class="line">        <span class="type">long</span> <span class="type">double</span> le_angle = <span class="built_in">polar_angle</span>(le.rp - le.lp);</span><br><span class="line">        <span class="type">long</span> <span class="type">double</span> re_angle = <span class="built_in">polar_angle</span>(re.rp - re.lp);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">fabsl</span>(le_angle - re_angle) &lt; eps)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">cross</span>(le.rp - le.lp, re.rp - le.lp) &lt; <span class="number">0</span>;<span class="comment">// 注意是 re.rp - le.lp</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> le_angle &lt; re_angle;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    deque&lt;line&gt; q;</span><br><span class="line">    <span class="type">int</span> n = ve.<span class="built_in">size</span>();</span><br><span class="line">    q.<span class="built_in">push_back</span>(ve.<span class="built_in">front</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">polar_angle</span>(ve[i].rp - ve[i].lp) - <span class="built_in">polar_angle</span>(ve[i - <span class="number">1</span>].rp - ve[i - <span class="number">1</span>].lp) &lt; eps)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">is_right</span>(ve[i], q.<span class="built_in">back</span>(), q[q.<span class="built_in">size</span>() - <span class="number">2</span>]))&#123;</span><br><span class="line">            q.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">is_right</span>(ve[i], q.<span class="built_in">front</span>(), q[<span class="number">1</span>]))&#123;</span><br><span class="line">            q.<span class="built_in">pop_front</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        q.<span class="built_in">push_back</span>(ve[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">is_right</span>(q.<span class="built_in">front</span>(), q.<span class="built_in">back</span>(), q[q.<span class="built_in">size</span>() - <span class="number">2</span>]))&#123;</span><br><span class="line">        q.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    q.<span class="built_in">push_back</span>(q.<span class="built_in">front</span>());</span><br><span class="line"></span><br><span class="line">    vector&lt;point&gt; tmp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; q.<span class="built_in">size</span>() - <span class="number">1</span>;i++)&#123;</span><br><span class="line">        tmp.<span class="built_in">push_back</span>(<span class="built_in">intersect</span>(q[i].lp, q[i].rp, q[i + <span class="number">1</span>].lp, q[i + <span class="number">1</span>].rp));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; tmp.<span class="built_in">size</span>() - <span class="number">1</span>;i++)&#123;</span><br><span class="line">        ans += <span class="built_in">cross</span>(tmp[i] - tmp.<span class="built_in">front</span>(), tmp[i + <span class="number">1</span>] - tmp.<span class="built_in">front</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans / <span class="number">2.0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="random-incremental"><a href="#random-incremental" class="headerlink" title="random-incremental"></a>random-incremental</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">circle <span class="title">cover</span><span class="params">(<span class="type">const</span> point&amp; a, <span class="type">const</span> point&amp; b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; (a + b) / <span class="number">2</span>, <span class="built_in">distance</span>(a, b) / <span class="number">2</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最小圆覆盖</span></span><br><span class="line"><span class="function">circle <span class="title">increment</span><span class="params">(vector&lt;point&gt; vp)</span></span>&#123;</span><br><span class="line">    <span class="built_in">random_shuffle</span>(vp.<span class="built_in">begin</span>(), vp.<span class="built_in">end</span>());<span class="comment">//随机化</span></span><br><span class="line">    <span class="type">int</span> n = vp.<span class="built_in">size</span>();</span><br><span class="line">    circle ans = &#123;vp.<span class="built_in">front</span>(), <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ans.r &lt; <span class="built_in">distance</span>(ans.o, vp[i]))&#123;</span><br><span class="line">            ans = &#123;vp[i], <span class="number">0</span>&#125;;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; i;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ans.r &lt; <span class="built_in">distance</span>(ans.o, vp[j]))&#123;</span><br><span class="line">                    ans = <span class="built_in">cover</span>(vp[i], vp[j]);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>;k &lt; j;k++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(ans.r &lt; <span class="built_in">distance</span>(ans.o, vp[k]))&#123;</span><br><span class="line">                            ans = <span class="built_in">cover</span>(vp[i], vp[j], vp[k]);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><h3 id="Int128"><a href="#Int128" class="headerlink" title="Int128"></a>Int128</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(__int128&amp; x)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> f = <span class="number">1</span>;</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">f *= <span class="number">-1</span>;</span><br><span class="line">ch = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">x = x * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">ch = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line">x *= f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">print</span><span class="params">(__int128 x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="O2-O3-fast-read-fast-write"><a href="#O2-O3-fast-read-fast-write" class="headerlink" title="O2 &amp; O3 &amp; fast-read &amp; &amp; fast-write"></a>O2 &amp; O3 &amp; fast-read &amp; &amp; fast-write</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//O2</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//O3</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(3,<span class="string">&quot;Ofast&quot;</span>,<span class="string">&quot;inline&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//fast-read</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> w = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            w = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ch = <span class="built_in">getchar</span>(); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + (ch - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//fast-write</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        x = -x;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>) &#123;</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> Template </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frieren Beyond Journey&#39;s End Solution</title>
      <link href="/2023/12/02/ACM/SCUT%E6%A0%A1%E8%B5%9B/Frieren%20Beyond%20Journey&#39;s%20End%20Solution/"/>
      <url>/2023/12/02/ACM/SCUT%E6%A0%A1%E8%B5%9B/Frieren%20Beyond%20Journey&#39;s%20End%20Solution/</url>
      
        <content type="html"><![CDATA[<h1 id="Frieren-Beyond-Journey’s-End-Solution"><a href="#Frieren-Beyond-Journey’s-End-Solution" class="headerlink" title="Frieren Beyond Journey’s End Solution"></a>Frieren Beyond Journey’s End Solution</h1><p>考虑对a前缀和得s<br>$$<br>\sum_{i&#x3D;1}^{n}\sum_{l&#x3D;1}^{i}\sum_{r&#x3D;i}^{n}\sum_{k&#x3D;l}^{r}a_k<br>$$</p><p>$$<br>&#x3D; \sum_{i&#x3D;1}^{n}\sum_{l&#x3D;1}^{i}\sum_{r&#x3D;i}^{n}(s[r] - s[l - 1])<br>$$</p><p>$$<br>&#x3D; \sum_{i&#x3D;1}^{n}(\sum_{l&#x3D;1}^{i}\sum_{r&#x3D;i}^ns[r] - \sum_{l&#x3D;1}^{i}\sum_{r&#x3D;i}^ns[l - 1])<br>$$</p><p>$$<br>&#x3D; \sum_{i&#x3D;1}^{n}(\sum_{l&#x3D;1}^{i}\sum_{r&#x3D;i}^ns[r] - \sum_{r&#x3D;i}^{n}\sum_{l&#x3D;1}^is[l - 1])<br>$$</p><p>$$<br>&#x3D; \sum_{i&#x3D;1}^{n}(i  * \sum_{r&#x3D;i}^ns[r] - (n - i + 1) * \sum_{l&#x3D;1}^is[l - 1])<br>$$</p><p>可以看出这两公式又可以前缀和 即对s前缀和得ss<br>$$<br>\sum_{r&#x3D;i}^n s[r] &#x3D; ss[n] - ss[i - 1]<br>$$</p><p>$$<br>\sum_{l&#x3D;1}^i s[l - 1] &#x3D;  \sum_{l&#x3D;0}^{i - 1}s[l] &#x3D; ss[i - 1]<br>$$</p><p>带入进去</p><p>$$<br>&#x3D; \sum_{i&#x3D;1}^{n}(i * (ss[n] - ss[i - 1]) - (n - i + 1) * ss[i - 1])<br>$$</p><p>这个是公式变量只有 $i$， $O(N)$ 累加即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> p = <span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">val</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">s</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">ss</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">cin &gt;&gt; val[i];</span><br><span class="line">s[i] = (s[i - <span class="number">1</span>] + val[i]) % p;</span><br><span class="line">ss[i] = (ss[i - <span class="number">1</span>] + s[i]) % p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">res += (ss[n] - ss[i - <span class="number">1</span>]) * i - ss[i - <span class="number">1</span>] * (n - i + <span class="number">1</span>);</span><br><span class="line">res %= p;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; (res % p + p) % p &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复杂度$O(T * n)$</p><h1 id="杂记"><a href="#杂记" class="headerlink" title="杂记"></a>杂记</h1><p>本道题在比赛两次被删， 在第三场比赛才放上去，呜呜，赛时过了4个（大佬前几场打了，后面就不打了，来了几个，估计是他们做出来的），本题是在学习单调栈时想到的题，用了该题的公式，简化了该题</p><p><a href="https://leetcode.cn/problems/sum-of-total-strength-of-wizards/">2281. 巫师的总力量和 - 力扣（LeetCode）</a></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> SCUT校赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frieren and Rotating Calipers Solution</title>
      <link href="/2023/12/02/ACM/SCUT%E6%A0%A1%E8%B5%9B/Frieren%20and%20Rotating%20Calipers%20Solution/"/>
      <url>/2023/12/02/ACM/SCUT%E6%A0%A1%E8%B5%9B/Frieren%20and%20Rotating%20Calipers%20Solution/</url>
      
        <content type="html"><![CDATA[<h1 id="Frieren-and-Rotating-Calipers-Solution"><a href="#Frieren-and-Rotating-Calipers-Solution" class="headerlink" title="Frieren and Rotating Calipers Solution"></a>Frieren and Rotating Calipers Solution</h1><p>由题矩形长和宽需要与$x$轴或 $y$轴平行</p><p>找到最大，最小的$x$， $y$记为$max_x, min_x, max_y, min_y$</p><p>答案$(max_x - min_x) * (max_y - min_y)$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">x</span><span class="params">(n)</span>, <span class="title">y</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            cin &gt;&gt; x[i] &gt;&gt; y[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> max_x = *<span class="built_in">max_element</span>(x.<span class="built_in">begin</span>(), x.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> max_y = *<span class="built_in">max_element</span>(y.<span class="built_in">begin</span>(), y.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> min_x = *<span class="built_in">min_element</span>(x.<span class="built_in">begin</span>(), x.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> min_y = *<span class="built_in">min_element</span>(y.<span class="built_in">begin</span>(), y.<span class="built_in">end</span>());</span><br><span class="line">        cout &lt;&lt; (max_x - min_x) * (max_y - min_y) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复杂度$O(T * n)$</p><h1 id="杂记"><a href="#杂记" class="headerlink" title="杂记"></a>杂记</h1><p>学习旋转卡壳时想到的签到题，赛时凡过题者都过了这题</p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> SCUT校赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在blog写作</title>
      <link href="/2023/12/02/Learning/Build%20Hexo/Write%20On%20Hexo/"/>
      <url>/2023/12/02/Learning/Build%20Hexo/Write%20On%20Hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="在blog写作"><a href="#在blog写作" class="headerlink" title="在blog写作"></a>在blog写作</h1><h2 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h2><p>正常写完md后 放到post下</p><p><strong>注意md Front-matter</strong></p><p><a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter | Hexo</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g </span><br></pre></td></tr></table></figure><p>然后本地启动就可以看到文章</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s </span><br></pre></td></tr></table></figure><p>上传到自己的网站要部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d </span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">常用命令</th><th align="left">简写</th><th align="left">中文含义</th></tr></thead><tbody><tr><td align="left">hexo server</td><td align="left">hexo s</td><td align="left">本地启动</td></tr><tr><td align="left">hexo generate</td><td align="left">hexo g</td><td align="left">生成静态文件</td></tr><tr><td align="left">hexo deploy</td><td align="left">hexo d</td><td align="left">部署网站</td></tr><tr><td align="left">hexo clean</td><td align="left">hexo cl</td><td align="left">清除缓存和已经生成的静态文件</td></tr></tbody></table><p>一般情况，我们先依次输入<code>hexo clean</code>、 <code>hexo g</code> 、 <code>hexo s</code> ，没问题再 <code>hexo d</code>就行。</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="图片未显示"><a href="#图片未显示" class="headerlink" title="图片未显示"></a>图片未显示</h3><ol><li><strong>图片名</strong>和<strong>路径</strong>不能有空格</li><li>本地图片要<strong>相对路径</strong> 以blog为根目录</li></ol><p>typora + hexo</p><p>在Front-matter加上</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typora-root-url: ..</span><br></pre></td></tr></table></figure><p><img src="/images/WriteOnHexo/root.png" alt="root"></p><p>写作时把图片拖入即可</p><p><img src="/images/WriteOnHexo/write.png" alt="write"></p><p>解释：在source下创建images放所有文章图片 WriteOnHexo是本文的图片文件夹， 拖入即可显示，并且网站上也可正常显示</p><p>markdown具体如下</p><p><img src="/images/WriteOnHexo/concrete.png" alt="concrete"></p><h3 id="数学表达式乱码"><a href="#数学表达式乱码" class="headerlink" title="数学表达式乱码"></a>数学表达式乱码</h3><p>需要安装和配置 hexo-math 具体可看他人教程</p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
          <category> Build blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地hexo部署</title>
      <link href="/2023/12/02/Learning/Build%20Hexo/Local%20Hexo/"/>
      <url>/2023/12/02/Learning/Build%20Hexo/Local%20Hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="本地hexo部署"><a href="#本地hexo部署" class="headerlink" title="本地hexo部署"></a>本地hexo部署</h1><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>Git下载地址：<a href="https://git-scm.com/download/">https://git-scm.com/download/</a></p><p><img src="/images/LocalHexo/gitdownload.png" alt="gitdownload"></p><p>直接安装即可，网站会自动匹配合适版本（一直点next， 安装位置可自定义）</p><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>Node.js下载地址： <a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p><p><img src="/images/LocalHexo/nodejsdownload.png" alt="nodejsdownload"></p><p>选择合适的installer直接安装即可</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>新建文件夹blog</p><p>该<strong>blog文件夹作为blog根目录</strong>， 此后所有git bash 都在这操作</p><p><strong>blog内</strong>右键可以看到 git bash here</p><p><img src="/images/LocalHexo/gitbash.png" alt="gitbash"></p><p>安装hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><img src="/images/LocalHexo/hexodownload.png" alt="hexodownload"></p><p>初始化hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p><img src="/images/LocalHexo/hexoinit.png" alt="hexoinit"></p><p>安装相关依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p><img src="/images/LocalHexo/hexoinstall.png" alt="hexoinstall"></p><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="/images/LocalHexo/hexostart.png" alt="hexostart"></p><p>输入后可以看到这个本地静态网站open即可</p><p><img src="/images/LocalHexo/hexolocal.png" alt="hexolocal"></p><p>网站界面可以用butterfly 和 Next 美化</p><p><img src="/images/LocalHexo/webpage.png" alt="webpage"></p><p>利用butterfly美化后，具体可参考</p><p><a href="https://butterfly.js.org/">https://butterfly.js.org/</a></p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
          <category> Build blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frieren and Rotating Calipers</title>
      <link href="/2023/12/01/ACM/SCUT%E6%A0%A1%E8%B5%9B/Frieren%20and%20Rotating%20Calipers/"/>
      <url>/2023/12/01/ACM/SCUT%E6%A0%A1%E8%B5%9B/Frieren%20and%20Rotating%20Calipers/</url>
      
        <content type="html"><![CDATA[<h1 id="Frieren-and-Rotating-Calipers"><a href="#Frieren-and-Rotating-Calipers" class="headerlink" title="Frieren and Rotating Calipers"></a><a href="https://www.luogu.com.cn/problem/U382825">Frieren and Rotating Calipers</a></h1><p><strong>时间限制：1s</strong><br><strong>空间限制：256MB</strong></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>​芙莉莲正在学习旋转卡壳，但是字不会念，你能告诉她正确的读音吗？</p><p>学习过程中看到最小矩形覆盖问题，即给你<strong>n</strong>个点，求最小的矩形使得覆盖所有点。她发现最小的矩形的长和宽不一定与$x$轴，$y$轴平行，她认为这些矩形非常无聊，你能找到面积最小的<strong>有趣矩形</strong>使得覆盖所有点吗？</p><p><strong>有趣矩形</strong>：长和宽与$x$轴或$y$轴平行的矩形</p><h3 id="Input-Description"><a href="#Input-Description" class="headerlink" title="Input Description"></a>Input Description</h3><p>第一行一个正整数<strong>T</strong>表示测试数 $1 \le T \le 10^2$</p><p>每个测试的第一行有一个正整数<strong>n</strong>表示点的数量 $1 \le n \le 10^4$</p><p>每个测试接下来有n行，每行两个整数 $(x, y) $   $0 \le x \le 10^4 $，$0 \le y \le 10^4 $</p><h3 id="Output-Description"><a href="#Output-Description" class="headerlink" title="Output Description"></a>Output Description</h3><p>每行输出符合条件的<strong>有趣矩形</strong>的面积</p><h3 id="Input-Sample"><a href="#Input-Sample" class="headerlink" title="Input Sample"></a>Input Sample</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">0 0</span><br><span class="line">1 0</span><br><span class="line">0 1</span><br><span class="line">4</span><br><span class="line">0 0</span><br><span class="line">1 0</span><br><span class="line">0 1</span><br><span class="line">1 1</span><br></pre></td></tr></table></figure><h3 id="Output-Sample"><a href="#Output-Sample" class="headerlink" title="Output Sample"></a>Output Sample</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> SCUT校赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frieren Beyond Journey&#39;s End</title>
      <link href="/2023/12/01/ACM/SCUT%E6%A0%A1%E8%B5%9B/Frieren%20Beyond%20Journey&#39;s%20End/"/>
      <url>/2023/12/01/ACM/SCUT%E6%A0%A1%E8%B5%9B/Frieren%20Beyond%20Journey&#39;s%20End/</url>
      
        <content type="html"><![CDATA[<h1 id="Frieren-Beyond-Journey’s-End"><a href="#Frieren-Beyond-Journey’s-End" class="headerlink" title="Frieren Beyond Journey’s End"></a><a href="https://www.luogu.com.cn/problem/U367574">Frieren Beyond Journey’s End</a></h1><p><strong>时间限制：1s</strong><br><strong>空间限制：256MB</strong></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>&emsp;&emsp;芙莉莲热衷周游各方搜集奇怪的魔法，某一天她得到一个有趣的魔法公式,  </p><p>$$<br> \sum_{i&#x3D;1}^n\sum_{l&#x3D;1}^i\sum_{r&#x3D;i}^n\sum_{k&#x3D;l}^r a_k<br>$$</p><p>同时为此搜集了<strong>n</strong>个魔法单元。由于种族的长寿天性导致她对时间的感觉不同于一般人，所以她请求你来帮忙。她估算结果可能很大，请你告诉她结果对<strong>1000000007</strong>取余后的数</p><h3 id="Input-Description"><a href="#Input-Description" class="headerlink" title="Input Description"></a>Input Description</h3><p>第一行一个正整数<strong>T</strong>表示测试数 $ 1 \le T \le 10^5 $</p><p>每个测试的第一行有一个正整数<strong>n</strong>表示魔法单元的数量 $ 1 \le n \le 10^5 $</p><p>每个测试的第二行有<strong>n</strong>个整数 $ a_1, a_2, … , a_n  \quad 0 \le a_i \le 10^9 $</p><p>题目保证总的所有n的和不会超过 $ 2 \times 10^5 $</p><h3 id="Output-Description"><a href="#Output-Description" class="headerlink" title="Output Description"></a>Output Description</h3><p>对于每个测试输出一个整数 即结果对  $ 1000000007 $ 取余后的数</p><h3 id="Input-Sample"><a href="#Input-Sample" class="headerlink" title="Input Sample"></a>Input Sample</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">4</span><br><span class="line">2 0 2 3</span><br><span class="line">4</span><br><span class="line">1 0 2 5</span><br></pre></td></tr></table></figure><h3 id="Output-Sample"><a href="#Output-Sample" class="headerlink" title="Output Sample"></a>Output Sample</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">80</span><br><span class="line">90</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> SCUT校赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>usage</title>
      <link href="/2023/12/01/Other/usage/"/>
      <url>/2023/12/01/Other/usage/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="Load-images"><a href="#Load-images" class="headerlink" title="Load images"></a>Load images</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><h3 id="Tags"><a href="#Tags" class="headerlink" title="Tags"></a>Tags</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tags: [1, 2, 3] //标签1， 2， 3</span><br></pre></td></tr></table></figure><h3 id="Categories"><a href="#Categories" class="headerlink" title="Categories"></a>Categories</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">categories: //分类 </span><br><span class="line">-[1]//属于分类1</span><br><span class="line">-[2]//属于分类1</span><br><span class="line">-[3, 4]//属于分类3下的分类4</span><br></pre></td></tr></table></figure><h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><h3 id="大括号语法"><a href="#大括号语法" class="headerlink" title="大括号语法"></a>大括号语法</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125;  \lbrace \rbrace  </span><br><span class="line">//用 \&#123; \&#125; 会失效</span><br></pre></td></tr></table></figure><h3 id="公式换行失效"><a href="#公式换行失效" class="headerlink" title="公式换行失效"></a>公式换行失效</h3>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>Link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>About</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Movies</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Music</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
