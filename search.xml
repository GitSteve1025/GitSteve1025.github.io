<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Discrete mathematics</title>
      <link href="/2023/12/12/Discrete%20mathematics/"/>
      <url>/2023/12/12/Discrete%20mathematics/</url>
      
        <content type="html"><![CDATA[<h1 id="逻辑和证明"><a href="#逻辑和证明" class="headerlink" title="逻辑和证明"></a>逻辑和证明</h1><h2 id="命题逻辑"><a href="#命题逻辑" class="headerlink" title="命题逻辑"></a>命题逻辑</h2><h3 id="命题"><a href="#命题" class="headerlink" title="命题"></a>命题</h3><p>命题是一个陈述语句（即陈述事实的语句），它或真或假，但不能既真又假。、</p><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><p>令 $p$ 和 $q$ 为命题。条件语句 $p \rightarrow q$ 是命题“如果 $p$，则 $q$ ”。当 $p$ 为真而 $q$ 为假时，条件语句 $p \rightarrow q$ 为假，否则为真。在条件语句 $p \rightarrow q$ 中，$p$ 称为假设(前件、前提)，$q$ 称为结论(后件)。</p><table><thead><tr><th align="center">$p$</th><th align="center">$q$</th><th align="center">$p \rightarrow  q$</th></tr></thead><tbody><tr><td align="center">T</td><td align="center">T</td><td align="center">T</td></tr><tr><td align="center">T</td><td align="center">F</td><td align="center">F</td></tr><tr><td align="center">F</td><td align="center">T</td><td align="center">T</td></tr><tr><td align="center">F</td><td align="center">F</td><td align="center">T</td></tr></tbody></table><p>原命题：$p \rightarrow q$</p><p>逆命题：$q \rightarrow p$ </p><p>逆否命题：$\neg q \rightarrow \neg p$ </p><p>反命题：$\neg p \rightarrow \neg q$</p><h3 id="双条件"><a href="#双条件" class="headerlink" title="双条件"></a>双条件</h3><p>令 $p$ 和 $q$ 为命题。双条件语句 $p \leftrightarrow q$ 是命题“ $p$ 当且仅当 $q$ ”。当 $p$ 和 $q$ 有同样的真值时，双条件语句为真，否则为假。双条件语句也称为双向蕴含。</p><table><thead><tr><th align="center">$p$</th><th align="center">$q$</th><th align="center">$p \leftrightarrow q$</th></tr></thead><tbody><tr><td align="center">T</td><td align="center">T</td><td align="center">T</td></tr><tr><td align="center">T</td><td align="center">F</td><td align="center">F</td></tr><tr><td align="center">F</td><td align="center">T</td><td align="center">F</td></tr><tr><td align="center">F</td><td align="center">F</td><td align="center">T</td></tr></tbody></table><h3 id="逻辑运算符的优先级"><a href="#逻辑运算符的优先级" class="headerlink" title="逻辑运算符的优先级"></a>逻辑运算符的优先级</h3><table><thead><tr><th align="center">运算符</th><th align="center">优先级</th></tr></thead><tbody><tr><td align="center">$\neg$</td><td align="center">1</td></tr><tr><td align="center">$\wedge$</td><td align="center">2</td></tr><tr><td align="center">$\vee$</td><td align="center">3</td></tr><tr><td align="center">$\rightarrow$</td><td align="center">4</td></tr><tr><td align="center">$\leftrightarrow$</td><td align="center">5</td></tr></tbody></table><h3 id="永真式（重言式）-矛盾式-可能式"><a href="#永真式（重言式）-矛盾式-可能式" class="headerlink" title="永真式（重言式） &amp; 矛盾式 &amp;可能式"></a>永真式（重言式） &amp; 矛盾式 &amp;可能式</h3><p><strong>永真式</strong>（$tautology$）：一个真值永远是真的复合命题（无论其中出现的命题变元的真值是什么），也称为<strong>重言式</strong>。</p><p><strong>矛盾式</strong>（$contradiction$）：一个真值永远为假的复合命题。</p><p><strong>可能式</strong>（$contingency$）：既不是永真式又不是矛盾式的复合命题。</p><h2 id="命题等价式"><a href="#命题等价式" class="headerlink" title="命题等价式"></a>命题等价式</h2><h3 id="逻辑等价式"><a href="#逻辑等价式" class="headerlink" title="逻辑等价式"></a>逻辑等价式</h3><p>如果 $p \leftrightarrow q$ 是永真式，则复合命题 $p$ 和 $q$ 称为是逻辑等价的。用记号 $p \equiv q$ 表示 $p$ 和 $q$ 是逻辑等价的。</p><h2 id="谓词与量词"><a href="#谓词与量词" class="headerlink" title="谓词与量词"></a>谓词与量词</h2><h3 id="全称量化"><a href="#全称量化" class="headerlink" title="全称量化"></a>全称量化</h3><p>$P(x)$ 的全称量化是语句：“ $P(x)$ 对 $x$ 在其论域的所有值为真。”</p><p>符号 $\forall x P(x)$ 表示 $P(x)$ 的全称量化，其中 $\forall$ 称为全称量词。</p><p>命题 $\forall x P(x)$ 读做“对所有 $x$ , $P(x)$ ”或“对每个 $x$ ，$P(x)$”。一个使 $P(x)$ 为假的个体称为 $\forall x P(x)$ 的<strong>反例</strong>。</p><h3 id="存在量化"><a href="#存在量化" class="headerlink" title="存在量化"></a>存在量化</h3><p>$P(x)$ 的存在量化是语句：“论域中存在一个个体 $x$ 满足 $P(x)$ 。”</p><p>符号 $\exists x P(x)$ 表示 $P(x)$ 的存在量化，其中 $\exists$ 称为存在量词。</p><h3 id="量词优先级"><a href="#量词优先级" class="headerlink" title="量词优先级"></a>量词优先级</h3><p>$\forall &gt; \exists$</p><p><strong>注意</strong></p><p>$\forall x P(x) \vee Q(x)$ 是 $\forall x P(x)$ 和 $Q(x)$ 的析取</p><p>$\forall x (P(x) \vee Q(x))$ 是 $\forall x$ 对 $(P(x) \vee Q(x))$ 的析取</p><h3 id="涉及量词的逻辑等价式"><a href="#涉及量词的逻辑等价式" class="headerlink" title="涉及量词的逻辑等价式"></a>涉及量词的逻辑等价式</h3><p>涉及谓词和量词的语句是逻辑等价的当且仅当无论用什么谓词代入这些语句，也无论为这些命题函数里的变量指定什么论域，它们都有相同的真值。我们用 $S \equiv T$ 表示涉及谓词和量词的两个语句 $S$ 和 $T$ 是逻辑等价的。</p><p><strong>证明两个语句逻辑等价</strong> $P(x) \equiv Q(x)$</p><ol><li>$(P(x) &#x3D; T) \rightarrow (Q(x) &#x3D; T)$</li><li>$(Q(x) &#x3D; T) \rightarrow (P(x) &#x3D; T)$</li><li>$P(x) \equiv Q(x)$</li></ol><h3 id="量词的否定（德-cdot-摩根律）"><a href="#量词的否定（德-cdot-摩根律）" class="headerlink" title="量词的否定（德 $\cdot$ 摩根律）"></a>量词的否定（德 $\cdot$ 摩根律）</h3><table><thead><tr><th align="center">否定</th><th align="center">等价语句</th></tr></thead><tbody><tr><td align="center">$\neg \exists x P(x)$</td><td align="center">$\forall x \neg P(x)$</td></tr><tr><td align="center">$\neg \forall x P(x)$</td><td align="center">$\exists x \neg P(x)$</td></tr></tbody></table><h2 id="推理规则"><a href="#推理规则" class="headerlink" title="推理规则"></a>推理规则</h2><table><thead><tr><th align="left">推理规则</th><th align="center">永真式</th><th align="center">名称</th></tr></thead><tbody><tr><td align="left">$\quad p$<br>$\quad p \rightarrow q$<br>$\therefore q$</td><td align="center">$(p \wedge (p \rightarrow q)) \rightarrow q$</td><td align="center">假言推理</td></tr><tr><td align="left">$\quad \neg q$<br>$\quad p \rightarrow q$<br>$\therefore \neg p$</td><td align="center">$(\neg q \wedge (p \rightarrow q)) \rightarrow \neg p$</td><td align="center">取拒式</td></tr><tr><td align="left">$\quad p \rightarrow q$<br>$\quad q \rightarrow r$<br>$\therefore p \rightarrow r$</td><td align="center">$((p \rightarrow q) \wedge (q \rightarrow r)) \rightarrow (p \rightarrow r)$</td><td align="center">假言三段论</td></tr><tr><td align="left">$\quad p \vee q$<br>$\quad \neg p$<br>$\therefore q$</td><td align="center">$((p \vee q) \wedge \neg p) \rightarrow q$</td><td align="center">析取三段论</td></tr><tr><td align="left">$\quad p$<br>$\therefore p \vee q$</td><td align="center">$p \rightarrow (p \vee q)$</td><td align="center">附加律</td></tr><tr><td align="left">$\quad p \wedge q$<br>$\therefore p$</td><td align="center">$(p \wedge q) \rightarrow p$</td><td align="center">化简律</td></tr><tr><td align="left">$\quad p$<br>$\quad q$<br>$\therefore p \wedge q$</td><td align="center">$((p) \wedge (q)) \rightarrow (p \wedge q)$</td><td align="center">合取律</td></tr><tr><td align="left">$\quad p \vee q$<br>$\quad \neg p \vee r$<br>$\therefore q \vee r$</td><td align="center">$((p \vee q) \wedge (\neg p \vee r)) \rightarrow (q \vee r)$</td><td align="center">消解律</td></tr></tbody></table><p><strong>格式</strong></p><table><thead><tr><th align="center">步骤</th><th align="center">理由</th></tr></thead><tbody><tr><td align="center">1.表达式</td><td align="center">前提引入</td></tr><tr><td align="center">2.结论式</td><td align="center">XX律，用XX步</td></tr></tbody></table><p><strong>一次一条结论， 不可跳步骤</strong></p><p><strong>量化命题的推理规则</strong></p><table><thead><tr><th align="left">推理规则</th><th align="center">名称</th></tr></thead><tbody><tr><td align="left">$\quad \forall x P(x)$<br>$\therefore P(c)$</td><td align="center">全称实例</td></tr><tr><td align="left">$\quad P(c)$，任意 $c$<br>$\therefore \forall x P(x)$</td><td align="center">全称引入</td></tr><tr><td align="left">$\quad \exists x P(x)$<br>$\therefore P(c)$，对某个元素 $c$</td><td align="center">存在实例</td></tr><tr><td align="left">$\quad P(c)$，对某个元素 $c$<br>$\therefore \exists x P(x)$</td><td align="center">存在引入</td></tr></tbody></table><h2 id="推理表"><a href="#推理表" class="headerlink" title="推理表"></a>推理表</h2><p><img src="/images/Discretemathematics/expressions_page_one.jpg" alt="expressions_page_one"></p><p><img src="/images/Discretemathematics/expression_page_two.jpg" alt="expression_page_two"></p><h1 id="集合、函数、序列、求和与矩阵"><a href="#集合、函数、序列、求和与矩阵" class="headerlink" title="集合、函数、序列、求和与矩阵"></a>集合、函数、序列、求和与矩阵</h1><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>集合是对象的一个无序的聚集，对象也称为集合的元素（element）或成员（member）。集合包含（contain）它的元素。我们用 $a \in A$ 来表示 $a$ 是集合 $A$ 中一个元素。而记号 $a \notin A$ 表示 $a$ 不是集合 $A$ 中的一个元素。</p><p><strong>证明集合相等</strong> （$A &#x3D; B$）</p><ol><li>$A \subseteq B$</li><li>$B \subseteq A$</li><li>$A &#x3D; B$</li></ol><h3 id="集合的大小"><a href="#集合的大小" class="headerlink" title="集合的大小"></a>集合的大小</h3><p>$|S|$ 表示集合的大小</p><h3 id="幂集"><a href="#幂集" class="headerlink" title="幂集"></a>幂集</h3><p>给定集合 $S$，$S$ 的幂集（power set）是集合 $S$ 所有子集的集合。$S$ 的幂集记为 $\Rho (S)$</p><h3 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h3><p>令 $A$ 和 $B$ 为集合。$A$ 和 $B$ 的笛卡儿积（Cartesian product）用 $A \times B$ 表示，是所有序偶 $(a, b)$ 的集合，其中 $a \in A, b \in B$。于是，$A \times B &#x3D; {(a, b) | a \in A \wedge b \in B }$</p><h2 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h2><p>$A \cup B &#x3D; {x | x \in A \vee x \in B }$</p><p>$A \cap B &#x3D; {x | x \in A \wedge x \in B }$</p><p>$A - B &#x3D; {x | x \in A \wedge x \notin B } &#x3D; A \cap \overline{B}$</p><p>$\overline{A} \quad \quad &#x3D; {x | x \in U \wedge x \notin A }$</p><h3 id="集合恒等式"><a href="#集合恒等式" class="headerlink" title="集合恒等式"></a>集合恒等式</h3><table><thead><tr><th align="left">恒等式</th><th align="center">名称</th></tr></thead><tbody><tr><td align="left">$A \cap U &#x3D; A$<br>$A \cup \varnothing &#x3D; A$</td><td align="center">恒等律</td></tr><tr><td align="left">$A \cup U &#x3D; U$<br>$A \cap \varnothing &#x3D; \varnothing $</td><td align="center">支配律</td></tr><tr><td align="left">$A \cup A &#x3D; A$<br>$A \cap A &#x3D; A$</td><td align="center">幂等律</td></tr><tr><td align="left">$\overline{(\overline{A})} &#x3D; A$</td><td align="center">补律</td></tr><tr><td align="left">$A \cup B &#x3D; B \cup A$<br>$A \cap B &#x3D; B \cap A$</td><td align="center">交换律</td></tr><tr><td align="left">$A \cup (B \cup C) &#x3D; (A \cup B) \cup C$<br>$A \cap (B \cap C) &#x3D; (A \cap B) \cap C$</td><td align="center">结合律</td></tr><tr><td align="left">$A \cup (B \cap C) &#x3D; (A \cup B) \cap (A \cup C)$<br>$A \cap (B \cup C) &#x3D; (A \cap B) \cup (A \cap C)$</td><td align="center">分配律</td></tr><tr><td align="left">$\overline{A \cap B} &#x3D; \overline{A} \cup \overline{B}$<br>$\overline{A \cup B} &#x3D; \overline{A} \cap \overline{B}$</td><td align="center">德 $\cdot$ 摩根律</td></tr><tr><td align="left">$A \cup (A \cap B) &#x3D; A$<br>$A \cap (A \cup B) &#x3D; A$</td><td align="center">吸收律</td></tr><tr><td align="left">$A \cup \overline{A} &#x3D; U$<br>$A \cap \overline{A} &#x3D; \varnothing$</td><td align="center">互补律</td></tr></tbody></table><h3 id="扩展并集和交集"><a href="#扩展并集和交集" class="headerlink" title="扩展并集和交集"></a>扩展并集和交集</h3><p>$\bigcup\limits_{i &#x3D; 1}^{n} A_{i} &#x3D; A_{1} \cup A_{2} \cup \cdot \cdot \cdot \cup A_{n}$</p><p>$\bigcap\limits_{i &#x3D; 1}^{n} A_{i} &#x3D; A_{1} \cap A_{2} \cap \cdot \cdot \cdot \cap A_{n}$</p><p>$\overline{\bigcup\limits_{i &#x3D; 1}^{n} A_{i}} &#x3D; \overline{A_{1}} \cap \overline{A_{2}} \cap \cdot \cdot \cdot \cap \overline{A_{n}}$</p><p>$\overline{\bigcap\limits_{i &#x3D; 1}^{n} A_{i}} &#x3D; \overline{A_{1}} \cup \overline{A_{2}} \cup \cdot \cdot \cdot \cup \overline{A_{n}}$</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="一对一-（单射）"><a href="#一对一-（单射）" class="headerlink" title="一对一 （单射）"></a>一对一 （单射）</h3><p>函数 $f$ 称为是一对一（one-to-one）或单射函数（injection），当且仅当对于 $f$ 的定义域中的所有 $a$ 和 $b$ 有 $f(a)&#x3D;f(b)$ 蕴含 $a &#x3D; b$。一个函数如果是一对一的，就称为是单射的（injective）。</p><h3 id="映上（满射）"><a href="#映上（满射）" class="headerlink" title="映上（满射）"></a>映上（满射）</h3><p>一个从 $A$ 到 $B$ 的函数 $f$ 称为映上（onto）或满射（surjection）函数，当且仅当对每个 $b \in B$ 有元素 $a \in A$ 使得 $f(a)&#x3D;b$。一个函数如果是映上的就称为是满射的（surjective）。</p><h3 id="一一对应（双射）"><a href="#一一对应（双射）" class="headerlink" title="一一对应（双射）"></a>一一对应（双射）</h3><p>函数 $f$ 是一一对应（one-to-one correspondance）或双射（bijection）函数，如果它既是一对一的又是映上的。这样的函数称为是双射的（bijective）。</p><h3 id="合成"><a href="#合成" class="headerlink" title="合成"></a>合成</h3><p>令 $g$ 为从集合 $A$ 到集合 $B$ 的函数，$f$ 是从集合 $B$ 到集合 $C$ 的函数，函数 $f$ 和 $g$ 的合成（composition），记作 $f \ o \ g$，定义为对任意$a \in A \quad (f \ o \ g)(a) &#x3D; f(g(a))$</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2023 CCPC Guilin C.Master of Both IV</title>
      <link href="/2023/12/11/2023%20CCPC%20Guilin%20C/"/>
      <url>/2023/12/11/2023%20CCPC%20Guilin%20C/</url>
      
        <content type="html"><![CDATA[<h1 id="C-Master-of-Both-IV"><a href="#C-Master-of-Both-IV" class="headerlink" title="C. Master of Both IV"></a><a href="https://codeforces.com/gym/104768/problem/C">C. Master of Both IV</a></h1><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>前置知识：线性基</p><p>线性基内的基元异或不会为 0 ，线性基<strong>插入失败</strong>等价于<strong>当前数与线性基的某些基元异或为 0</strong></p><p>由此我们可以记录 插入失败的个数，记为$c$，则任选数异或为 0 的种类为 $2^c - 1$（排除空集)</p><p>题目要求：$\forall x\in[1,m],a_{i_x}|\bigoplus\limits_{j&#x3D;1}^m a_{i_j}$</p><p>我们将<strong>异或结果</strong>分为两种：等于 0， 不等于 0</p><p>一、等于 0</p><p>0 是任何数的倍数， 把所有数插入线性基求插入失败次数 $c$ 贡献 $2^c - 1$</p><p>二、不等于 0</p><p>假设结果为 $f$，因为要整除，选的数必须为它的因子，</p><p>设因子为$f_1, f_2, f_3,…,f_n$ （不包括自己）</p><p>个数记为$c_1, c_2, c_3,…,c_n$ （不包括自己）</p><p>让因子的异或结果为 0， 再异或自己， 结果就是 $f$， 满足题目要求</p><p>把所有因子插入进线性基，同种数必定插入失败，直接加 </p><p>插入失败的次数等于：$\sum\limits_{i &#x3D; 1}^{n}(c_i - 1) + k$  (k为因子插入失败次数)</p><p>假设自己有 $c$ 个 要让结果不为 0 ，我们必须选<strong>奇数</strong>个， 有 $2^{c - 1}$ 种选法</p><p>贡献：$2^{c - 1} * 2^{(\sum\limits_{i &#x3D; 1}^{n}(c_i - 1) + k)} &#x3D; 2^{(\sum\limits_{i &#x3D; 1}^{n}(c_i - 1) + k + c - 1)}$</p><p>二者相加即为结果</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> N&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">linear_basis</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> siz;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> basis[N];</span><br><span class="line">    <span class="built_in">linear_basis</span>()&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; N;i++)&#123;</span><br><span class="line">            basis[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        siz = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = N - <span class="number">1</span>;~i;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>((x &gt;&gt; i) &amp; <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(basis[i] == <span class="number">0</span>)&#123;</span><br><span class="line">                    siz += <span class="number">1</span>;</span><br><span class="line">                    basis[i] = x;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    x ^= basis[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> P = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> P2[M];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prepare</span><span class="params">()</span></span>&#123;</span><br><span class="line">    P2[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; M;i++)&#123;</span><br><span class="line">        P2[i] = P2[i - <span class="number">1</span>] * <span class="number">2</span> % P;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">power</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span> p)</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">1</span>;</span><br><span class="line">    a %= p;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>)&#123;</span><br><span class="line">            ans = ans * a % p;</span><br><span class="line">        &#125;</span><br><span class="line">        a = a * a % p;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cnt</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        cnt[a[i]] += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&gt; <span class="built_in">val</span>(n + <span class="number">1</span>); </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt[i])&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i * <span class="number">2</span>;j &lt;= n;j += i)&#123;</span><br><span class="line">                val[j].<span class="built_in">push_back</span>(&#123;i, cnt[i]&#125;);</span><br><span class="line">            &#125;            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt[i])&#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> c = <span class="number">0</span>;</span><br><span class="line">            linear_basis&lt;N&gt; line;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; [x, y] : val[i])&#123;</span><br><span class="line">                c += y - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(!line.<span class="built_in">insert</span>(x))&#123;</span><br><span class="line">                    c += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> tep = P2[cnt[i] - <span class="number">1</span>];</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> tmp = P2[c] * tep % P;</span><br><span class="line">            ans = (ans + tmp) % P;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> c = <span class="number">0</span>;</span><br><span class="line">    linear_basis&lt;N&gt; line;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!line.<span class="built_in">insert</span>(a[i]))&#123;</span><br><span class="line">            c += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = (ans + P2[c] - <span class="number">1</span>) % P;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">prepare</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> CCPC </category>
          
          <category> Guilin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性基 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Splay</title>
      <link href="/2023/12/08/Splay/"/>
      <url>/2023/12/08/Splay/</url>
      
        <content type="html"><![CDATA[<h1 id="Splay"><a href="#Splay" class="headerlink" title="Splay"></a>Splay</h1><p>Splay 操作规定：每访问一个节点$x$后都要强制将其旋转到根节点。</p><p>每次对$x$做一次 splay 步骤，$x$到根节点的距离都会更近。</p><p>Splay 步骤有三种，具体分为六种情况：</p><h2 id="rotate"><a href="#rotate" class="headerlink" title="rotate"></a>rotate</h2><h3 id="zig"><a href="#zig" class="headerlink" title="zig"></a>zig</h3><p>当$p$是根节点，$x$是$p$的左子节点时操作。</p><p><img src="/images/DataStructure/Splay/zig.png" alt="zig"></p><h4 id="zig-code"><a href="#zig-code" class="headerlink" title="zig code"></a>zig code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//to do</span></span><br></pre></td></tr></table></figure><h3 id="zag"><a href="#zag" class="headerlink" title="zag"></a>zag</h3><p>当$p$是根节点，$x$是$p$的右子节点时操作。</p><p><img src="/images/DataStructure/Splay/zag.png" alt="zag"></p><h4 id="zag-code"><a href="#zag-code" class="headerlink" title="zag code"></a>zag code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//to do</span></span><br></pre></td></tr></table></figure><h3 id="zig-zig"><a href="#zig-zig" class="headerlink" title="zig-zig"></a>zig-zig</h3><p>当$p$不是根节点，$p$和$x$都是左子节点时操作。</p><p><img src="/images/DataStructure/Splay/zig-zig.png" alt="zig-zig"></p><h4 id="zig-zig-code"><a href="#zig-zig-code" class="headerlink" title="zig-zig code"></a>zig-zig code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//to do</span></span><br></pre></td></tr></table></figure><h3 id="zag-zag"><a href="#zag-zag" class="headerlink" title="zag-zag"></a>zag-zag</h3><p>当$p$不是根节点，$p$和$x$都是右子节点时操作。</p><p><img src="/images/DataStructure/Splay/zag-zag.png" alt="zag-zag"></p><h4 id="zag-zag-code"><a href="#zag-zag-code" class="headerlink" title="zag-zag code"></a>zag-zag code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//to do</span></span><br></pre></td></tr></table></figure><h3 id="zig-zag"><a href="#zig-zag" class="headerlink" title="zig-zag"></a>zig-zag</h3><p>当$p$不是根节点，$p$是左子节点，$x$是右子节点时操作。</p><p><img src="/images/DataStructure/Splay/zig-zag.png" alt="zig-zag"></p><h4 id="zig-zag-code"><a href="#zig-zag-code" class="headerlink" title="zig-zag code"></a>zig-zag code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//to do</span></span><br></pre></td></tr></table></figure><h3 id="zag-zig"><a href="#zag-zig" class="headerlink" title="zag-zig"></a>zag-zig</h3><p>当$p$不是根节点，$p$是右子节点，$x$是左子节点时操作。</p><p><img src="/images/DataStructure/Splay/zag-zig.png" alt="zag-zig"></p><h4 id="zag-zig-code"><a href="#zag-zig-code" class="headerlink" title="zag-zig code"></a>zag-zig code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//to do</span></span><br></pre></td></tr></table></figure><p>可以看出 zig 和 zag 互为<strong>镜像</strong>操作</p><h2 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h2><h3 id="insert-code"><a href="#insert-code" class="headerlink" title="insert code"></a>insert code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//to do</span></span><br></pre></td></tr></table></figure><h2 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h2><h3 id="remove-code"><a href="#remove-code" class="headerlink" title="remove code"></a>remove code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//to do</span></span><br></pre></td></tr></table></figure><h2 id="kth"><a href="#kth" class="headerlink" title="kth"></a>kth</h2><h3 id="kth-code"><a href="#kth-code" class="headerlink" title="kth code"></a>kth code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//to do</span></span><br></pre></td></tr></table></figure><h2 id="precursor"><a href="#precursor" class="headerlink" title="precursor"></a>precursor</h2><h3 id="precursor-code"><a href="#precursor-code" class="headerlink" title="precursor code"></a>precursor code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//to do</span></span><br></pre></td></tr></table></figure><h2 id="successor"><a href="#successor" class="headerlink" title="successor"></a>successor</h2><h3 id="successor-code"><a href="#successor-code" class="headerlink" title="successor code"></a>successor code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//to do</span></span><br></pre></td></tr></table></figure><h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><h3 id="Literary-Splay"><a href="#Literary-Splay" class="headerlink" title="Literary Splay"></a>Literary Splay</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//to do</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Learn Data Structure </category>
          
          <category> Splay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Learn Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Template</title>
      <link href="/2023/12/03/Template/"/>
      <url>/2023/12/03/Template/</url>
      
        <content type="html"><![CDATA[<h1 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h1><h2 id="Data-Structures"><a href="#Data-Structures" class="headerlink" title="Data Structures"></a>Data Structures</h2><h3 id="Fenwick"><a href="#Fenwick" class="headerlink" title="Fenwick"></a>Fenwick</h3><h4 id="point-set-range-query"><a href="#point-set-range-query" class="headerlink" title="point set range query"></a>point set range query</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Fenwick</span> &#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">vector&lt;T&gt; sum;</span><br><span class="line"><span class="built_in">Fenwick</span>(<span class="type">int</span> _n = <span class="number">0</span>) &#123;</span><br><span class="line">n = _n;</span><br><span class="line">sum.<span class="built_in">resize</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p, T k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = p; i &lt; n; i += <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">sum[i] += k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">T <span class="title">query</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">T ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = p; i &gt; <span class="number">0</span>; i -= <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">ans += sum[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">T <span class="title">getsum</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">query</span>(r) - <span class="built_in">query</span>(l - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="range-set-range-query"><a href="#range-set-range-query" class="headerlink" title="range set range query"></a>range set range query</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fenwick</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line">vector&lt;T&gt; S;</span><br><span class="line">vector&lt;T&gt; C;</span><br><span class="line"><span class="built_in">Fenwick</span>(<span class="type">int</span> n = <span class="number">0</span>) &#123;</span><br><span class="line">N = n;</span><br><span class="line">S.<span class="built_in">resize</span>(N);</span><br><span class="line">C.<span class="built_in">resize</span>(N);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowerbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, T k)</span> </span>&#123;</span><br><span class="line"><span class="built_in">Add</span>(l, k);</span><br><span class="line"><span class="built_in">Add</span>(r + <span class="number">1</span>, -k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">T <span class="title">query</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Sum</span>(r) - <span class="built_in">Sum</span>(l - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> p, T k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = p; i &lt; N; i += <span class="built_in">lowerbit</span>(i)) &#123;</span><br><span class="line">S[i] += k;</span><br><span class="line">C[i] += k * p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">T <span class="title">Sum</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">T Ssum = <span class="number">0</span>;</span><br><span class="line">T Csum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = p; i &gt; <span class="number">0</span>; i -= <span class="built_in">lowerbit</span>(i)) &#123;</span><br><span class="line">Ssum += S[i] * (p + <span class="number">1</span>);</span><br><span class="line">Csum += C[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Ssum - Csum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Linear-basis"><a href="#Linear-basis" class="headerlink" title="Linear_basis"></a>Linear_basis</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> N&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">linear_basis</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> cnt;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> basis[N];</span><br><span class="line">    <span class="built_in">linear_basis</span>() &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            basis[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = N - <span class="number">1</span>; ~i; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((x &gt;&gt; i) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (basis[i]) &#123;</span><br><span class="line">                    x ^= basis[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    basis[i] = x;</span><br><span class="line">                    cnt++;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">max_val</span><span class="params">(<span class="type">long</span> <span class="type">long</span> k = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = N - <span class="number">1</span>; ~i; i--) &#123;</span><br><span class="line">            res = <span class="built_in">max</span>(res, res ^ basis[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">const</span> linear_basis&lt;N&gt;&amp; other)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="built_in">insert</span>(other.basis[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            basis[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">orthogonalize</span><span class="params">()</span> </span>&#123;<span class="comment">//正交化</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = N - <span class="number">1</span>; ~i; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i - <span class="number">1</span>; ~j; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((basis[i] &gt;&gt; j) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                    basis[i] ^= basis[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">kth</span><span class="params">(<span class="type">long</span> <span class="type">long</span> k)</span> </span>&#123;<span class="comment">//第k小</span></span><br><span class="line">        vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; tep;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (basis[i]) &#123;</span><br><span class="line">                tep.<span class="built_in">push_back</span>(basis[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; tep.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((k &gt;&gt; i) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                res ^= tep[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">rk</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span> </span>&#123;<span class="comment">//查数排名</span></span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> l = <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> r = (<span class="number">1ll</span> &lt;&lt; <span class="built_in">size</span>()) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> Mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> val = <span class="built_in">kth</span>(Mid);</span><br><span class="line">            <span class="keyword">if</span> (val == x) &#123;</span><br><span class="line">                <span class="keyword">return</span> Mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (val &gt; x) &#123;</span><br><span class="line">                r = Mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                l = Mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="DSU"><a href="#DSU" class="headerlink" title="DSU"></a>DSU</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DSU</span> &#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; f, siz;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">DSU</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">DSU</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        f.<span class="built_in">resize</span>(n);</span><br><span class="line">        std::<span class="built_in">iota</span>(f.<span class="built_in">begin</span>(), f.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        siz.<span class="built_in">assign</span>(n, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (x != f[x]) &#123;</span><br><span class="line">            x = f[x] = f[f[x]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">same</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        x = <span class="built_in">find</span>(x);</span><br><span class="line">        y = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (x == y) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        siz[x] += siz[y];</span><br><span class="line">        f[y] = x;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> siz[<span class="built_in">find</span>(x)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><h3 id="Exgcd"><a href="#Exgcd" class="headerlink" title="Exgcd"></a>Exgcd</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">Exgcd</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span>&amp; x, <span class="type">long</span> <span class="type">long</span>&amp; y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!b) &#123;</span><br><span class="line">x = <span class="number">1</span>;</span><br><span class="line">y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> c = <span class="built_in">Exgcd</span>(b, a % b, y, x);</span><br><span class="line">y -= (a / b) * x;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ModInt"><a href="#ModInt" class="headerlink" title="ModInt"></a>ModInt</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> MOD&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ModInt</span> &#123;</span><br><span class="line"><span class="type">unsigned</span> x;</span><br><span class="line"><span class="built_in">ModInt</span>() : <span class="built_in">x</span>(<span class="number">0</span>) &#123; &#125;</span><br><span class="line"><span class="built_in">ModInt</span>(<span class="type">signed</span> sig) : <span class="built_in">x</span>(sig) &#123;  &#125;</span><br><span class="line"><span class="built_in">ModInt</span>(<span class="type">signed</span> <span class="type">long</span> <span class="type">long</span> sig) : <span class="built_in">x</span>(sig% MOD) &#123; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> (<span class="type">int</span>)x; &#125;</span><br><span class="line"><span class="function">ModInt <span class="title">pow</span><span class="params">(<span class="type">long</span> <span class="type">long</span> p)</span> </span>&#123; ModInt res = <span class="number">1</span>, a = *<span class="keyword">this</span>; <span class="keyword">while</span> (p) &#123; <span class="keyword">if</span> (p &amp; <span class="number">1</span>) res *= a; a *= a; p &gt;&gt;= <span class="number">1</span>; &#125; <span class="keyword">return</span> res; &#125;</span><br><span class="line"></span><br><span class="line">ModInt&amp; <span class="keyword">operator</span>+=(ModInt that) &#123; <span class="keyword">if</span> ((x += that.x) &gt;= MOD) x -= MOD; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">ModInt&amp; <span class="keyword">operator</span>-=(ModInt that) &#123; <span class="keyword">if</span> ((x += MOD - that.x) &gt;= MOD) x -= MOD; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">ModInt&amp; <span class="keyword">operator</span>*=(ModInt that) &#123; x = (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)x * that.x % MOD; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">ModInt&amp; <span class="keyword">operator</span>/=(ModInt that) &#123; <span class="built_in">return</span> (*<span class="keyword">this</span>) *= that.<span class="built_in">pow</span>(MOD - <span class="number">2</span>); &#125;</span><br><span class="line"></span><br><span class="line">ModInt <span class="keyword">operator</span>+(ModInt that) <span class="type">const</span> &#123; <span class="keyword">return</span> <span class="built_in">ModInt</span>(*<span class="keyword">this</span>) += that; &#125;</span><br><span class="line">ModInt <span class="keyword">operator</span>-(ModInt that) <span class="type">const</span> &#123; <span class="keyword">return</span> <span class="built_in">ModInt</span>(*<span class="keyword">this</span>) -= that; &#125;</span><br><span class="line">ModInt <span class="keyword">operator</span>*(ModInt that) <span class="type">const</span> &#123; <span class="keyword">return</span> <span class="built_in">ModInt</span>(*<span class="keyword">this</span>) *= that; &#125;</span><br><span class="line">ModInt <span class="keyword">operator</span>/(ModInt that) <span class="type">const</span> &#123; <span class="keyword">return</span> <span class="built_in">ModInt</span>(*<span class="keyword">this</span>) /= that; &#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;(ModInt that) <span class="type">const</span> &#123; <span class="keyword">return</span> x &lt; that.x; &#125;</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, ModInt a) &#123; os &lt;&lt; a.x; <span class="keyword">return</span> os; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Game"><a href="#Game" class="headerlink" title="Game"></a>Game</h2><h3 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h3><p>$1$堆石子，$n$个， 每次每人能取$[1, m]$个石子，不能拿的输</p><h4 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h4><p>$(m + 1) \mid n$ 时，先手必败</p><p>$(m + 1) \nmid n$ 时， 先手必胜</p><h4 id="prove"><a href="#prove" class="headerlink" title="prove"></a>prove</h4><ol><li>当$n \le m$时， 先手可直接取走所有</li><li>当$n &#x3D; m + 1$时，先手无论取走多少个，后手都能取走剩下所有</li><li>当$n &#x3D; k \times(m + 1)$时，对于每$m+1$个石子，先手取$i$个，后手取的$m+1−i$个</li><li>当$n &#x3D; k \times (m + 1) + x (0 &lt; x &lt; m + 1)$时，先手取$x$个，局势回到上一种情况</li></ol><h3 id="Nim"><a href="#Nim" class="headerlink" title="Nim"></a>Nim</h3><p>$n$堆石子，每堆$a_i$个，每人每次能从一堆石子中取任意多个石子但不能不取，不能拿的输</p><h4 id="conclusion-1"><a href="#conclusion-1" class="headerlink" title="conclusion"></a>conclusion</h4><p>$\bigoplus\limits_{i &#x3D; 1}^{n}a_i &#x3D; 0 $时，先手必败</p><p>$\bigoplus\limits_{i &#x3D; 1}^{n}a_i \neq 0 $时，先手必胜</p><h4 id="prove-1"><a href="#prove-1" class="headerlink" title="prove"></a>prove</h4><h3 id="Wythoff"><a href="#Wythoff" class="headerlink" title="Wythoff"></a>Wythoff</h3><p>$2$堆石子，$x, y$个，每人每次能从任意一堆中拿任意数量的石子或在两堆石子中拿走相同数量的石子，不能拿的输</p><h4 id="conclusion-2"><a href="#conclusion-2" class="headerlink" title="conclusion"></a>conclusion</h4><p>$\lfloor {(y - x) \times \frac{1 + \sqrt{5}}{2}} \rfloor &#x3D; x$ 或 $\lfloor {(x - y) \times \frac{1 + \sqrt{5}}{2}} \rfloor &#x3D; y$时，先手必败</p><p>$\lfloor {(y - x) \times \frac{1 + \sqrt{5}}{2}} \rfloor \neq x$ 且 $\lfloor {(x - y) \times \frac{1 + \sqrt{5}}{2}} \rfloor \neq y$时，先手必胜</p><h4 id="prove-2"><a href="#prove-2" class="headerlink" title="prove"></a>prove</h4><h3 id="Fibonacci"><a href="#Fibonacci" class="headerlink" title="Fibonacci"></a>Fibonacci</h3><p>$1$堆石子， $n$个，先手第一次能取任意多个，但不能取完，以后每次取子数不能超过前一次取子数的2倍，不能拿的输</p><h4 id="conclusion-3"><a href="#conclusion-3" class="headerlink" title="conclusion"></a>conclusion</h4><p>$n &#x3D; fib_i$时，先手必败</p><p>$n \neq fib_i$时，先手必胜</p><h4 id="prove-3"><a href="#prove-3" class="headerlink" title="prove"></a>prove</h4><h3 id="ExNim"><a href="#ExNim" class="headerlink" title="ExNim"></a>ExNim</h3><p>$n$堆石子，每堆$a_i$个，每人每次能从$[1, d]$堆石子中取任意多个石子但不能不取，不能拿的输</p><h4 id="conclusion-4"><a href="#conclusion-4" class="headerlink" title="conclusion"></a>conclusion</h4><p>二进制展开，设$cnt_{bit_i}$为某位为$1$的个数</p><p>$\forall i \quad (d + 1) \mid cnt_{bit_i}$时， 先手必败</p><p>$\exists i \quad (d + 1) \nmid cnt_{bit_i}$时，先手必胜</p><h4 id="prove-4"><a href="#prove-4" class="headerlink" title="prove"></a>prove</h4><h3 id="Staircase-Nim"><a href="#Staircase-Nim" class="headerlink" title="Staircase Nim"></a>Staircase Nim</h3><p>$n$堆石子，每堆$a_i$个，每次每人可以把第$i(i &gt; 1)$堆的任意个放到第$i - 1$堆里，或取第一堆任意个，不能拿的输</p><h4 id="conclusion-5"><a href="#conclusion-5" class="headerlink" title="conclusion"></a>conclusion</h4><p>$\bigoplus\limits_{i &#x3D; 1}^{\lceil \frac{n}{2} \rceil}a_{2i - 1} &#x3D; 0$时，先手必败</p><p>$\bigoplus\limits_{i &#x3D; 1}^{\lceil \frac{n}{2} \rceil}a_{2i - 1} \neq 0 $时，先手必胜</p><h4 id="prove-5"><a href="#prove-5" class="headerlink" title="prove"></a>prove</h4><h2 id="Geometry"><a href="#Geometry" class="headerlink" title="Geometry"></a>Geometry</h2><h3 id="point"><a href="#point" class="headerlink" title="point"></a>point</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">double</span> eps = <span class="number">1e-9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> x;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">point</span>(<span class="type">long</span> <span class="type">double</span> _x = <span class="number">0</span>, <span class="type">long</span> <span class="type">double</span> _y = <span class="number">0</span>)&#123;</span><br><span class="line">        x = _x;</span><br><span class="line">        y = _y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">square_length</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x * x + y * y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//模长</span></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">length</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sqrtl</span>(x * x + y * y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> point <span class="keyword">operator</span>+(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">point</span>(lp.x + rp.x, lp.y + rp.y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> point <span class="keyword">operator</span>-(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">point</span>(lp.x - rp.x, lp.y - rp.y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> point <span class="keyword">operator</span>*(<span class="type">const</span> point&amp; p, <span class="type">const</span> <span class="type">long</span> <span class="type">double</span>&amp; k)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">point</span>(p.x * k, p.y * k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> point <span class="keyword">operator</span>*(<span class="type">const</span> <span class="type">long</span> <span class="type">double</span>&amp; k, <span class="type">const</span> point&amp; p)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">point</span>(p.x * k, p.y * k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> point <span class="keyword">operator</span>/(<span class="type">const</span> point&amp; p, <span class="type">const</span> <span class="type">long</span> <span class="type">double</span>&amp; k)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">point</span>(p.x / k, p.y / k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(lp.x - rp.x) &lt; eps &amp;&amp; <span class="built_in">abs</span>(lp.y - rp.y) &lt; eps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(lp.x - rp.x) &gt; eps || <span class="built_in">abs</span>(lp.y - rp.y) &gt; eps;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="dot-cross"><a href="#dot-cross" class="headerlink" title="dot &amp; cross"></a>dot &amp; cross</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//点乘</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">dot</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lp.x * rp.x + lp.y * rp.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//叉乘</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">cross</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lp.x * rp.y - lp.y * rp.x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="distance"><a href="#distance" class="headerlink" title="distance"></a>distance</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">square_distance</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (lp.x - rp.x) * (lp.x - rp.x) + (lp.y - rp.y) * (lp.y - rp.y);</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="comment">//两点距离</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">distance</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrtl</span>((lp.x - rp.x) * (lp.x - rp.x) + (lp.y - rp.y) * (lp.y - rp.y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rotate"><a href="#rotate" class="headerlink" title="rotate"></a>rotate</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">double</span> PI = <span class="number">3.141592653589793</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//矢量旋转 逆时针旋转 o (弧度制)</span></span><br><span class="line"><span class="function">point <span class="title">rotate</span><span class="params">(<span class="type">const</span> point&amp; v, <span class="type">long</span> <span class="type">double</span> o)</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> x = v.x * <span class="built_in">cos</span>(o) - v.y * <span class="built_in">sin</span>(o);</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> y = v.x * <span class="built_in">sin</span>(o) + v.y * <span class="built_in">cos</span>(o);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">point</span>(x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sin-cos-angle-polar-angle"><a href="#sin-cos-angle-polar-angle" class="headerlink" title="sin &amp; cos &amp; angle &amp; polar_angle"></a>sin &amp; cos &amp; angle &amp; polar_angle</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cos</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">cos</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dot</span>(lp, rp) / lp.<span class="built_in">length</span>() / rp.<span class="built_in">length</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//sin</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">sin</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">cross</span>(lp, rp) / lp.<span class="built_in">length</span>() / rp.<span class="built_in">length</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//angle</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">angle</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">acos</span>(<span class="built_in">cos</span>(lp, rp));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//极角 三 &lt; 四 &lt; 一 &lt; 二 (象限)</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">polar_angle</span><span class="params">(<span class="type">const</span> point&amp; p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">atan2</span>(p.y, p.x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="point-and-line"><a href="#point-and-line" class="headerlink" title="point and line"></a>point and line</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//点到直线的距离 p到lp--rp的距离</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">distance</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp, <span class="type">const</span> point&amp; p)</span></span>&#123;</span><br><span class="line">    point vl = rp - lp;</span><br><span class="line">    point vr = p - lp;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">cross</span>(vl, vr) / vl.<span class="built_in">length</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求垂点 p到直线lp--rp的垂点</span></span><br><span class="line"><span class="function">point <span class="title">foot</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp, <span class="type">const</span> point&amp; p)</span></span>&#123;</span><br><span class="line">    point vl = rp - lp;</span><br><span class="line">    point vr = p - lp;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> k = <span class="built_in">dot</span>(vl, vr) / vl.<span class="built_in">length</span>() / vl.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">return</span> lp + vl * k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="line-and-line"><a href="#line-and-line" class="headerlink" title="line and line"></a>line and line</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//两直线交点</span></span><br><span class="line"><span class="function">point <span class="title">intersect</span><span class="params">(<span class="type">const</span> point&amp; flp, <span class="type">const</span> point&amp; frp, <span class="type">const</span> point&amp; slp, <span class="type">const</span> point&amp; srp)</span></span>&#123;</span><br><span class="line">    point sf = flp - slp;</span><br><span class="line">    point vf = frp - flp;</span><br><span class="line">    point vs = srp - slp;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> k = <span class="built_in">cross</span>(sf, vs) / <span class="built_in">cross</span>(vs, vf);</span><br><span class="line">    <span class="keyword">return</span> flp + vf * k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="point-and-segment"><a href="#point-and-segment" class="headerlink" title="point and segment"></a>point and segment</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//符号判断</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sign</span><span class="params">(<span class="type">long</span> <span class="type">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; eps)&#123;<span class="comment">//正数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; -eps)&#123;<span class="comment">//负数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//点在线段上(含端点) lp rp 为线段端点</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">on_segment</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp, <span class="type">const</span> point&amp; p)</span></span>&#123;</span><br><span class="line">    point vl = rp - lp;</span><br><span class="line">    point vr = p - lp;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> sv = <span class="built_in">cross</span>(vl, vr);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">sign</span>(sv) != <span class="number">0</span>)&#123;<span class="comment">//不在直线上</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> cv = <span class="built_in">dot</span>(vl, vr);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">sign</span>(cv) == <span class="number">-1</span>)&#123;<span class="comment">//在线段外</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vr.<span class="built_in">length</span>() &lt;= vl.<span class="built_in">length</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//点在线段上(不含端点) lp rp 为线段端点</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">on_segment_strict</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp, <span class="type">const</span> point&amp; p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">on_segment</span>(lp, rp, p) &amp;&amp; lp != p &amp;&amp; rp != p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="circle"><a href="#circle" class="headerlink" title="circle"></a>circle</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">circle</span> &#123;</span><br><span class="line">    point o;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> r;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//垂直平分线 两点式</span></span><br><span class="line"><span class="function">pair&lt;point, point&gt; <span class="title">perpendicular</span><span class="params">(<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; (lp + rp) / <span class="number">2</span>, (lp + rp) / <span class="number">2</span> + <span class="built_in">rotate</span>(rp - lp, PI / <span class="number">2</span>) &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//三点确定圆</span></span><br><span class="line"><span class="function">circle <span class="title">cover</span><span class="params">(<span class="type">const</span> point&amp; a, <span class="type">const</span> point&amp; b, <span class="type">const</span> point&amp; c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> lp = <span class="built_in">perpendicular</span>(a, b);</span><br><span class="line">    <span class="keyword">auto</span> rp = <span class="built_in">perpendicular</span>(a, c);</span><br><span class="line">    point o = <span class="built_in">intersect</span>(lp.first, lp.second, rp.first, rp.second);</span><br><span class="line">    <span class="keyword">return</span> &#123; o, <span class="built_in">distance</span>(o, a) &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="simpson"><a href="#simpson" class="headerlink" title="simpson"></a>simpson</h3><p>$$<br>\int_{l}^{r} f(x) dx \quad &#x3D; \quad (r - l) * {f(l) + f(r) + 4 * f({l + r \over 2}) \over 6}<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">double</span> eps = <span class="number">1e-9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">f</span><span class="params">(<span class="type">long</span> <span class="type">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ;<span class="comment">//f表达式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">simpon</span> <span class="params">(<span class="type">long</span> <span class="type">double</span> l, <span class="type">long</span> <span class="type">double</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">f</span>(l) + <span class="built_in">f</span>(r) + <span class="built_in">f</span>((l + r) / <span class="number">2</span>) * <span class="number">4</span>) * (r - l) / <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">get</span><span class="params">(<span class="type">long</span> <span class="type">double</span> l, <span class="type">long</span> <span class="type">double</span> r, <span class="type">long</span> <span class="type">double</span> ans)</span></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> lv = <span class="built_in">simpon</span>(l, m);</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> rv = <span class="built_in">simpon</span>(m, r);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabsl</span>(lv + rv - ans) &lt; eps)&#123;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">get</span>(l, m, lv) + <span class="built_in">get</span>(m, r, rv);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">get</span>(l, r, <span class="built_in">simpon</span>(l, r));</span><br></pre></td></tr></table></figure><h3 id="convex-hull"><a href="#convex-hull" class="headerlink" title="convex-hull"></a>convex-hull</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;point&gt; <span class="title">Andrew</span><span class="params">(vector&lt;point&gt; vp)</span></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(vp.<span class="built_in">begin</span>(), vp.<span class="built_in">end</span>(), [](<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp) -&gt; <span class="type">bool</span> &#123;<span class="comment">// X 第一关键字 Y 第二关键字</span></span><br><span class="line">        <span class="keyword">if</span>(lp.x == rp.x)&#123;</span><br><span class="line">            <span class="keyword">return</span> lp.y &lt; rp.y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lp.x &lt; rp.x;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">int</span> n = vp.<span class="built_in">size</span>();</span><br><span class="line">    vector&lt;point&gt; stk;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(stk.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">cross</span>(stk.<span class="built_in">back</span>() - stk[stk.<span class="built_in">size</span>() - <span class="number">2</span>], vp[i] - stk.<span class="built_in">back</span>()) &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            stk.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        stk.<span class="built_in">push_back</span>(vp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> k = stk.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = n - <span class="number">2</span>;i &gt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">while</span>(stk.<span class="built_in">size</span>() &gt; k &amp;&amp; <span class="built_in">cross</span>(stk.<span class="built_in">back</span>() - stk[stk.<span class="built_in">size</span>() - <span class="number">2</span>], vp[i] - stk.<span class="built_in">back</span>()) &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            stk.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        stk.<span class="built_in">push_back</span>(vp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    stk.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> stk;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="nearest-points"><a href="#nearest-points" class="headerlink" title="nearest-points"></a>nearest-points</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//平面最近点对</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">nearest_points</span><span class="params">(vector&lt;point&gt; vp)</span></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(vp.<span class="built_in">begin</span>(), vp.<span class="built_in">end</span>(), [](<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp) -&gt; <span class="type">bool</span> &#123;<span class="comment">// X 第一关键字 Y 第二关键字</span></span><br><span class="line">        <span class="keyword">if</span>(lp.x == rp.x)&#123;</span><br><span class="line">            <span class="keyword">return</span> lp.y &lt; rp.y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lp.x &lt; rp.x;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">long</span> <span class="type">double</span> inf = <span class="number">1e20</span>;<span class="comment">//最大值</span></span><br><span class="line">    function&lt;<span class="type">long</span> <span class="type">double</span>(<span class="type">int</span>, <span class="type">int</span>)&gt; get = [&amp;](<span class="type">int</span> l, <span class="type">int</span> r) -&gt; <span class="type">long</span> <span class="type">double</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">            <span class="keyword">return</span> inf;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(l + <span class="number">1</span> == r)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">distance</span>(vp[l], vp[r]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">double</span> ans = <span class="built_in">min</span>(<span class="built_in">get</span>(l, mid), <span class="built_in">get</span>(mid + <span class="number">1</span>, r));<span class="comment">//merge</span></span><br><span class="line">        <span class="comment">//合并</span></span><br><span class="line">        vector&lt;point&gt; tmp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = l;i &lt;= r;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">fabsl</span>(vp[i].x - vp[mid].x) &lt; ans)&#123;</span><br><span class="line">                tmp.<span class="built_in">push_back</span>(vp[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(tmp.<span class="built_in">begin</span>(), tmp.<span class="built_in">end</span>(), [](<span class="type">const</span> point&amp; lp, <span class="type">const</span> point&amp; rp) -&gt; <span class="type">bool</span> &#123;<span class="comment">// Y 第一关键字 X 第二关键字</span></span><br><span class="line">            <span class="keyword">if</span>(lp.y == rp.y)&#123;</span><br><span class="line">                <span class="keyword">return</span> lp.x &lt; rp.x;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> lp.y &lt; rp.y;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; tmp.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>;j &lt; tmp.<span class="built_in">size</span>() &amp;&amp; tmp[j].y - tmp[i].y &lt; ans;j++)&#123;</span><br><span class="line">                ans = <span class="built_in">min</span>(ans, <span class="built_in">distance</span>(tmp[i], tmp[j]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">get</span>(<span class="number">0</span>, vp.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="half-plane"><a href="#half-plane" class="headerlink" title="half-plane"></a>half-plane</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span> &#123;</span><br><span class="line">    point lp;</span><br><span class="line">    point rp;</span><br><span class="line">    <span class="built_in">line</span>(point _lp, point _rp)&#123;</span><br><span class="line">        lp = _lp;</span><br><span class="line">        rp = _rp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_right</span><span class="params">(line a, line b, line c)</span></span>&#123;<span class="comment">//判断交点在直线右侧</span></span><br><span class="line">    point p = <span class="built_in">intersect</span>(b.lp, b.rp, c.lp, c.rp);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">cross</span>(a.rp - a.lp, p - a.lp) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">half_plane</span><span class="params">(vector&lt;line&gt; ve)</span></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(ve.<span class="built_in">begin</span>(), ve.<span class="built_in">end</span>(), [](<span class="type">const</span> line&amp; le, <span class="type">const</span> line&amp; re) -&gt; <span class="type">bool</span> &#123;<span class="comment">//极角排序 + 左侧排序</span></span><br><span class="line">        <span class="type">long</span> <span class="type">double</span> le_angle = <span class="built_in">polar_angle</span>(le.rp - le.lp);</span><br><span class="line">        <span class="type">long</span> <span class="type">double</span> re_angle = <span class="built_in">polar_angle</span>(re.rp - re.lp);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">fabsl</span>(le_angle - re_angle) &lt; eps)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">cross</span>(le.rp - le.lp, re.rp - le.lp) &lt; <span class="number">0</span>;<span class="comment">// 注意是 re.rp - le.lp</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> le_angle &lt; re_angle;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    deque&lt;line&gt; q;</span><br><span class="line">    <span class="type">int</span> n = ve.<span class="built_in">size</span>();</span><br><span class="line">    q.<span class="built_in">push_back</span>(ve.<span class="built_in">front</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">polar_angle</span>(ve[i].rp - ve[i].lp) - <span class="built_in">polar_angle</span>(ve[i - <span class="number">1</span>].rp - ve[i - <span class="number">1</span>].lp) &lt; eps)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">is_right</span>(ve[i], q.<span class="built_in">back</span>(), q[q.<span class="built_in">size</span>() - <span class="number">2</span>]))&#123;</span><br><span class="line">            q.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">is_right</span>(ve[i], q.<span class="built_in">front</span>(), q[<span class="number">1</span>]))&#123;</span><br><span class="line">            q.<span class="built_in">pop_front</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        q.<span class="built_in">push_back</span>(ve[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">is_right</span>(q.<span class="built_in">front</span>(), q.<span class="built_in">back</span>(), q[q.<span class="built_in">size</span>() - <span class="number">2</span>]))&#123;</span><br><span class="line">        q.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    q.<span class="built_in">push_back</span>(q.<span class="built_in">front</span>());</span><br><span class="line"></span><br><span class="line">    vector&lt;point&gt; tmp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; q.<span class="built_in">size</span>() - <span class="number">1</span>;i++)&#123;</span><br><span class="line">        tmp.<span class="built_in">push_back</span>(<span class="built_in">intersect</span>(q[i].lp, q[i].rp, q[i + <span class="number">1</span>].lp, q[i + <span class="number">1</span>].rp));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; tmp.<span class="built_in">size</span>() - <span class="number">1</span>;i++)&#123;</span><br><span class="line">        ans += <span class="built_in">cross</span>(tmp[i] - tmp.<span class="built_in">front</span>(), tmp[i + <span class="number">1</span>] - tmp.<span class="built_in">front</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans / <span class="number">2.0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="random-incremental"><a href="#random-incremental" class="headerlink" title="random-incremental"></a>random-incremental</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">circle <span class="title">cover</span><span class="params">(<span class="type">const</span> point&amp; a, <span class="type">const</span> point&amp; b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; (a + b) / <span class="number">2</span>, <span class="built_in">distance</span>(a, b) / <span class="number">2</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最小圆覆盖</span></span><br><span class="line"><span class="function">circle <span class="title">increment</span><span class="params">(vector&lt;point&gt; vp)</span></span>&#123;</span><br><span class="line">    <span class="built_in">random_shuffle</span>(vp.<span class="built_in">begin</span>(), vp.<span class="built_in">end</span>());<span class="comment">//随机化</span></span><br><span class="line">    <span class="type">int</span> n = vp.<span class="built_in">size</span>();</span><br><span class="line">    circle ans = &#123;vp.<span class="built_in">front</span>(), <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ans.r &lt; <span class="built_in">distance</span>(ans.o, vp[i]))&#123;</span><br><span class="line">            ans = &#123;vp[i], <span class="number">0</span>&#125;;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; i;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ans.r &lt; <span class="built_in">distance</span>(ans.o, vp[j]))&#123;</span><br><span class="line">                    ans = <span class="built_in">cover</span>(vp[i], vp[j]);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>;k &lt; j;k++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(ans.r &lt; <span class="built_in">distance</span>(ans.o, vp[k]))&#123;</span><br><span class="line">                            ans = <span class="built_in">cover</span>(vp[i], vp[j], vp[k]);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><h3 id="Int128"><a href="#Int128" class="headerlink" title="Int128"></a>Int128</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(__int128&amp; x)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> f = <span class="number">1</span>;</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">f *= <span class="number">-1</span>;</span><br><span class="line">ch = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">x = x * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">ch = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line">x *= f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">print</span><span class="params">(__int128 x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">x = -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="O2-O3-fast-read-fast-write"><a href="#O2-O3-fast-read-fast-write" class="headerlink" title="O2 &amp; O3 &amp; fast-read &amp; &amp; fast-write"></a>O2 &amp; O3 &amp; fast-read &amp; &amp; fast-write</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//O2</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//O3</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(3,<span class="string">&quot;Ofast&quot;</span>,<span class="string">&quot;inline&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//fast-read</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> w = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            w = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ch = <span class="built_in">getchar</span>(); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + (ch - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//fast-write</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        x = -x;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>) &#123;</span><br><span class="line">        <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> Template </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frieren Beyond Journey&#39;s End Solution</title>
      <link href="/2023/12/02/Frieren%20Beyond%20Journey&#39;s%20End%20Solution/"/>
      <url>/2023/12/02/Frieren%20Beyond%20Journey&#39;s%20End%20Solution/</url>
      
        <content type="html"><![CDATA[<h1 id="Frieren-Beyond-Journey’s-End-Solution"><a href="#Frieren-Beyond-Journey’s-End-Solution" class="headerlink" title="Frieren Beyond Journey’s End Solution"></a>Frieren Beyond Journey’s End Solution</h1><p>考虑对a前缀和得s<br>$$<br>\sum_{i&#x3D;1}^{n}\sum_{l&#x3D;1}^{i}\sum_{r&#x3D;i}^{n}\sum_{k&#x3D;l}^{r}a_k<br>$$</p><p>$$<br>&#x3D; \sum_{i&#x3D;1}^{n}\sum_{l&#x3D;1}^{i}\sum_{r&#x3D;i}^{n}(s[r] - s[l - 1])<br>$$</p><p>$$<br>&#x3D; \sum_{i&#x3D;1}^{n}(\sum_{l&#x3D;1}^{i}\sum_{r&#x3D;i}^ns[r] - \sum_{l&#x3D;1}^{i}\sum_{r&#x3D;i}^ns[l - 1])<br>$$</p><p>$$<br>&#x3D; \sum_{i&#x3D;1}^{n}(\sum_{l&#x3D;1}^{i}\sum_{r&#x3D;i}^ns[r] - \sum_{r&#x3D;i}^{n}\sum_{l&#x3D;1}^is[l - 1])<br>$$</p><p>$$<br>&#x3D; \sum_{i&#x3D;1}^{n}(i  * \sum_{r&#x3D;i}^ns[r] - (n - i + 1) * \sum_{l&#x3D;1}^is[l - 1])<br>$$</p><p>可以看出这两公式又可以前缀和 即对s前缀和得ss<br>$$<br>\sum_{r&#x3D;i}^n s[r] &#x3D; ss[n] - ss[i - 1]<br>$$</p><p>$$<br>\sum_{l&#x3D;1}^i s[l - 1] &#x3D;  \sum_{l&#x3D;0}^{i - 1}s[l] &#x3D; ss[i - 1]<br>$$</p><p>带入进去</p><p>$$<br>&#x3D; \sum_{i&#x3D;1}^{n}(i * (ss[n] - ss[i - 1]) - (n - i + 1) * ss[i - 1])<br>$$</p><p>这个是公式变量只有 $i$， $O(N)$ 累加即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> p = <span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> T = <span class="number">1</span>;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">val</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">s</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">ss</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">cin &gt;&gt; val[i];</span><br><span class="line">s[i] = (s[i - <span class="number">1</span>] + val[i]) % p;</span><br><span class="line">ss[i] = (ss[i - <span class="number">1</span>] + s[i]) % p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">res += (ss[n] - ss[i - <span class="number">1</span>]) * i - ss[i - <span class="number">1</span>] * (n - i + <span class="number">1</span>);</span><br><span class="line">res %= p;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; (res % p + p) % p &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复杂度$O(T * n)$</p><h1 id="杂记"><a href="#杂记" class="headerlink" title="杂记"></a>杂记</h1><p>本道题在比赛两次被删， 在第三场比赛才放上去，呜呜，赛时过了4个（大佬前几场打了，后面就不打了，来了几个，估计是他们做出来的），本题是在学习单调栈时想到的题，用了该题的公式，简化了该题</p><p><a href="https://leetcode.cn/problems/sum-of-total-strength-of-wizards/">2281. 巫师的总力量和 - 力扣（LeetCode）</a></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> SCUT校赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frieren and Rotating Calipers Solution</title>
      <link href="/2023/12/02/Frieren%20and%20Rotating%20Calipers%20Solution/"/>
      <url>/2023/12/02/Frieren%20and%20Rotating%20Calipers%20Solution/</url>
      
        <content type="html"><![CDATA[<h1 id="Frieren-and-Rotating-Calipers-Solution"><a href="#Frieren-and-Rotating-Calipers-Solution" class="headerlink" title="Frieren and Rotating Calipers Solution"></a>Frieren and Rotating Calipers Solution</h1><p>由题矩形长和宽需要与$x$轴或 $y$轴平行</p><p>找到最大，最小的$x$， $y$记为$max_x, min_x, max_y, min_y$</p><p>答案$(max_x - min_x) * (max_y - min_y)$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">x</span><span class="params">(n)</span>, <span class="title">y</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            cin &gt;&gt; x[i] &gt;&gt; y[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> max_x = *<span class="built_in">max_element</span>(x.<span class="built_in">begin</span>(), x.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> max_y = *<span class="built_in">max_element</span>(y.<span class="built_in">begin</span>(), y.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> min_x = *<span class="built_in">min_element</span>(x.<span class="built_in">begin</span>(), x.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> min_y = *<span class="built_in">min_element</span>(y.<span class="built_in">begin</span>(), y.<span class="built_in">end</span>());</span><br><span class="line">        cout &lt;&lt; (max_x - min_x) * (max_y - min_y) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复杂度$O(T * n)$</p><h1 id="杂记"><a href="#杂记" class="headerlink" title="杂记"></a>杂记</h1><p>学习旋转卡壳时想到的签到题，赛时凡过题者都过了这题</p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> SCUT校赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在blog写作</title>
      <link href="/2023/12/02/Write%20On%20Hexo/"/>
      <url>/2023/12/02/Write%20On%20Hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="在blog写作"><a href="#在blog写作" class="headerlink" title="在blog写作"></a>在blog写作</h1><h2 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h2><p>正常写完md后 放到post下</p><p><strong>注意md Front-matter</strong></p><p><a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter | Hexo</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g </span><br></pre></td></tr></table></figure><p>然后本地启动就可以看到文章</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s </span><br></pre></td></tr></table></figure><p>上传到自己的网站要部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d </span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">常用命令</th><th align="left">简写</th><th align="left">中文含义</th></tr></thead><tbody><tr><td align="left">hexo server</td><td align="left">hexo s</td><td align="left">本地启动</td></tr><tr><td align="left">hexo generate</td><td align="left">hexo g</td><td align="left">生成静态文件</td></tr><tr><td align="left">hexo deploy</td><td align="left">hexo d</td><td align="left">部署网站</td></tr><tr><td align="left">hexo clean</td><td align="left">hexo cl</td><td align="left">清除缓存和已经生成的静态文件</td></tr></tbody></table><p>一般情况，我们先依次输入<code>hexo clean</code>、 <code>hexo g</code> 、 <code>hexo s</code> ，没问题再 <code>hexo d</code>就行。</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="图片未显示"><a href="#图片未显示" class="headerlink" title="图片未显示"></a>图片未显示</h3><ol><li><strong>图片名</strong>和<strong>路径</strong>不能有空格</li><li>本地图片要<strong>相对路径</strong> 以blog为根目录</li></ol><p>typora + hexo</p><p>在Front-matter加上</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typora-root-url: ..</span><br></pre></td></tr></table></figure><p><img src="/images/WriteOnHexo/root.png" alt="root"></p><p>写作时把图片拖入即可</p><p><img src="/images/WriteOnHexo/write.png" alt="write"></p><p>解释：在source下创建images放所有文章图片 WriteOnHexo是本文的图片文件夹， 拖入即可显示，并且网站上也可正常显示</p><p>markdown具体如下</p><p><img src="/images/WriteOnHexo/concrete.png" alt="concrete"></p><h3 id="数学表达式乱码"><a href="#数学表达式乱码" class="headerlink" title="数学表达式乱码"></a>数学表达式乱码</h3><p>需要安装和配置 hexo-math 具体可看他人教程</p>]]></content>
      
      
      <categories>
          
          <category> Build blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地hexo部署</title>
      <link href="/2023/12/02/Local%20Hexo/"/>
      <url>/2023/12/02/Local%20Hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="本地hexo部署"><a href="#本地hexo部署" class="headerlink" title="本地hexo部署"></a>本地hexo部署</h1><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>Git下载地址：<a href="https://git-scm.com/download/">https://git-scm.com/download/</a></p><p><img src="/images/LocalHexo/gitdownload.png" alt="gitdownload"></p><p>直接安装即可，网站会自动匹配合适版本（一直点next， 安装位置可自定义）</p><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>Node.js下载地址： <a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p><p><img src="/images/LocalHexo/nodejsdownload.png" alt="nodejsdownload"></p><p>选择合适的installer直接安装即可</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>新建文件夹blog</p><p>该<strong>blog文件夹作为blog根目录</strong>， 此后所有git bash 都在这操作</p><p><strong>blog内</strong>右键可以看到 git bash here</p><p><img src="/images/LocalHexo/gitbash.png" alt="gitbash"></p><p>安装hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><img src="/images/LocalHexo/hexodownload.png" alt="hexodownload"></p><p>初始化hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p><img src="/images/LocalHexo/hexoinit.png" alt="hexoinit"></p><p>安装相关依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p><img src="/images/LocalHexo/hexoinstall.png" alt="hexoinstall"></p><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="/images/LocalHexo/hexostart.png" alt="hexostart"></p><p>输入后可以看到这个本地静态网站open即可</p><p><img src="/images/LocalHexo/hexolocal.png" alt="hexolocal"></p><p>网站界面可以用butterfly 和 Next 美化</p><p><img src="/images/LocalHexo/webpage.png" alt="webpage"></p><p>利用butterfly美化后，具体可参考</p><p><a href="https://butterfly.js.org/">https://butterfly.js.org/</a></p>]]></content>
      
      
      <categories>
          
          <category> Build blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frieren and Rotating Calipers</title>
      <link href="/2023/12/01/Frieren%20and%20Rotating%20Calipers/"/>
      <url>/2023/12/01/Frieren%20and%20Rotating%20Calipers/</url>
      
        <content type="html"><![CDATA[<h1 id="Frieren-and-Rotating-Calipers"><a href="#Frieren-and-Rotating-Calipers" class="headerlink" title="Frieren and Rotating Calipers"></a><a href="https://www.luogu.com.cn/problem/U382825">Frieren and Rotating Calipers</a></h1><p><strong>时间限制：1s</strong><br><strong>空间限制：256MB</strong></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>​芙莉莲正在学习旋转卡壳，但是字不会念，你能告诉她正确的读音吗？</p><p>学习过程中看到最小矩形覆盖问题，即给你<strong>n</strong>个点，求最小的矩形使得覆盖所有点。她发现最小的矩形的长和宽不一定与$x$轴，$y$轴平行，她认为这些矩形非常无聊，你能找到面积最小的<strong>有趣矩形</strong>使得覆盖所有点吗？</p><p><strong>有趣矩形</strong>：长和宽与$x$轴或$y$轴平行的矩形</p><h3 id="Input-Description"><a href="#Input-Description" class="headerlink" title="Input Description"></a>Input Description</h3><p>第一行一个正整数<strong>T</strong>表示测试数 $1 \le T \le 10^2$</p><p>每个测试的第一行有一个正整数<strong>n</strong>表示点的数量 $1 \le n \le 10^4$</p><p>每个测试接下来有n行，每行两个整数 $(x, y) $   $0 \le x \le 10^4 $，$0 \le y \le 10^4 $</p><h3 id="Output-Description"><a href="#Output-Description" class="headerlink" title="Output Description"></a>Output Description</h3><p>每行输出符合条件的<strong>有趣矩形</strong>的面积</p><h3 id="Input-Sample"><a href="#Input-Sample" class="headerlink" title="Input Sample"></a>Input Sample</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">0 0</span><br><span class="line">1 0</span><br><span class="line">0 1</span><br><span class="line">4</span><br><span class="line">0 0</span><br><span class="line">1 0</span><br><span class="line">0 1</span><br><span class="line">1 1</span><br></pre></td></tr></table></figure><h3 id="Output-Sample"><a href="#Output-Sample" class="headerlink" title="Output Sample"></a>Output Sample</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> SCUT校赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frieren Beyond Journey&#39;s End</title>
      <link href="/2023/12/01/Frieren%20Beyond%20Journey&#39;s%20End/"/>
      <url>/2023/12/01/Frieren%20Beyond%20Journey&#39;s%20End/</url>
      
        <content type="html"><![CDATA[<h1 id="Frieren-Beyond-Journey’s-End"><a href="#Frieren-Beyond-Journey’s-End" class="headerlink" title="Frieren Beyond Journey’s End"></a><a href="https://www.luogu.com.cn/problem/U367574">Frieren Beyond Journey’s End</a></h1><p><strong>时间限制：1s</strong><br><strong>空间限制：256MB</strong></p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>&emsp;&emsp;芙莉莲热衷周游各方搜集奇怪的魔法，某一天她得到一个有趣的魔法公式,  </p><p>$$<br> \sum_{i&#x3D;1}^n\sum_{l&#x3D;1}^i\sum_{r&#x3D;i}^n\sum_{k&#x3D;l}^r a_k<br>$$</p><p>同时为此搜集了<strong>n</strong>个魔法单元。由于种族的长寿天性导致她对时间的感觉不同于一般人，所以她请求你来帮忙。她估算结果可能很大，请你告诉她结果对<strong>1000000007</strong>取余后的数</p><h3 id="Input-Description"><a href="#Input-Description" class="headerlink" title="Input Description"></a>Input Description</h3><p>第一行一个正整数<strong>T</strong>表示测试数 $ 1 \le T \le 10^5 $</p><p>每个测试的第一行有一个正整数<strong>n</strong>表示魔法单元的数量 $ 1 \le n \le 10^5 $</p><p>每个测试的第二行有<strong>n</strong>个整数 $ a_1, a_2, … , a_n  \quad 0 \le a_i \le 10^9 $</p><p>题目保证总的所有n的和不会超过 $ 2 \times 10^5 $</p><h3 id="Output-Description"><a href="#Output-Description" class="headerlink" title="Output Description"></a>Output Description</h3><p>对于每个测试输出一个整数 即结果对  $ 1000000007 $ 取余后的数</p><h3 id="Input-Sample"><a href="#Input-Sample" class="headerlink" title="Input Sample"></a>Input Sample</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">4</span><br><span class="line">2 0 2 3</span><br><span class="line">4</span><br><span class="line">1 0 2 5</span><br></pre></td></tr></table></figure><h3 id="Output-Sample"><a href="#Output-Sample" class="headerlink" title="Output Sample"></a>Output Sample</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">80</span><br><span class="line">90</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
          <category> SCUT校赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>usage</title>
      <link href="/2023/12/01/usage/"/>
      <url>/2023/12/01/usage/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="Load-images"><a href="#Load-images" class="headerlink" title="Load images"></a>Load images</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><h3 id="Tags"><a href="#Tags" class="headerlink" title="Tags"></a>Tags</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tags: [1, 2, 3] //标签1， 2， 3</span><br></pre></td></tr></table></figure><h3 id="Categories"><a href="#Categories" class="headerlink" title="Categories"></a>Categories</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">categories: //分类 </span><br><span class="line">-[1]//属于分类1</span><br><span class="line">-[2]//属于分类1</span><br><span class="line">-[3, 4]//属于分类3下的分类4</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>Categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Movies</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Music</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>About</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
